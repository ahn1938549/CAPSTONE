
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a030  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800a1d0  0800a1d0  0001a1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a694  0800a694  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a69c  0800a69c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200001e8  0800a888  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800a888  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e527  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e65  00000000  00000000  0002e73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000305a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017159  00000000  00000000  00031f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e355  00000000  00000000  00049061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f4c5  00000000  00000000  000573b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e687b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb0  00000000  00000000  000e68cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1b8 	.word	0x0800a1b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a1b8 	.word	0x0800a1b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b9aa 	b.w	8000f64 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f83c 	bl	8000c94 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2lz>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	f7ff ff5b 	bl	8000aec <__aeabi_dcmplt>
 8000c36:	b928      	cbnz	r0, 8000c44 <__aeabi_d2lz+0x1c>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c40:	f000 b80a 	b.w	8000c58 <__aeabi_d2ulz>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c4a:	f000 f805 	bl	8000c58 <__aeabi_d2ulz>
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2ulz>:
 8000c58:	b5d0      	push	{r4, r6, r7, lr}
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__aeabi_d2ulz+0x34>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4606      	mov	r6, r0
 8000c60:	460f      	mov	r7, r1
 8000c62:	f7ff fcd1 	bl	8000608 <__aeabi_dmul>
 8000c66:	f7ff ffa7 	bl	8000bb8 <__aeabi_d2uiz>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	f7ff fc52 	bl	8000514 <__aeabi_ui2d>
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <__aeabi_d2ulz+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f7ff fcc8 	bl	8000608 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4639      	mov	r1, r7
 8000c80:	f7ff fb0a 	bl	8000298 <__aeabi_dsub>
 8000c84:	f7ff ff98 	bl	8000bb8 <__aeabi_d2uiz>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c8c:	3df00000 	.word	0x3df00000
 8000c90:	41f00000 	.word	0x41f00000

08000c94 <__udivmoddi4>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	9d08      	ldr	r5, [sp, #32]
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	468e      	mov	lr, r1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d14d      	bne.n	8000d3e <__udivmoddi4+0xaa>
 8000ca2:	428a      	cmp	r2, r1
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	d969      	bls.n	8000d7c <__udivmoddi4+0xe8>
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	b152      	cbz	r2, 8000cc4 <__udivmoddi4+0x30>
 8000cae:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb2:	f1c2 0120 	rsb	r1, r2, #32
 8000cb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc2:	4094      	lsls	r4, r2
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	0c21      	lsrs	r1, r4, #16
 8000cca:	fbbe f6f8 	udiv	r6, lr, r8
 8000cce:	fa1f f78c 	uxth.w	r7, ip
 8000cd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000cd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cda:	fb06 f107 	mul.w	r1, r6, r7
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x64>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cea:	f080 811f 	bcs.w	8000f2c <__udivmoddi4+0x298>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 811c 	bls.w	8000f2c <__udivmoddi4+0x298>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 f707 	mul.w	r7, r0, r7
 8000d0c:	42a7      	cmp	r7, r4
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x92>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d18:	f080 810a 	bcs.w	8000f30 <__udivmoddi4+0x29c>
 8000d1c:	42a7      	cmp	r7, r4
 8000d1e:	f240 8107 	bls.w	8000f30 <__udivmoddi4+0x29c>
 8000d22:	4464      	add	r4, ip
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	1be4      	subs	r4, r4, r7
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa4>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xc2>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80ef 	beq.w	8000f26 <__udivmoddi4+0x292>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x160>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd4>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80f9 	bhi.w	8000f5a <__udivmoddi4+0x2c6>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	469e      	mov	lr, r3
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa4>
 8000d76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa4>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xec>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 8092 	bne.w	8000eae <__udivmoddi4+0x21a>
 8000d8a:	eba1 010c 	sub.w	r1, r1, ip
 8000d8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	2601      	movs	r6, #1
 8000d98:	0c20      	lsrs	r0, r4, #16
 8000d9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000da2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da6:	fb0e f003 	mul.w	r0, lr, r3
 8000daa:	4288      	cmp	r0, r1
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x12c>
 8000dae:	eb1c 0101 	adds.w	r1, ip, r1
 8000db2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x12a>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f200 80cb 	bhi.w	8000f54 <__udivmoddi4+0x2c0>
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc8:	fb07 1110 	mls	r1, r7, r0, r1
 8000dcc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x156>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x154>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2ca>
 8000de8:	4608      	mov	r0, r1
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df2:	e79c      	b.n	8000d2e <__udivmoddi4+0x9a>
 8000df4:	f1c6 0720 	rsb	r7, r6, #32
 8000df8:	40b3      	lsls	r3, r6
 8000dfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e02:	fa20 f407 	lsr.w	r4, r0, r7
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	431c      	orrs	r4, r3
 8000e0c:	40f9      	lsrs	r1, r7
 8000e0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e12:	fa00 f306 	lsl.w	r3, r0, r6
 8000e16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1a:	0c20      	lsrs	r0, r4, #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fb09 1118 	mls	r1, r9, r8, r1
 8000e24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e28:	fb08 f00e 	mul.w	r0, r8, lr
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e32:	d90b      	bls.n	8000e4c <__udivmoddi4+0x1b8>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e3c:	f080 8088 	bcs.w	8000f50 <__udivmoddi4+0x2bc>
 8000e40:	4288      	cmp	r0, r1
 8000e42:	f240 8085 	bls.w	8000f50 <__udivmoddi4+0x2bc>
 8000e46:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	1a09      	subs	r1, r1, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e54:	fb09 1110 	mls	r1, r9, r0, r1
 8000e58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e60:	458e      	cmp	lr, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1e2>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e6c:	d26c      	bcs.n	8000f48 <__udivmoddi4+0x2b4>
 8000e6e:	458e      	cmp	lr, r1
 8000e70:	d96a      	bls.n	8000f48 <__udivmoddi4+0x2b4>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e7e:	eba1 010e 	sub.w	r1, r1, lr
 8000e82:	42a1      	cmp	r1, r4
 8000e84:	46c8      	mov	r8, r9
 8000e86:	46a6      	mov	lr, r4
 8000e88:	d356      	bcc.n	8000f38 <__udivmoddi4+0x2a4>
 8000e8a:	d053      	beq.n	8000f34 <__udivmoddi4+0x2a0>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x212>
 8000e8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e92:	eb61 010e 	sbc.w	r1, r1, lr
 8000e96:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e9e:	40f1      	lsrs	r1, r6
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	f1c2 0320 	rsb	r3, r2, #32
 8000eb2:	40d8      	lsrs	r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	4301      	orrs	r1, r0
 8000ec0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec4:	fa1f fe8c 	uxth.w	lr, ip
 8000ec8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ecc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed0:	0c0b      	lsrs	r3, r1, #16
 8000ed2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ed6:	fb00 f60e 	mul.w	r6, r0, lr
 8000eda:	429e      	cmp	r6, r3
 8000edc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x260>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eea:	d22f      	bcs.n	8000f4c <__udivmoddi4+0x2b8>
 8000eec:	429e      	cmp	r6, r3
 8000eee:	d92d      	bls.n	8000f4c <__udivmoddi4+0x2b8>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1b9b      	subs	r3, r3, r6
 8000ef6:	b289      	uxth	r1, r1
 8000ef8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000efc:	fb07 3316 	mls	r3, r7, r6, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb06 f30e 	mul.w	r3, r6, lr
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x28a>
 8000f0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f10:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f14:	d216      	bcs.n	8000f44 <__udivmoddi4+0x2b0>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d914      	bls.n	8000f44 <__udivmoddi4+0x2b0>
 8000f1a:	3e02      	subs	r6, #2
 8000f1c:	4461      	add	r1, ip
 8000f1e:	1ac9      	subs	r1, r1, r3
 8000f20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f24:	e738      	b.n	8000d98 <__udivmoddi4+0x104>
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e705      	b.n	8000d38 <__udivmoddi4+0xa4>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e3      	b.n	8000cf8 <__udivmoddi4+0x64>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6f8      	b.n	8000d26 <__udivmoddi4+0x92>
 8000f34:	454b      	cmp	r3, r9
 8000f36:	d2a9      	bcs.n	8000e8c <__udivmoddi4+0x1f8>
 8000f38:	ebb9 0802 	subs.w	r8, r9, r2
 8000f3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7a3      	b.n	8000e8c <__udivmoddi4+0x1f8>
 8000f44:	4646      	mov	r6, r8
 8000f46:	e7ea      	b.n	8000f1e <__udivmoddi4+0x28a>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	e794      	b.n	8000e76 <__udivmoddi4+0x1e2>
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	e7d1      	b.n	8000ef4 <__udivmoddi4+0x260>
 8000f50:	46d0      	mov	r8, sl
 8000f52:	e77b      	b.n	8000e4c <__udivmoddi4+0x1b8>
 8000f54:	3b02      	subs	r3, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	e732      	b.n	8000dc0 <__udivmoddi4+0x12c>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e709      	b.n	8000d72 <__udivmoddi4+0xde>
 8000f5e:	4464      	add	r4, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x156>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_UART_RxCpltCallback>:
static uint8_t cnt;
static uint8_t k=0;
volatile uint8_t str[10];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]


	if(huart->Instance == USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_UART_RxCpltCallback+0x13c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	f040 808f 	bne.w	800109a <HAL_UART_RxCpltCallback+0x132>
	{

		if(HAL_UART_Receive_DMA(&huart1, &rx_data, 1) == HAL_OK);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	494a      	ldr	r1, [pc, #296]	; (80010a8 <HAL_UART_RxCpltCallback+0x140>)
 8000f80:	484a      	ldr	r0, [pc, #296]	; (80010ac <HAL_UART_RxCpltCallback+0x144>)
 8000f82:	f003 fd3d 	bl	8004a00 <HAL_UART_Receive_DMA>
		{
			Buffers[heads++] = rx_data;
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <HAL_UART_RxCpltCallback+0x148>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	b2d1      	uxtb	r1, r2
 8000f90:	4a47      	ldr	r2, [pc, #284]	; (80010b0 <HAL_UART_RxCpltCallback+0x148>)
 8000f92:	7011      	strb	r1, [r2, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <HAL_UART_RxCpltCallback+0x140>)
 8000f98:	7819      	ldrb	r1, [r3, #0]
 8000f9a:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <HAL_UART_RxCpltCallback+0x14c>)
 8000f9c:	5499      	strb	r1, [r3, r2]
			if(gotPacket == true)
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <HAL_UART_RxCpltCallback+0x150>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d078      	beq.n	800109a <HAL_UART_RxCpltCallback+0x132>
			{
				if(rx_data =='*')
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_UART_RxCpltCallback+0x140>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b2a      	cmp	r3, #42	; 0x2a
 8000fae:	d074      	beq.n	800109a <HAL_UART_RxCpltCallback+0x132>
				{

				}
				else if(rx_data==',')
 8000fb0:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <HAL_UART_RxCpltCallback+0x140>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b2c      	cmp	r3, #44	; 0x2c
 8000fb6:	d121      	bne.n	8000ffc <HAL_UART_RxCpltCallback+0x94>
				{
					Buffer[head] = '\0';
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <HAL_UART_RxCpltCallback+0x158>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	5499      	strb	r1, [r3, r2]
					data[data_cnt] = atof(Buffer);
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	; (80010c4 <HAL_UART_RxCpltCallback+0x15c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461c      	mov	r4, r3
 8000fce:	483c      	ldr	r0, [pc, #240]	; (80010c0 <HAL_UART_RxCpltCallback+0x158>)
 8000fd0:	f004 fedc 	bl	8005d8c <atof>
 8000fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd8:	eef0 7a60 	vmov.f32	s15, s1
 8000fdc:	4a3a      	ldr	r2, [pc, #232]	; (80010c8 <HAL_UART_RxCpltCallback+0x160>)
 8000fde:	00e3      	lsls	r3, r4, #3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	ed83 7b00 	vstr	d7, [r3]
					data_cnt+=1;
 8000fe6:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <HAL_UART_RxCpltCallback+0x15c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	3301      	adds	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <HAL_UART_RxCpltCallback+0x15c>)
 8000ff2:	701a      	strb	r2, [r3, #0]
					head = 0;
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

}
 8000ffa:	e04e      	b.n	800109a <HAL_UART_RxCpltCallback+0x132>
				else if(rx_data == '\r')
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_UART_RxCpltCallback+0x140>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b0d      	cmp	r3, #13
 8001002:	d125      	bne.n	8001050 <HAL_UART_RxCpltCallback+0xe8>
					Buffer[head]  = '\0';
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_UART_RxCpltCallback+0x158>)
 800100e:	2100      	movs	r1, #0
 8001010:	5499      	strb	r1, [r3, r2]
					data[data_cnt]= atof(Buffer);
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <HAL_UART_RxCpltCallback+0x15c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461c      	mov	r4, r3
 800101a:	4829      	ldr	r0, [pc, #164]	; (80010c0 <HAL_UART_RxCpltCallback+0x158>)
 800101c:	f004 feb6 	bl	8005d8c <atof>
 8001020:	eeb0 7a40 	vmov.f32	s14, s0
 8001024:	eef0 7a60 	vmov.f32	s15, s1
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_UART_RxCpltCallback+0x160>)
 800102a:	00e3      	lsls	r3, r4, #3
 800102c:	4413      	add	r3, r2
 800102e:	ed83 7b00 	vstr	d7, [r3]
					Buffer[head] = '\r';
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UART_RxCpltCallback+0x158>)
 800103c:	210d      	movs	r1, #13
 800103e:	5499      	strb	r1, [r3, r2]
					head +=1;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	e024      	b.n	800109a <HAL_UART_RxCpltCallback+0x132>
				else if(rx_data == '\n')
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_RxCpltCallback+0x140>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b0a      	cmp	r3, #10
 8001056:	d114      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x11a>
					Buffer[head] = rx_data;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_UART_RxCpltCallback+0x140>)
 8001062:	7819      	ldrb	r1, [r3, #0]
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_UART_RxCpltCallback+0x158>)
 8001066:	5499      	strb	r1, [r3, r2]
					head = 0;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
					data_cnt =0;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_UART_RxCpltCallback+0x15c>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
					gotPacket = false;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_UART_RxCpltCallback+0x150>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
					heads= 0;
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_UART_RxCpltCallback+0x148>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
}
 8001080:	e00b      	b.n	800109a <HAL_UART_RxCpltCallback+0x132>
					Buffer[head++] = rx_data;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	b2d1      	uxtb	r1, r2
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_UART_RxCpltCallback+0x154>)
 800108e:	7011      	strb	r1, [r2, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_UART_RxCpltCallback+0x140>)
 8001094:	7819      	ldrb	r1, [r3, #0]
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_UART_RxCpltCallback+0x158>)
 8001098:	5499      	strb	r1, [r3, r2]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40011000 	.word	0x40011000
 80010a8:	20000583 	.word	0x20000583
 80010ac:	200002ac 	.word	0x200002ac
 80010b0:	20000581 	.word	0x20000581
 80010b4:	2000051c 	.word	0x2000051c
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000580 	.word	0x20000580
 80010c0:	200004b8 	.word	0x200004b8
 80010c4:	20000582 	.word	0x20000582
 80010c8:	20000440 	.word	0x20000440

080010cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	double Sensor1;
	double Sensor2;
	uint8_t star[2]={0X2A,};
 80010d4:	232a      	movs	r3, #42	; 0x2a
 80010d6:	813b      	strh	r3, [r7, #8]

	if(htim->Instance == TIM1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2d      	ldr	r2, [pc, #180]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d153      	bne.n	800118a <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		USART_CNT++;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010ee:	701a      	strb	r2, [r3, #0]

		//HAL_DMA_Start(&hdma_tim1_up, (uint32_t)Bufferss, (uint32_t)&USART2->DR, sizeof(Bufferss));
		if(USART_CNT == 80)
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b50      	cmp	r3, #80	; 0x50
 80010f8:	d108      	bne.n	800110c <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			HAL_UART_Transmit(&huart1, star, 1, 1000);
 80010fa:	f107 0108 	add.w	r1, r7, #8
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	2201      	movs	r2, #1
 8001104:	4825      	ldr	r0, [pc, #148]	; (800119c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001106:	f003 fb3a 	bl	800477e <HAL_UART_Transmit>
				Buffers[temp_size] = 0X00;
			}
		}

	}
}
 800110a:	e03e      	b.n	800118a <HAL_TIM_PeriodElapsedCallback+0xbe>
		else if(USART_CNT == 100)
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d120      	bne.n	8001158 <HAL_TIM_PeriodElapsedCallback+0x8c>
			USART_CNT = 0;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, Buffers, sizeof(Buffers));
 800111c:	2264      	movs	r2, #100	; 0x64
 800111e:	4920      	ldr	r1, [pc, #128]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001120:	4820      	ldr	r0, [pc, #128]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001122:	f003 fbef 	bl	8004904 <HAL_UART_Transmit_DMA>
			if(gotPacket == false)
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d029      	beq.n	800118a <HAL_TIM_PeriodElapsedCallback+0xbe>
				sprintf(str, "%d \r\n", k);
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	491c      	ldr	r1, [pc, #112]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800113e:	481d      	ldr	r0, [pc, #116]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001140:	f005 fac4 	bl	80066cc <siprintf>
				gotPacket = true;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
				k++;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001154:	701a      	strb	r2, [r3, #0]
}
 8001156:	e018      	b.n	800118a <HAL_TIM_PeriodElapsedCallback+0xbe>
		else if(USART_CNT == 120)
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b78      	cmp	r3, #120	; 0x78
 8001160:	d113      	bne.n	800118a <HAL_TIM_PeriodElapsedCallback+0xbe>
			USART_CNT = 0;
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
			Rx_indx=0;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
			for(int temp_size=0; temp_size<100;temp_size++) // 배열 초기화
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e007      	b.n	8001184 <HAL_TIM_PeriodElapsedCallback+0xb8>
				Buffers[temp_size] = 0X00;
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
			for(int temp_size=0; temp_size<100;temp_size++) // 배열 초기화
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3301      	adds	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b63      	cmp	r3, #99	; 0x63
 8001188:	ddf4      	ble.n	8001174 <HAL_TIM_PeriodElapsedCallback+0xa8>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40010000 	.word	0x40010000
 8001198:	20000438 	.word	0x20000438
 800119c:	200002ac 	.word	0x200002ac
 80011a0:	2000051c 	.word	0x2000051c
 80011a4:	200002f0 	.word	0x200002f0
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000584 	.word	0x20000584
 80011b0:	0800a1d0 	.word	0x0800a1d0
 80011b4:	20000588 	.word	0x20000588
 80011b8:	2000043c 	.word	0x2000043c

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c0:	f000 fdbc 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c4:	f000 f858 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c8:	f000 fa1c 	bl	8001604 <MX_GPIO_Init>
  MX_DMA_Init();
 80011cc:	f000 f9dc 	bl	8001588 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011d0:	f000 f986 	bl	80014e0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80011d4:	f000 f9ae 	bl	8001534 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80011d8:	f000 f8ba 	bl	8001350 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011dc:	f000 f956 	bl	800148c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80011e0:	4820      	ldr	r0, [pc, #128]	; (8001264 <main+0xa8>)
 80011e2:	f002 f9b7 	bl	8003554 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80011e6:	2100      	movs	r1, #0
 80011e8:	481e      	ldr	r0, [pc, #120]	; (8001264 <main+0xa8>)
 80011ea:	f002 fb6d 	bl	80038c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 80011ee:	210c      	movs	r1, #12
 80011f0:	481c      	ldr	r0, [pc, #112]	; (8001264 <main+0xa8>)
 80011f2:	f002 fa6b 	bl	80036cc <HAL_TIM_PWM_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <main+0xac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <main+0xac>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0220 	orr.w	r2, r2, #32
 8001204:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <main+0xac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <main+0xac>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001214:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <main+0xb0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <main+0xb0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_TC);
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <main+0xb0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <main+0xb0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001234:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <main+0xb4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <main+0xb4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0220 	orr.w	r2, r2, #32
 8001244:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <main+0xb4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <main+0xb4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001254:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_IT (&huart1, &Rx_data, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	4906      	ldr	r1, [pc, #24]	; (8001274 <main+0xb8>)
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <main+0xac>)
 800125c:	f003 fb21 	bl	80048a2 <HAL_UART_Receive_IT>
  //HAL_DMA_Start(&hdma_tim1_up, (uint32_t)Bufferss, (uint32_t)&USART2->DR, sizeof(Bufferss));
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001260:	e7fe      	b.n	8001260 <main+0xa4>
 8001262:	bf00      	nop
 8001264:	20000204 	.word	0x20000204
 8001268:	200002ac 	.word	0x200002ac
 800126c:	20000334 	.word	0x20000334
 8001270:	200002f0 	.word	0x200002f0
 8001274:	20000439 	.word	0x20000439

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fdae 	bl	8005de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <SystemClock_Config+0xd0>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <SystemClock_Config+0xd0>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <SystemClock_Config+0xd0>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <SystemClock_Config+0xd4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <SystemClock_Config+0xd4>)
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ec:	2310      	movs	r3, #16
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012fa:	2307      	movs	r3, #7
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fc3e 	bl	8002b84 <HAL_RCC_OscConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800130e:	f000 f9e7 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2302      	movs	r3, #2
 8001318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2102      	movs	r1, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fea0 	bl	8003074 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800133a:	f000 f9d1 	bl	80016e0 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	; 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f004 fd2d 	bl	8005de8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138e:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <MX_TIM1_Init+0x134>)
 8001390:	4a3d      	ldr	r2, [pc, #244]	; (8001488 <MX_TIM1_Init+0x138>)
 8001392:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400 - 1;
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <MX_TIM1_Init+0x134>)
 8001396:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800139a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <MX_TIM1_Init+0x134>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100 - 1;
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <MX_TIM1_Init+0x134>)
 80013a4:	2263      	movs	r2, #99	; 0x63
 80013a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <MX_TIM1_Init+0x134>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ae:	4b35      	ldr	r3, [pc, #212]	; (8001484 <MX_TIM1_Init+0x134>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MX_TIM1_Init+0x134>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ba:	4832      	ldr	r0, [pc, #200]	; (8001484 <MX_TIM1_Init+0x134>)
 80013bc:	f002 f87a 	bl	80034b4 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013c6:	f000 f98b 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d4:	4619      	mov	r1, r3
 80013d6:	482b      	ldr	r0, [pc, #172]	; (8001484 <MX_TIM1_Init+0x134>)
 80013d8:	f002 fcf4 	bl	8003dc4 <HAL_TIM_ConfigClockSource>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013e2:	f000 f97d 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80013e6:	4827      	ldr	r0, [pc, #156]	; (8001484 <MX_TIM1_Init+0x134>)
 80013e8:	f002 f916 	bl	8003618 <HAL_TIM_OC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013f2:	f000 f975 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001402:	4619      	mov	r1, r3
 8001404:	481f      	ldr	r0, [pc, #124]	; (8001484 <MX_TIM1_Init+0x134>)
 8001406:	f003 f899 	bl	800453c <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001410:	f000 f966 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	4812      	ldr	r0, [pc, #72]	; (8001484 <MX_TIM1_Init+0x134>)
 800143a:	f002 fc67 	bl	8003d0c <HAL_TIM_OC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001444:	f000 f94c 	bl	80016e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800145c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001460:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_TIM1_Init+0x134>)
 800146c:	f003 f8d4 	bl	8004618 <HAL_TIMEx_ConfigBreakDeadTime>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001476:	f000 f933 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3758      	adds	r7, #88	; 0x58
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000204 	.word	0x20000204
 8001488:	40010000 	.word	0x40010000

0800148c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART1_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014c4:	f003 f90e 	bl	80046e4 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f907 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200002ac 	.word	0x200002ac
 80014dc:	40011000 	.word	0x40011000

080014e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_USART2_UART_Init+0x50>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART2_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART2_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART2_UART_Init+0x4c>)
 8001518:	f003 f8e4 	bl	80046e4 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001522:	f000 f8dd 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002f0 	.word	0x200002f0
 8001530:	40004400 	.word	0x40004400

08001534 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_USART6_UART_Init+0x50>)
 800153c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART6_UART_Init+0x4c>)
 800156c:	f003 f8ba 	bl	80046e4 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001576:	f000 f8b3 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000334 	.word	0x20000334
 8001584:	40011400 	.word	0x40011400

08001588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_DMA_Init+0x78>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <MX_DMA_Init+0x78>)
 8001598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_DMA_Init+0x78>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_DMA_Init+0x78>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <MX_DMA_Init+0x78>)
 80015b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_DMA_Init+0x78>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 1);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2100      	movs	r1, #0
 80015ca:	2011      	movs	r0, #17
 80015cc:	f000 fd03 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015d0:	2011      	movs	r0, #17
 80015d2:	f000 fd1c 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 1);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2100      	movs	r1, #0
 80015da:	203a      	movs	r0, #58	; 0x3a
 80015dc:	f000 fcfb 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015e0:	203a      	movs	r0, #58	; 0x3a
 80015e2:	f000 fd14 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2044      	movs	r0, #68	; 0x44
 80015ec:	f000 fcf3 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80015f0:	2044      	movs	r0, #68	; 0x44
 80015f2:	f000 fd0c 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <MX_GPIO_Init+0xd0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <MX_GPIO_Init+0xd0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <MX_GPIO_Init+0xd0>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_GPIO_Init+0xd0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2120      	movs	r1, #32
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <MX_GPIO_Init+0xd4>)
 8001690:	f001 fa5e 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_GPIO_Init+0xd8>)
 80016ac:	f001 f8cc 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016b0:	2320      	movs	r3, #32
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4804      	ldr	r0, [pc, #16]	; (80016d8 <MX_GPIO_Init+0xd4>)
 80016c8:	f001 f8be 	bl	8002848 <HAL_GPIO_Init>

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020800 	.word	0x40020800

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_MspInit+0x4c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_MspInit+0x4c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800172a:	2007      	movs	r0, #7
 800172c:	f000 fc48 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a26      	ldr	r2, [pc, #152]	; (80017e4 <HAL_TIM_Base_MspInit+0xa8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d145      	bne.n	80017da <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_TIM_Base_MspInit+0xac>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a24      	ldr	r2, [pc, #144]	; (80017e8 <HAL_TIM_Base_MspInit+0xac>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_TIM_Base_MspInit+0xac>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_TIM_Base_MspInit+0xb4>)
 800176e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 8001772:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001776:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 8001786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 800178e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001792:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 8001796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80017ae:	480f      	ldr	r0, [pc, #60]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 80017b0:	f000 fc48 	bl	8002044 <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80017ba:	f7ff ff91 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 80017c2:	621a      	str	r2, [r3, #32]
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_TIM_Base_MspInit+0xb0>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 6);
 80017ca:	2206      	movs	r2, #6
 80017cc:	2100      	movs	r1, #0
 80017ce:	201b      	movs	r0, #27
 80017d0:	f000 fc01 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017d4:	201b      	movs	r0, #27
 80017d6:	f000 fc1a 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40023800 	.word	0x40023800
 80017ec:	2000024c 	.word	0x2000024c
 80017f0:	40026488 	.word	0x40026488

080017f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	; 0x38
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a87      	ldr	r2, [pc, #540]	; (8001a30 <HAL_UART_MspInit+0x23c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d165      	bne.n	80018e2 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	4b86      	ldr	r3, [pc, #536]	; (8001a34 <HAL_UART_MspInit+0x240>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a85      	ldr	r2, [pc, #532]	; (8001a34 <HAL_UART_MspInit+0x240>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b83      	ldr	r3, [pc, #524]	; (8001a34 <HAL_UART_MspInit+0x240>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <HAL_UART_MspInit+0x240>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a7e      	ldr	r2, [pc, #504]	; (8001a34 <HAL_UART_MspInit+0x240>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b7c      	ldr	r3, [pc, #496]	; (8001a34 <HAL_UART_MspInit+0x240>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800184e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001860:	2307      	movs	r3, #7
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	4873      	ldr	r0, [pc, #460]	; (8001a38 <HAL_UART_MspInit+0x244>)
 800186c:	f000 ffec 	bl	8002848 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001870:	4b72      	ldr	r3, [pc, #456]	; (8001a3c <HAL_UART_MspInit+0x248>)
 8001872:	4a73      	ldr	r2, [pc, #460]	; (8001a40 <HAL_UART_MspInit+0x24c>)
 8001874:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001876:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <HAL_UART_MspInit+0x248>)
 8001878:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800187c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187e:	4b6f      	ldr	r3, [pc, #444]	; (8001a3c <HAL_UART_MspInit+0x248>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001884:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <HAL_UART_MspInit+0x248>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800188a:	4b6c      	ldr	r3, [pc, #432]	; (8001a3c <HAL_UART_MspInit+0x248>)
 800188c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001890:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001892:	4b6a      	ldr	r3, [pc, #424]	; (8001a3c <HAL_UART_MspInit+0x248>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001898:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <HAL_UART_MspInit+0x248>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800189e:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <HAL_UART_MspInit+0x248>)
 80018a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018a6:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <HAL_UART_MspInit+0x248>)
 80018a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ae:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <HAL_UART_MspInit+0x248>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018b4:	4861      	ldr	r0, [pc, #388]	; (8001a3c <HAL_UART_MspInit+0x248>)
 80018b6:	f000 fbc5 	bl	8002044 <HAL_DMA_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80018c0:	f7ff ff0e 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a5d      	ldr	r2, [pc, #372]	; (8001a3c <HAL_UART_MspInit+0x248>)
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
 80018ca:	4a5c      	ldr	r2, [pc, #368]	; (8001a3c <HAL_UART_MspInit+0x248>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2025      	movs	r0, #37	; 0x25
 80018d6:	f000 fb7e 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018da:	2025      	movs	r0, #37	; 0x25
 80018dc:	f000 fb97 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018e0:	e0a1      	b.n	8001a26 <HAL_UART_MspInit+0x232>
  else if(huart->Instance==USART2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a57      	ldr	r2, [pc, #348]	; (8001a44 <HAL_UART_MspInit+0x250>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d163      	bne.n	80019b4 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80018f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <HAL_UART_MspInit+0x240>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_UART_MspInit+0x240>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <HAL_UART_MspInit+0x240>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001924:	230c      	movs	r3, #12
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001934:	2307      	movs	r3, #7
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	483e      	ldr	r0, [pc, #248]	; (8001a38 <HAL_UART_MspInit+0x244>)
 8001940:	f000 ff82 	bl	8002848 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001944:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <HAL_UART_MspInit+0x254>)
 8001946:	4a41      	ldr	r2, [pc, #260]	; (8001a4c <HAL_UART_MspInit+0x258>)
 8001948:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_UART_MspInit+0x254>)
 800194c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001950:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_UART_MspInit+0x254>)
 8001954:	2240      	movs	r2, #64	; 0x40
 8001956:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001958:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_UART_MspInit+0x254>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_UART_MspInit+0x254>)
 8001960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001964:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_UART_MspInit+0x254>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_UART_MspInit+0x254>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_UART_MspInit+0x254>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_UART_MspInit+0x254>)
 800197a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800197e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_UART_MspInit+0x254>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001986:	4830      	ldr	r0, [pc, #192]	; (8001a48 <HAL_UART_MspInit+0x254>)
 8001988:	f000 fb5c 	bl	8002044 <HAL_DMA_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8001992:	f7ff fea5 	bl	80016e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <HAL_UART_MspInit+0x254>)
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
 800199c:	4a2a      	ldr	r2, [pc, #168]	; (8001a48 <HAL_UART_MspInit+0x254>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2100      	movs	r1, #0
 80019a6:	2026      	movs	r0, #38	; 0x26
 80019a8:	f000 fb15 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ac:	2026      	movs	r0, #38	; 0x26
 80019ae:	f000 fb2e 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 80019b2:	e038      	b.n	8001a26 <HAL_UART_MspInit+0x232>
  else if(huart->Instance==USART6)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <HAL_UART_MspInit+0x25c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d133      	bne.n	8001a26 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_UART_MspInit+0x240>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f6:	23c0      	movs	r3, #192	; 0xc0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a06:	2308      	movs	r3, #8
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4810      	ldr	r0, [pc, #64]	; (8001a54 <HAL_UART_MspInit+0x260>)
 8001a12:	f000 ff19 	bl	8002848 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2047      	movs	r0, #71	; 0x47
 8001a1c:	f000 fadb 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a20:	2047      	movs	r0, #71	; 0x47
 8001a22:	f000 faf4 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	20000378 	.word	0x20000378
 8001a40:	40026440 	.word	0x40026440
 8001a44:	40004400 	.word	0x40004400
 8001a48:	200003d8 	.word	0x200003d8
 8001a4c:	400260a0 	.word	0x400260a0
 8001a50:	40011400 	.word	0x40011400
 8001a54:	40020800 	.word	0x40020800

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f99c 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <DMA1_Stream6_IRQHandler+0x10>)
 8001ab2:	f000 fc5f 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200003d8 	.word	0x200003d8

08001ac0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <TIM1_CC_IRQHandler+0x10>)
 8001ac6:	f002 f819 	bl	8003afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000204 	.word	0x20000204

08001ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <USART1_IRQHandler+0x10>)
 8001ada:	f002 ffc1 	bl	8004a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002ac 	.word	0x200002ac

08001ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <USART2_IRQHandler+0x10>)
 8001aee:	f002 ffb7 	bl	8004a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200002f0 	.word	0x200002f0

08001afc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <DMA2_Stream2_IRQHandler+0x10>)
 8001b02:	f000 fc37 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000378 	.word	0x20000378

08001b10 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <DMA2_Stream5_IRQHandler+0x10>)
 8001b16:	f000 fc2d 	bl	8002374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000024c 	.word	0x2000024c

08001b24 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <USART6_IRQHandler+0x10>)
 8001b2a:	f002 ff99 	bl	8004a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000334 	.word	0x20000334

08001b38 <_getpid>:
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_kill>:
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	f004 f91f 	bl	8005d94 <__errno>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2216      	movs	r2, #22
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_exit>:
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffe7 	bl	8001b48 <_kill>
 8001b7a:	e7fe      	b.n	8001b7a <_exit+0x12>

08001b7c <_read>:
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_write>:
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e009      	b.n	8001bdc <_write+0x26>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f3af 8000 	nop.w
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf1      	blt.n	8001bc8 <_write+0x12>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_close>:
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_lseek>:
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
 8001c88:	f004 f884 	bl	8005d94 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20018000 	.word	0x20018000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000594 	.word	0x20000594
 8001cc0:	200005b0 	.word	0x200005b0

08001cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <SystemInit+0x20>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <SystemInit+0x20>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <Reset_Handler>:
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d20 <LoopFillZerobss+0x12>
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <LoopFillZerobss+0x16>)
 8001cee:	490e      	ldr	r1, [pc, #56]	; (8001d28 <LoopFillZerobss+0x1a>)
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <LoopFillZerobss+0x1e>)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:
 8001cf6:	58d4      	ldr	r4, [r2, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:
 8001cfc:	18c4      	adds	r4, r0, r3
 8001cfe:	428c      	cmp	r4, r1
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
 8001d02:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <LoopFillZerobss+0x22>)
 8001d04:	4c0b      	ldr	r4, [pc, #44]	; (8001d34 <LoopFillZerobss+0x26>)
 8001d06:	2300      	movs	r3, #0
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:
 8001d0e:	42a2      	cmp	r2, r4
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>
 8001d12:	f7ff ffd7 	bl	8001cc4 <SystemInit>
 8001d16:	f004 f843 	bl	8005da0 <__libc_init_array>
 8001d1a:	f7ff fa4f 	bl	80011bc <main>
 8001d1e:	4770      	bx	lr
 8001d20:	20018000 	.word	0x20018000
 8001d24:	20000000 	.word	0x20000000
 8001d28:	200001e4 	.word	0x200001e4
 8001d2c:	0800a6a4 	.word	0x0800a6a4
 8001d30:	200001e8 	.word	0x200001e8
 8001d34:	200005ac 	.word	0x200005ac

08001d38 <ADC_IRQHandler>:
 8001d38:	e7fe      	b.n	8001d38 <ADC_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <HAL_Init+0x40>)
 8001d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_Init+0x40>)
 8001d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_Init+0x40>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f92b 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f808 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fcbc 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023c00 	.word	0x40023c00

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x54>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x58>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f943 	bl	800202a <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dbc:	f000 f90b 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <HAL_InitTick+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000004 	.word	0x20000004
 8001dd8:	2000000c 	.word	0x2000000c
 8001ddc:	20000008 	.word	0x20000008

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000000c 	.word	0x2000000c
 8001e04:	20000598 	.word	0x20000598

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000598 	.word	0x20000598

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff feda 	bl	8001e08 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e099      	b.n	8002194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002080:	e00f      	b.n	80020a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002082:	f7ff fec1 	bl	8001e08 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b05      	cmp	r3, #5
 800208e:	d908      	bls.n	80020a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e078      	b.n	8002194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e8      	bne.n	8002082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_DMA_Init+0x158>)
 80020bc:	4013      	ands	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d107      	bne.n	800210c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4313      	orrs	r3, r2
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0307 	bic.w	r3, r3, #7
 8002122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2b04      	cmp	r3, #4
 8002134:	d117      	bne.n	8002166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fb01 	bl	8002750 <DMA_CheckFifoParam>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002162:	2301      	movs	r3, #1
 8002164:	e016      	b.n	8002194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fab8 	bl	80026e4 <DMA_CalcBaseAndBitshift>
 8002174:	4603      	mov	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	223f      	movs	r2, #63	; 0x3f
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	f010803f 	.word	0xf010803f

080021a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_DMA_Start_IT+0x26>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e040      	b.n	8002248 <HAL_DMA_Start_IT+0xa8>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d12f      	bne.n	800223a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fa4a 	bl	8002688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	223f      	movs	r2, #63	; 0x3f
 80021fa:	409a      	lsls	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0216 	orr.w	r2, r2, #22
 800220e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0208 	orr.w	r2, r2, #8
 8002226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e005      	b.n	8002246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800225e:	f7ff fdd3 	bl	8001e08 <HAL_GetTick>
 8002262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d008      	beq.n	8002282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e052      	b.n	8002328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0216 	bic.w	r2, r2, #22
 8002290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <HAL_DMA_Abort+0x62>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0208 	bic.w	r2, r2, #8
 80022c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d2:	e013      	b.n	80022fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d4:	f7ff fd98 	bl	8001e08 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d90c      	bls.n	80022fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2203      	movs	r2, #3
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e015      	b.n	8002328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e4      	bne.n	80022d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	223f      	movs	r2, #63	; 0x3f
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d004      	beq.n	800234e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00c      	b.n	8002368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2205      	movs	r2, #5
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002380:	4b8e      	ldr	r3, [pc, #568]	; (80025bc <HAL_DMA_IRQHandler+0x248>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a8e      	ldr	r2, [pc, #568]	; (80025c0 <HAL_DMA_IRQHandler+0x24c>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0a9b      	lsrs	r3, r3, #10
 800238c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239e:	2208      	movs	r2, #8
 80023a0:	409a      	lsls	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01a      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0204 	bic.w	r2, r2, #4
 80023c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	2208      	movs	r2, #8
 80023ce:	409a      	lsls	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	2201      	movs	r2, #1
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d012      	beq.n	8002416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	2201      	movs	r2, #1
 8002404:	409a      	lsls	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f043 0202 	orr.w	r2, r3, #2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2204      	movs	r2, #4
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d012      	beq.n	800244c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	2204      	movs	r2, #4
 800243a:	409a      	lsls	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2210      	movs	r2, #16
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d043      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d03c      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	2210      	movs	r2, #16
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d018      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d024      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
 80024a2:	e01f      	b.n	80024e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01b      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
 80024b4:	e016      	b.n	80024e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0208 	bic.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2220      	movs	r2, #32
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 808f 	beq.w	8002614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8087 	beq.w	8002614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	2220      	movs	r2, #32
 800250c:	409a      	lsls	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b05      	cmp	r3, #5
 800251c:	d136      	bne.n	800258c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0216 	bic.w	r2, r2, #22
 800252c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800253c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <HAL_DMA_IRQHandler+0x1da>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0208 	bic.w	r2, r2, #8
 800255c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	223f      	movs	r2, #63	; 0x3f
 8002564:	409a      	lsls	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257e:	2b00      	cmp	r3, #0
 8002580:	d07e      	beq.n	8002680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
        }
        return;
 800258a:	e079      	b.n	8002680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01d      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d031      	beq.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e02c      	b.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
 80025ba:	bf00      	nop
 80025bc:	20000004 	.word	0x20000004
 80025c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d023      	beq.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e01e      	b.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10f      	bne.n	8002604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0210 	bic.w	r2, r2, #16
 80025f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	2b00      	cmp	r3, #0
 800261a:	d032      	beq.n	8002682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d022      	beq.n	800266e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2205      	movs	r2, #5
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	429a      	cmp	r2, r3
 800264a:	d307      	bcc.n	800265c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f2      	bne.n	8002640 <HAL_DMA_IRQHandler+0x2cc>
 800265a:	e000      	b.n	800265e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800265c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
 800267e:	e000      	b.n	8002682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002680:	bf00      	nop
    }
  }
}
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	d108      	bne.n	80026c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026c6:	e007      	b.n	80026d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3b10      	subs	r3, #16
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <DMA_CalcBaseAndBitshift+0x64>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026fe:	4a13      	ldr	r2, [pc, #76]	; (800274c <DMA_CalcBaseAndBitshift+0x68>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d909      	bls.n	8002726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	1d1a      	adds	r2, r3, #4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	659a      	str	r2, [r3, #88]	; 0x58
 8002724:	e007      	b.n	8002736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	aaaaaaab 	.word	0xaaaaaaab
 800274c:	0800a1f0 	.word	0x0800a1f0

08002750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11f      	bne.n	80027aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d856      	bhi.n	800281e <DMA_CheckFifoParam+0xce>
 8002770:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <DMA_CheckFifoParam+0x28>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	08002789 	.word	0x08002789
 800277c:	0800279b 	.word	0x0800279b
 8002780:	08002789 	.word	0x08002789
 8002784:	0800281f 	.word	0x0800281f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d046      	beq.n	8002822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e043      	b.n	8002822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027a2:	d140      	bne.n	8002826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a8:	e03d      	b.n	8002826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b2:	d121      	bne.n	80027f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d837      	bhi.n	800282a <DMA_CheckFifoParam+0xda>
 80027ba:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <DMA_CheckFifoParam+0x70>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027d7 	.word	0x080027d7
 80027c8:	080027d1 	.word	0x080027d1
 80027cc:	080027e9 	.word	0x080027e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e030      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d025      	beq.n	800282e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e022      	b.n	800282e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027f0:	d11f      	bne.n	8002832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027f6:	e01c      	b.n	8002832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d903      	bls.n	8002806 <DMA_CheckFifoParam+0xb6>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d003      	beq.n	800280c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002804:	e018      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      break;
 800280a:	e015      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00e      	beq.n	8002836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e00b      	b.n	8002836 <DMA_CheckFifoParam+0xe6>
      break;
 800281e:	bf00      	nop
 8002820:	e00a      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
 8002824:	e008      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
 8002828:	e006      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 800282a:	bf00      	nop
 800282c:	e004      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;   
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002836:	bf00      	nop
    }
  } 
  
  return status; 
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop

08002848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e159      	b.n	8002b18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002864:	2201      	movs	r2, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 8148 	bne.w	8002b12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d005      	beq.n	800289a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	2b02      	cmp	r3, #2
 8002898:	d130      	bne.n	80028fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0201 	and.w	r2, r3, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b03      	cmp	r3, #3
 8002906:	d017      	beq.n	8002938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d123      	bne.n	800298c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0203 	and.w	r2, r3, #3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a2 	beq.w	8002b12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <HAL_GPIO_Init+0x2e8>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a56      	ldr	r2, [pc, #344]	; (8002b30 <HAL_GPIO_Init+0x2e8>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <HAL_GPIO_Init+0x2e8>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ea:	4a52      	ldr	r2, [pc, #328]	; (8002b34 <HAL_GPIO_Init+0x2ec>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a49      	ldr	r2, [pc, #292]	; (8002b38 <HAL_GPIO_Init+0x2f0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d019      	beq.n	8002a4a <HAL_GPIO_Init+0x202>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a48      	ldr	r2, [pc, #288]	; (8002b3c <HAL_GPIO_Init+0x2f4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_GPIO_Init+0x1fe>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a47      	ldr	r2, [pc, #284]	; (8002b40 <HAL_GPIO_Init+0x2f8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <HAL_GPIO_Init+0x1fa>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a46      	ldr	r2, [pc, #280]	; (8002b44 <HAL_GPIO_Init+0x2fc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <HAL_GPIO_Init+0x1f6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a45      	ldr	r2, [pc, #276]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_GPIO_Init+0x1f2>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e008      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e004      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f002 0203 	and.w	r2, r2, #3
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	4093      	lsls	r3, r2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5c:	4935      	ldr	r1, [pc, #212]	; (8002b34 <HAL_GPIO_Init+0x2ec>)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8e:	4a2f      	ldr	r2, [pc, #188]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab8:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	f67f aea2 	bls.w	8002864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3724      	adds	r7, #36	; 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40013800 	.word	0x40013800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40020800 	.word	0x40020800
 8002b44:	40020c00 	.word	0x40020c00
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b60:	787b      	ldrb	r3, [r7, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b6c:	e003      	b.n	8002b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e267      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d075      	beq.n	8002c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d00c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bae:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d112      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bba:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	4b7e      	ldr	r3, [pc, #504]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05b      	beq.n	8002c8c <HAL_RCC_OscConfig+0x108>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d157      	bne.n	8002c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e242      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x74>
 8002bea:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a75      	ldr	r2, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e01d      	b.n	8002c34 <HAL_RCC_OscConfig+0xb0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b70      	ldr	r3, [pc, #448]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6f      	ldr	r2, [pc, #444]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b6d      	ldr	r3, [pc, #436]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6c      	ldr	r2, [pc, #432]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0xb0>
 8002c1c:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a68      	ldr	r2, [pc, #416]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f8e4 	bl	8001e08 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7ff f8e0 	bl	8001e08 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e207      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0xc0>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff f8d0 	bl	8001e08 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7ff f8cc 	bl	8001e08 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1f3      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0xe8>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d063      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d11c      	bne.n	8002cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d116      	bne.n	8002cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x152>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e1c7      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4937      	ldr	r1, [pc, #220]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	e03a      	b.n	8002d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf4:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <HAL_RCC_OscConfig+0x244>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7ff f885 	bl	8001e08 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d02:	f7ff f881 	bl	8001e08 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1a8      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4925      	ldr	r1, [pc, #148]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
 8002d34:	e015      	b.n	8002d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCC_OscConfig+0x244>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7ff f864 	bl	8001e08 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d44:	f7ff f860 	bl	8001e08 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e187      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d036      	beq.n	8002ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_RCC_OscConfig+0x248>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7ff f844 	bl	8001e08 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d84:	f7ff f840 	bl	8001e08 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e167      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x240>)
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x200>
 8002da2:	e01b      	b.n	8002ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_OscConfig+0x248>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7ff f82d 	bl	8001e08 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	e00e      	b.n	8002dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db2:	f7ff f829 	bl	8001e08 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d907      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e150      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	42470000 	.word	0x42470000
 8002dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ea      	bne.n	8002db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8097 	beq.w	8002f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dee:	4b81      	ldr	r3, [pc, #516]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	4b7d      	ldr	r3, [pc, #500]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a7c      	ldr	r2, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e16:	2301      	movs	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b77      	ldr	r3, [pc, #476]	; (8002ff8 <HAL_RCC_OscConfig+0x474>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4b74      	ldr	r3, [pc, #464]	; (8002ff8 <HAL_RCC_OscConfig+0x474>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a73      	ldr	r2, [pc, #460]	; (8002ff8 <HAL_RCC_OscConfig+0x474>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e32:	f7fe ffe9 	bl	8001e08 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7fe ffe5 	bl	8001e08 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e10c      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x474>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x2ea>
 8002e60:	4b64      	ldr	r3, [pc, #400]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a63      	ldr	r2, [pc, #396]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e01c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x324>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x30c>
 8002e76:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a5e      	ldr	r2, [pc, #376]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	4b5c      	ldr	r3, [pc, #368]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a5b      	ldr	r2, [pc, #364]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x324>
 8002e90:	4b58      	ldr	r3, [pc, #352]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a57      	ldr	r2, [pc, #348]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a54      	ldr	r2, [pc, #336]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	f023 0304 	bic.w	r3, r3, #4
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe ffaa 	bl	8001e08 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe ffa6 	bl	8001e08 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0cb      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ee      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x334>
 8002eda:	e014      	b.n	8002f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002edc:	f7fe ff94 	bl	8001e08 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe ff90 	bl	8001e08 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0b5      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efa:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1ee      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0c:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	4a38      	ldr	r2, [pc, #224]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80a1 	beq.w	8003064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d05c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d141      	bne.n	8002fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCC_OscConfig+0x478>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe ff64 	bl	8001e08 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe ff60 	bl	8001e08 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e087      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	019b      	lsls	r3, r3, #6
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	491b      	ldr	r1, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x478>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe ff39 	bl	8001e08 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe ff35 	bl	8001e08 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e05c      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x416>
 8002fb8:	e054      	b.n	8003064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_RCC_OscConfig+0x478>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe ff22 	bl	8001e08 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe ff1e 	bl	8001e08 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e045      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x444>
 8002fe6:	e03d      	b.n	8003064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e038      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x4ec>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d028      	beq.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d121      	bne.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d11a      	bne.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003038:	4293      	cmp	r3, r2
 800303a:	d111      	bne.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d107      	bne.n	8003060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800

08003074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0cc      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b68      	ldr	r3, [pc, #416]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d90c      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b65      	ldr	r3, [pc, #404]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0b8      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b50      	ldr	r3, [pc, #320]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	494d      	ldr	r1, [pc, #308]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d044      	beq.n	8003194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d119      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e07f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d003      	beq.n	8003132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312e:	2b03      	cmp	r3, #3
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e06f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e067      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4934      	ldr	r1, [pc, #208]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003164:	f7fe fe50 	bl	8001e08 <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fe fe4c 	bl	8001e08 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e04f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d20c      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e032      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4916      	ldr	r1, [pc, #88]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fa:	f000 f821 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031fe:	4602      	mov	r2, r0
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	490a      	ldr	r1, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	5ccb      	ldrb	r3, [r1, r3]
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fdb0 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023c00 	.word	0x40023c00
 8003230:	40023800 	.word	0x40023800
 8003234:	0800a1d8 	.word	0x0800a1d8
 8003238:	20000004 	.word	0x20000004
 800323c:	20000008 	.word	0x20000008

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003244:	b094      	sub	sp, #80	; 0x50
 8003246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
 800324c:	2300      	movs	r3, #0
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003250:	2300      	movs	r3, #0
 8003252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003258:	4b79      	ldr	r3, [pc, #484]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d00d      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x40>
 8003264:	2b08      	cmp	r3, #8
 8003266:	f200 80e1 	bhi.w	800342c <HAL_RCC_GetSysClockFreq+0x1ec>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x34>
 800326e:	2b04      	cmp	r3, #4
 8003270:	d003      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x3a>
 8003272:	e0db      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b73      	ldr	r3, [pc, #460]	; (8003444 <HAL_RCC_GetSysClockFreq+0x204>)
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003278:	e0db      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_GetSysClockFreq+0x208>)
 800327c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800327e:	e0d8      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003280:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800328a:	4b6d      	ldr	r3, [pc, #436]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d063      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003296:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	099b      	lsrs	r3, r3, #6
 800329c:	2200      	movs	r2, #0
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a8:	633b      	str	r3, [r7, #48]	; 0x30
 80032aa:	2300      	movs	r3, #0
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
 80032ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032b2:	4622      	mov	r2, r4
 80032b4:	462b      	mov	r3, r5
 80032b6:	f04f 0000 	mov.w	r0, #0
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	0159      	lsls	r1, r3, #5
 80032c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c4:	0150      	lsls	r0, r2, #5
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4621      	mov	r1, r4
 80032cc:	1a51      	subs	r1, r2, r1
 80032ce:	6139      	str	r1, [r7, #16]
 80032d0:	4629      	mov	r1, r5
 80032d2:	eb63 0301 	sbc.w	r3, r3, r1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e4:	4659      	mov	r1, fp
 80032e6:	018b      	lsls	r3, r1, #6
 80032e8:	4651      	mov	r1, sl
 80032ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ee:	4651      	mov	r1, sl
 80032f0:	018a      	lsls	r2, r1, #6
 80032f2:	4651      	mov	r1, sl
 80032f4:	ebb2 0801 	subs.w	r8, r2, r1
 80032f8:	4659      	mov	r1, fp
 80032fa:	eb63 0901 	sbc.w	r9, r3, r1
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800330a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003312:	4690      	mov	r8, r2
 8003314:	4699      	mov	r9, r3
 8003316:	4623      	mov	r3, r4
 8003318:	eb18 0303 	adds.w	r3, r8, r3
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	462b      	mov	r3, r5
 8003320:	eb49 0303 	adc.w	r3, r9, r3
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003332:	4629      	mov	r1, r5
 8003334:	024b      	lsls	r3, r1, #9
 8003336:	4621      	mov	r1, r4
 8003338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800333c:	4621      	mov	r1, r4
 800333e:	024a      	lsls	r2, r1, #9
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003346:	2200      	movs	r2, #0
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
 800334a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800334c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003350:	f7fd fc52 	bl	8000bf8 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4613      	mov	r3, r2
 800335a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800335c:	e058      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	099b      	lsrs	r3, r3, #6
 8003364:	2200      	movs	r2, #0
 8003366:	4618      	mov	r0, r3
 8003368:	4611      	mov	r1, r2
 800336a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	f04f 0000 	mov.w	r0, #0
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	0159      	lsls	r1, r3, #5
 8003386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800338a:	0150      	lsls	r0, r2, #5
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4641      	mov	r1, r8
 8003392:	ebb2 0a01 	subs.w	sl, r2, r1
 8003396:	4649      	mov	r1, r9
 8003398:	eb63 0b01 	sbc.w	fp, r3, r1
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033b0:	ebb2 040a 	subs.w	r4, r2, sl
 80033b4:	eb63 050b 	sbc.w	r5, r3, fp
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	00eb      	lsls	r3, r5, #3
 80033c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c6:	00e2      	lsls	r2, r4, #3
 80033c8:	4614      	mov	r4, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	4643      	mov	r3, r8
 80033ce:	18e3      	adds	r3, r4, r3
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	464b      	mov	r3, r9
 80033d4:	eb45 0303 	adc.w	r3, r5, r3
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033e6:	4629      	mov	r1, r5
 80033e8:	028b      	lsls	r3, r1, #10
 80033ea:	4621      	mov	r1, r4
 80033ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033f0:	4621      	mov	r1, r4
 80033f2:	028a      	lsls	r2, r1, #10
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fa:	2200      	movs	r2, #0
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	61fa      	str	r2, [r7, #28]
 8003400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003404:	f7fd fbf8 	bl	8000bf8 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4613      	mov	r3, r2
 800340e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_GetSysClockFreq+0x200>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	3301      	adds	r3, #1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetSysClockFreq+0x204>)
 800342e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003434:	4618      	mov	r0, r3
 8003436:	3750      	adds	r7, #80	; 0x50
 8003438:	46bd      	mov	sp, r7
 800343a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	00f42400 	.word	0x00f42400
 8003448:	007a1200 	.word	0x007a1200

0800344c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_GetHCLKFreq+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000004 	.word	0x20000004

08003464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003468:	f7ff fff0 	bl	800344c <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0a9b      	lsrs	r3, r3, #10
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	0800a1e8 	.word	0x0800a1e8

0800348c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003490:	f7ff ffdc 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	0b5b      	lsrs	r3, r3, #13
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	4903      	ldr	r1, [pc, #12]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	0800a1e8 	.word	0x0800a1e8

080034b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e041      	b.n	800354a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe f92e 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f000 fd56 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e044      	b.n	80035f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <HAL_TIM_Base_Start_IT+0xb0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x6c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003596:	d013      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x6c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1a      	ldr	r2, [pc, #104]	; (8003608 <HAL_TIM_Base_Start_IT+0xb4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x6c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a19      	ldr	r2, [pc, #100]	; (800360c <HAL_TIM_Base_Start_IT+0xb8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x6c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a17      	ldr	r2, [pc, #92]	; (8003610 <HAL_TIM_Base_Start_IT+0xbc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x6c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a16      	ldr	r2, [pc, #88]	; (8003614 <HAL_TIM_Base_Start_IT+0xc0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d111      	bne.n	80035e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d010      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	e007      	b.n	80035f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40014000 	.word	0x40014000

08003618 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e041      	b.n	80036ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f839 	bl	80036b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f000 fca4 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <HAL_TIM_PWM_Start_IT+0x28>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e022      	b.n	800373a <HAL_TIM_PWM_Start_IT+0x6e>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d109      	bne.n	800370e <HAL_TIM_PWM_Start_IT+0x42>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	bf14      	ite	ne
 8003706:	2301      	movne	r3, #1
 8003708:	2300      	moveq	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	e015      	b.n	800373a <HAL_TIM_PWM_Start_IT+0x6e>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d109      	bne.n	8003728 <HAL_TIM_PWM_Start_IT+0x5c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e008      	b.n	800373a <HAL_TIM_PWM_Start_IT+0x6e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0b3      	b.n	80038aa <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <HAL_TIM_PWM_Start_IT+0x86>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003750:	e013      	b.n	800377a <HAL_TIM_PWM_Start_IT+0xae>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Start_IT+0x96>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003760:	e00b      	b.n	800377a <HAL_TIM_PWM_Start_IT+0xae>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start_IT+0xa6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003770:	e003      	b.n	800377a <HAL_TIM_PWM_Start_IT+0xae>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b0c      	cmp	r3, #12
 800377e:	d841      	bhi.n	8003804 <HAL_TIM_PWM_Start_IT+0x138>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037bd 	.word	0x080037bd
 800378c:	08003805 	.word	0x08003805
 8003790:	08003805 	.word	0x08003805
 8003794:	08003805 	.word	0x08003805
 8003798:	080037cf 	.word	0x080037cf
 800379c:	08003805 	.word	0x08003805
 80037a0:	08003805 	.word	0x08003805
 80037a4:	08003805 	.word	0x08003805
 80037a8:	080037e1 	.word	0x080037e1
 80037ac:	08003805 	.word	0x08003805
 80037b0:	08003805 	.word	0x08003805
 80037b4:	08003805 	.word	0x08003805
 80037b8:	080037f3 	.word	0x080037f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0202 	orr.w	r2, r2, #2
 80037ca:	60da      	str	r2, [r3, #12]
      break;
 80037cc:	e01d      	b.n	800380a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0204 	orr.w	r2, r2, #4
 80037dc:	60da      	str	r2, [r3, #12]
      break;
 80037de:	e014      	b.n	800380a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	60da      	str	r2, [r3, #12]
      break;
 80037f0:	e00b      	b.n	800380a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0210 	orr.w	r2, r2, #16
 8003800:	60da      	str	r2, [r3, #12]
      break;
 8003802:	e002      	b.n	800380a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      break;
 8003808:	bf00      	nop
  }

  if (status == HAL_OK)
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d14b      	bne.n	80038a8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fe69 	bl	80044f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d107      	bne.n	8003838 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384a:	d013      	beq.n	8003874 <HAL_TIM_PWM_Start_IT+0x1a8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a18      	ldr	r2, [pc, #96]	; (80038bc <HAL_TIM_PWM_Start_IT+0x1f0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIM_PWM_Start_IT+0x1a8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d111      	bne.n	8003898 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d010      	beq.n	80038a8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	e007      	b.n	80038a8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40010000 	.word	0x40010000
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	40014000 	.word	0x40014000

080038c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_IC_Start_IT+0x1e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e013      	b.n	800390e <HAL_TIM_IC_Start_IT+0x46>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_IC_Start_IT+0x2e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	e00b      	b.n	800390e <HAL_TIM_IC_Start_IT+0x46>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_IC_Start_IT+0x3e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e003      	b.n	800390e <HAL_TIM_IC_Start_IT+0x46>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_TIM_IC_Start_IT+0x58>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e013      	b.n	8003948 <HAL_TIM_IC_Start_IT+0x80>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b04      	cmp	r3, #4
 8003924:	d104      	bne.n	8003930 <HAL_TIM_IC_Start_IT+0x68>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e00b      	b.n	8003948 <HAL_TIM_IC_Start_IT+0x80>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d104      	bne.n	8003940 <HAL_TIM_IC_Start_IT+0x78>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e003      	b.n	8003948 <HAL_TIM_IC_Start_IT+0x80>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003946:	b2db      	uxtb	r3, r3
 8003948:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800394a:	7bbb      	ldrb	r3, [r7, #14]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d102      	bne.n	8003956 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003950:	7b7b      	ldrb	r3, [r7, #13]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0c2      	b.n	8003ae0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_TIM_IC_Start_IT+0xa2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003968:	e013      	b.n	8003992 <HAL_TIM_IC_Start_IT+0xca>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d104      	bne.n	800397a <HAL_TIM_IC_Start_IT+0xb2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003978:	e00b      	b.n	8003992 <HAL_TIM_IC_Start_IT+0xca>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d104      	bne.n	800398a <HAL_TIM_IC_Start_IT+0xc2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003988:	e003      	b.n	8003992 <HAL_TIM_IC_Start_IT+0xca>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start_IT+0xda>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	e013      	b.n	80039ca <HAL_TIM_IC_Start_IT+0x102>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_IC_Start_IT+0xea>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b0:	e00b      	b.n	80039ca <HAL_TIM_IC_Start_IT+0x102>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_IC_Start_IT+0xfa>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c0:	e003      	b.n	80039ca <HAL_TIM_IC_Start_IT+0x102>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d841      	bhi.n	8003a54 <HAL_TIM_IC_Start_IT+0x18c>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_TIM_IC_Start_IT+0x110>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003a55 	.word	0x08003a55
 80039e0:	08003a55 	.word	0x08003a55
 80039e4:	08003a55 	.word	0x08003a55
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a55 	.word	0x08003a55
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003a55 	.word	0x08003a55
 80039f8:	08003a31 	.word	0x08003a31
 80039fc:	08003a55 	.word	0x08003a55
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	08003a55 	.word	0x08003a55
 8003a08:	08003a43 	.word	0x08003a43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0202 	orr.w	r2, r2, #2
 8003a1a:	60da      	str	r2, [r3, #12]
      break;
 8003a1c:	e01d      	b.n	8003a5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0204 	orr.w	r2, r2, #4
 8003a2c:	60da      	str	r2, [r3, #12]
      break;
 8003a2e:	e014      	b.n	8003a5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0208 	orr.w	r2, r2, #8
 8003a3e:	60da      	str	r2, [r3, #12]
      break;
 8003a40:	e00b      	b.n	8003a5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0210 	orr.w	r2, r2, #16
 8003a50:	60da      	str	r2, [r3, #12]
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d13e      	bne.n	8003ade <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd41 	bl	80044f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <HAL_TIM_IC_Start_IT+0x220>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_TIM_IC_Start_IT+0x1e2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a80:	d013      	beq.n	8003aaa <HAL_TIM_IC_Start_IT+0x1e2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_TIM_IC_Start_IT+0x224>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_TIM_IC_Start_IT+0x1e2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <HAL_TIM_IC_Start_IT+0x228>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_TIM_IC_Start_IT+0x1e2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <HAL_TIM_IC_Start_IT+0x22c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_TIM_IC_Start_IT+0x1e2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_TIM_IC_Start_IT+0x230>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d111      	bne.n	8003ace <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d010      	beq.n	8003ade <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	e007      	b.n	8003ade <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40010000 	.word	0x40010000
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800
 8003af4:	40000c00 	.word	0x40000c00
 8003af8:	40014000 	.word	0x40014000

08003afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0202 	mvn.w	r2, #2
 8003b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa11 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa03 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fa14 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0204 	mvn.w	r2, #4
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9e7 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f9d9 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f9ea 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d122      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0208 	mvn.w	r2, #8
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9bd 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f9af 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f9c0 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d122      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d11b      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0210 	mvn.w	r2, #16
 8003c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f993 	bl	8003f66 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f985 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f996 	bl	8003f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d10e      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d107      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0201 	mvn.w	r2, #1
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fa26 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fd12 	bl	80046d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f95b 	bl	8003f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d10e      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d107      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0220 	mvn.w	r2, #32
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fcdc 	bl	80046bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e048      	b.n	8003dbc <HAL_TIM_OC_ConfigChannel+0xb0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d839      	bhi.n	8003dac <HAL_TIM_OC_ConfigChannel+0xa0>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003dad 	.word	0x08003dad
 8003d48:	08003dad 	.word	0x08003dad
 8003d4c:	08003dad 	.word	0x08003dad
 8003d50:	08003d83 	.word	0x08003d83
 8003d54:	08003dad 	.word	0x08003dad
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003d91 	.word	0x08003d91
 8003d64:	08003dad 	.word	0x08003dad
 8003d68:	08003dad 	.word	0x08003dad
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003d9f 	.word	0x08003d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f992 	bl	80040a4 <TIM_OC1_SetConfig>
      break;
 8003d80:	e017      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f9f1 	bl	8004170 <TIM_OC2_SetConfig>
      break;
 8003d8e:	e010      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fa56 	bl	8004248 <TIM_OC3_SetConfig>
      break;
 8003d9c:	e009      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fab9 	bl	800431c <TIM_OC4_SetConfig>
      break;
 8003daa:	e002      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
      break;
 8003db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e0b4      	b.n	8003f4a <HAL_TIM_ConfigClockSource+0x186>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e18:	d03e      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0xd4>
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	f200 8087 	bhi.w	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	f000 8086 	beq.w	8003f36 <HAL_TIM_ConfigClockSource+0x172>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d87f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	d01a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0xa6>
 8003e34:	2b70      	cmp	r3, #112	; 0x70
 8003e36:	d87b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	2b60      	cmp	r3, #96	; 0x60
 8003e3a:	d050      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x11a>
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d877      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	d03c      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0xfa>
 8003e44:	2b50      	cmp	r3, #80	; 0x50
 8003e46:	d873      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d058      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x13a>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d86f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b30      	cmp	r3, #48	; 0x30
 8003e52:	d064      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e54:	2b30      	cmp	r3, #48	; 0x30
 8003e56:	d86b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d060      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d867      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d05a      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e68:	e062      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f000 fb19 	bl	80044b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]
      break;
 8003e96:	e04f      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f000 fb02 	bl	80044b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eba:	609a      	str	r2, [r3, #8]
      break;
 8003ebc:	e03c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f000 fa76 	bl	80043bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2150      	movs	r1, #80	; 0x50
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 facf 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8003edc:	e02c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 fa95 	bl	800441a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2160      	movs	r1, #96	; 0x60
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fabf 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8003efc:	e01c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fa56 	bl	80043bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 faaf 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e00c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f000 faa6 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8003f2e:	e003      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      break;
 8003f34:	e000      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a34      	ldr	r2, [pc, #208]	; (8004088 <TIM_Base_SetConfig+0xe4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00f      	beq.n	8003fdc <TIM_Base_SetConfig+0x38>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d00b      	beq.n	8003fdc <TIM_Base_SetConfig+0x38>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a31      	ldr	r2, [pc, #196]	; (800408c <TIM_Base_SetConfig+0xe8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_Base_SetConfig+0x38>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a30      	ldr	r2, [pc, #192]	; (8004090 <TIM_Base_SetConfig+0xec>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_Base_SetConfig+0x38>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <TIM_Base_SetConfig+0xf0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d108      	bne.n	8003fee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a25      	ldr	r2, [pc, #148]	; (8004088 <TIM_Base_SetConfig+0xe4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01b      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d017      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a22      	ldr	r2, [pc, #136]	; (800408c <TIM_Base_SetConfig+0xe8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a21      	ldr	r2, [pc, #132]	; (8004090 <TIM_Base_SetConfig+0xec>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <TIM_Base_SetConfig+0xf0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <TIM_Base_SetConfig+0xf4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1e      	ldr	r2, [pc, #120]	; (800409c <TIM_Base_SetConfig+0xf8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <TIM_Base_SetConfig+0xfc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a08      	ldr	r2, [pc, #32]	; (8004088 <TIM_Base_SetConfig+0xe4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d103      	bne.n	8004074 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	615a      	str	r2, [r3, #20]
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40014000 	.word	0x40014000
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800

080040a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 0302 	bic.w	r3, r3, #2
 80040ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a1c      	ldr	r2, [pc, #112]	; (800416c <TIM_OC1_SetConfig+0xc8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10c      	bne.n	800411a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0308 	bic.w	r3, r3, #8
 8004106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <TIM_OC1_SetConfig+0xc8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d111      	bne.n	8004146 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	621a      	str	r2, [r3, #32]
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40010000 	.word	0x40010000

08004170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0320 	bic.w	r3, r3, #32
 80041ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <TIM_OC2_SetConfig+0xd4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10d      	bne.n	80041ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <TIM_OC2_SetConfig+0xd4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d113      	bne.n	800421c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000

08004248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <TIM_OC3_SetConfig+0xd0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10d      	bne.n	80042c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <TIM_OC3_SetConfig+0xd0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d113      	bne.n	80042f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40010000 	.word	0x40010000

0800431c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	031b      	lsls	r3, r3, #12
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a10      	ldr	r2, [pc, #64]	; (80043b8 <TIM_OC4_SetConfig+0x9c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d109      	bne.n	8004390 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000

080043bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 030a 	bic.w	r3, r3, #10
 80043f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800441a:	b480      	push	{r7}
 800441c:	b087      	sub	sp, #28
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0210 	bic.w	r2, r3, #16
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	031b      	lsls	r3, r3, #12
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	f043 0307 	orr.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	021a      	lsls	r2, r3, #8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2201      	movs	r2, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	43db      	mvns	r3, r3
 8004512:	401a      	ands	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	fa01 f303 	lsl.w	r3, r1, r3
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004550:	2302      	movs	r3, #2
 8004552:	e050      	b.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a0:	d013      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a18      	ldr	r2, [pc, #96]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a16      	ldr	r2, [pc, #88]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a13      	ldr	r2, [pc, #76]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10c      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40014000 	.word	0x40014000

08004618 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004630:	2302      	movs	r3, #2
 8004632:	e03d      	b.n	80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e03f      	b.n	8004776 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fd f872 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2224      	movs	r2, #36	; 0x24
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f001 f8bb 	bl	80058a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800473c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695a      	ldr	r2, [r3, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800474c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800475c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b08a      	sub	sp, #40	; 0x28
 8004782:	af02      	add	r7, sp, #8
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b20      	cmp	r3, #32
 800479c:	d17c      	bne.n	8004898 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_UART_Transmit+0x2c>
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e075      	b.n	800489a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_UART_Transmit+0x3e>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e06e      	b.n	800489a <HAL_UART_Transmit+0x11c>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2221      	movs	r2, #33	; 0x21
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d2:	f7fd fb19 	bl	8001e08 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	88fa      	ldrh	r2, [r7, #6]
 80047e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ec:	d108      	bne.n	8004800 <HAL_UART_Transmit+0x82>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e003      	b.n	8004808 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004810:	e02a      	b.n	8004868 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fd34 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e036      	b.n	800489a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004840:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	3302      	adds	r3, #2
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	e007      	b.n	800485a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	3301      	adds	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1cf      	bne.n	8004812 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2140      	movs	r1, #64	; 0x40
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fd04 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e006      	b.n	800489a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	e000      	b.n	800489a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004898:	2302      	movs	r3, #2
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	4613      	mov	r3, r2
 80048ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d11d      	bne.n	80048f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_UART_Receive_IT+0x26>
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e016      	b.n	80048fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_UART_Receive_IT+0x38>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e00f      	b.n	80048fa <HAL_UART_Receive_IT+0x58>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	461a      	mov	r2, r3
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fd39 	bl	8005366 <UART_Start_Receive_IT>
 80048f4:	4603      	mov	r3, r0
 80048f6:	e000      	b.n	80048fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	; 0x30
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b20      	cmp	r3, #32
 800491c:	d165      	bne.n	80049ea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_UART_Transmit_DMA+0x26>
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e05e      	b.n	80049ec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_UART_Transmit_DMA+0x38>
 8004938:	2302      	movs	r3, #2
 800493a:	e057      	b.n	80049ec <HAL_UART_Transmit_DMA+0xe8>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2221      	movs	r2, #33	; 0x21
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <HAL_UART_Transmit_DMA+0xf0>)
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	4a21      	ldr	r2, [pc, #132]	; (80049f8 <HAL_UART_Transmit_DMA+0xf4>)
 8004972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	4a20      	ldr	r2, [pc, #128]	; (80049fc <HAL_UART_Transmit_DMA+0xf8>)
 800497a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	2200      	movs	r2, #0
 8004982:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004984:	f107 0308 	add.w	r3, r7, #8
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3304      	adds	r3, #4
 8004998:	461a      	mov	r2, r3
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	f7fd fc00 	bl	80021a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	617b      	str	r3, [r7, #20]
   return(result);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d2:	627a      	str	r2, [r7, #36]	; 0x24
 80049d4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6a39      	ldr	r1, [r7, #32]
 80049d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e000      	b.n	80049ec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
  }
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3730      	adds	r7, #48	; 0x30
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	08004fe5 	.word	0x08004fe5
 80049f8:	0800507f 	.word	0x0800507f
 80049fc:	080051f7 	.word	0x080051f7

08004a00 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d11d      	bne.n	8004a56 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_UART_Receive_DMA+0x26>
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e016      	b.n	8004a58 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_UART_Receive_DMA+0x38>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e00f      	b.n	8004a58 <HAL_UART_Receive_DMA+0x58>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fcc9 	bl	80053e4 <UART_Start_Receive_DMA>
 8004a52:	4603      	mov	r3, r0
 8004a54:	e000      	b.n	8004a58 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b0ba      	sub	sp, #232	; 0xe8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10f      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x66>
 8004ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fe35 	bl	800572e <UART_Receive_IT>
      return;
 8004ac4:	e256      	b.n	8004f74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80de 	beq.w	8004c8c <HAL_UART_IRQHandler+0x22c>
 8004ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80d1 	beq.w	8004c8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_UART_IRQHandler+0xae>
 8004af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0201 	orr.w	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_UART_IRQHandler+0xd2>
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0202 	orr.w	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_UART_IRQHandler+0xf6>
 8004b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d011      	beq.n	8004b86 <HAL_UART_IRQHandler+0x126>
 8004b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f043 0208 	orr.w	r2, r3, #8
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 81ed 	beq.w	8004f6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_UART_IRQHandler+0x14e>
 8004b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fdc0 	bl	800572e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <HAL_UART_IRQHandler+0x17a>
 8004bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d04f      	beq.n	8004c7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fcc8 	bl	8005570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d141      	bne.n	8004c72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3314      	adds	r3, #20
 8004c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1d9      	bne.n	8004bee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d013      	beq.n	8004c6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	4a7d      	ldr	r2, [pc, #500]	; (8004e3c <HAL_UART_IRQHandler+0x3dc>)
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd fb6e 	bl	8002330 <HAL_DMA_Abort_IT>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c64:	4610      	mov	r0, r2
 8004c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	e00e      	b.n	8004c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9a4 	bl	8004fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	e00a      	b.n	8004c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9a0 	bl	8004fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	e006      	b.n	8004c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f99c 	bl	8004fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c86:	e170      	b.n	8004f6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c88:	bf00      	nop
    return;
 8004c8a:	e16e      	b.n	8004f6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	f040 814a 	bne.w	8004f2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8143 	beq.w	8004f2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 813c 	beq.w	8004f2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	f040 80b4 	bne.w	8004e40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8140 	beq.w	8004f6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	f080 8139 	bcs.w	8004f6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0e:	f000 8088 	beq.w	8004e22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1d9      	bne.n	8004d12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e1      	bne.n	8004d5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3314      	adds	r3, #20
 8004da0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e3      	bne.n	8004d9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df2:	f023 0310 	bic.w	r3, r3, #16
 8004df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e3      	bne.n	8004de0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fd fa17 	bl	8002250 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8ca 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e38:	e099      	b.n	8004f6e <HAL_UART_IRQHandler+0x50e>
 8004e3a:	bf00      	nop
 8004e3c:	08005637 	.word	0x08005637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 808b 	beq.w	8004f72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8086 	beq.w	8004f72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004e8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e3      	bne.n	8004e66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	623b      	str	r3, [r7, #32]
   return(result);
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3314      	adds	r3, #20
 8004ebe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ec2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e3      	bne.n	8004e9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0310 	bic.w	r3, r3, #16
 8004efa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f08:	61fa      	str	r2, [r7, #28]
 8004f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	617b      	str	r3, [r7, #20]
   return(result);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e3      	bne.n	8004ee4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f852 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f28:	e023      	b.n	8004f72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_UART_IRQHandler+0x4ea>
 8004f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fb8b 	bl	800565e <UART_Transmit_IT>
    return;
 8004f48:	e014      	b.n	8004f74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00e      	beq.n	8004f74 <HAL_UART_IRQHandler+0x514>
 8004f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fbcb 	bl	80056fe <UART_EndTransmit_IT>
    return;
 8004f68:	e004      	b.n	8004f74 <HAL_UART_IRQHandler+0x514>
    return;
 8004f6a:	bf00      	nop
 8004f6c:	e002      	b.n	8004f74 <HAL_UART_IRQHandler+0x514>
      return;
 8004f6e:	bf00      	nop
 8004f70:	e000      	b.n	8004f74 <HAL_UART_IRQHandler+0x514>
      return;
 8004f72:	bf00      	nop
  }
}
 8004f74:	37e8      	adds	r7, #232	; 0xe8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop

08004f7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b090      	sub	sp, #64	; 0x40
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d137      	bne.n	8005070 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	2200      	movs	r2, #0
 8005004:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	623b      	str	r3, [r7, #32]
   return(result);
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501c:	63bb      	str	r3, [r7, #56]	; 0x38
 800501e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3314      	adds	r3, #20
 8005024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005026:	633a      	str	r2, [r7, #48]	; 0x30
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800502c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800503a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	60fb      	str	r3, [r7, #12]
   return(result);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505a:	61fa      	str	r2, [r7, #28]
 800505c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	69b9      	ldr	r1, [r7, #24]
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	617b      	str	r3, [r7, #20]
   return(result);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e5      	bne.n	800503a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800506e:	e002      	b.n	8005076 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005070:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005072:	f7ff ff83 	bl	8004f7c <HAL_UART_TxCpltCallback>
}
 8005076:	bf00      	nop
 8005078:	3740      	adds	r7, #64	; 0x40
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff ff7f 	bl	8004f90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b09c      	sub	sp, #112	; 0x70
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d172      	bne.n	800519c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	2200      	movs	r2, #0
 80050ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80050de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e5      	bne.n	80050bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3314      	adds	r3, #20
 80050f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	667b      	str	r3, [r7, #100]	; 0x64
 8005108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3314      	adds	r3, #20
 800510e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005110:	647a      	str	r2, [r7, #68]	; 0x44
 8005112:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800511e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e5      	bne.n	80050f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	623b      	str	r3, [r7, #32]
   return(result);
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513a:	663b      	str	r3, [r7, #96]	; 0x60
 800513c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3314      	adds	r3, #20
 8005142:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005144:	633a      	str	r2, [r7, #48]	; 0x30
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800514a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e5      	bne.n	8005124 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	2b01      	cmp	r3, #1
 8005166:	d119      	bne.n	800519c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	60fb      	str	r3, [r7, #12]
   return(result);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0310 	bic.w	r3, r3, #16
 800517e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005188:	61fa      	str	r2, [r7, #28]
 800518a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	69b9      	ldr	r1, [r7, #24]
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	617b      	str	r3, [r7, #20]
   return(result);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d106      	bne.n	80051b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051a8:	4619      	mov	r1, r3
 80051aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051ac:	f7ff ff0e 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051b0:	e002      	b.n	80051b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80051b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051b4:	f7fb fed8 	bl	8000f68 <HAL_UART_RxCpltCallback>
}
 80051b8:	bf00      	nop
 80051ba:	3770      	adds	r7, #112	; 0x70
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d108      	bne.n	80051e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4619      	mov	r1, r3
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7ff fef3 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051e6:	e002      	b.n	80051ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7ff fedb 	bl	8004fa4 <HAL_UART_RxHalfCpltCallback>
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	2b80      	cmp	r3, #128	; 0x80
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b21      	cmp	r3, #33	; 0x21
 8005228:	d108      	bne.n	800523c <UART_DMAError+0x46>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005236:	68b8      	ldr	r0, [r7, #8]
 8005238:	f000 f972 	bl	8005520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	bf0c      	ite	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	2300      	movne	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b22      	cmp	r3, #34	; 0x22
 800525c:	d108      	bne.n	8005270 <UART_DMAError+0x7a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2200      	movs	r2, #0
 8005268:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800526a:	68b8      	ldr	r0, [r7, #8]
 800526c:	f000 f980 	bl	8005570 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	f043 0210 	orr.w	r2, r3, #16
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f7ff fe9b 	bl	8004fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b090      	sub	sp, #64	; 0x40
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529a:	e050      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a2:	d04c      	beq.n	800533e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0x30>
 80052aa:	f7fc fdad 	bl	8001e08 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d241      	bcs.n	800533e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052da:	637a      	str	r2, [r7, #52]	; 0x34
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3314      	adds	r3, #20
 80052f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	613b      	str	r3, [r7, #16]
   return(result);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	63bb      	str	r3, [r7, #56]	; 0x38
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800530e:	623a      	str	r2, [r7, #32]
 8005310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	69f9      	ldr	r1, [r7, #28]
 8005314:	6a3a      	ldr	r2, [r7, #32]
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	61bb      	str	r3, [r7, #24]
   return(result);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e5      	bne.n	80052ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e00f      	b.n	800535e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4013      	ands	r3, r2
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	429a      	cmp	r2, r3
 800534c:	bf0c      	ite	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2300      	movne	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	429a      	cmp	r2, r3
 800535a:	d09f      	beq.n	800529c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3740      	adds	r7, #64	; 0x40
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	4613      	mov	r3, r2
 8005372:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2222      	movs	r2, #34	; 0x22
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0220 	orr.w	r2, r2, #32
 80053d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b098      	sub	sp, #96	; 0x60
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2222      	movs	r2, #34	; 0x22
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	4a40      	ldr	r2, [pc, #256]	; (8005514 <UART_Start_Receive_DMA+0x130>)
 8005412:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	4a3f      	ldr	r2, [pc, #252]	; (8005518 <UART_Start_Receive_DMA+0x134>)
 800541a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	4a3e      	ldr	r2, [pc, #248]	; (800551c <UART_Start_Receive_DMA+0x138>)
 8005422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	2200      	movs	r2, #0
 800542a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800542c:	f107 0308 	add.w	r3, r7, #8
 8005430:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	f7fc feac 	bl	80021a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d019      	beq.n	80054a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800547e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005484:	65bb      	str	r3, [r7, #88]	; 0x58
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800548e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005490:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800549c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e5      	bne.n	800546e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e5      	bne.n	80054a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3314      	adds	r3, #20
 80054dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	617b      	str	r3, [r7, #20]
   return(result);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ec:	653b      	str	r3, [r7, #80]	; 0x50
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3314      	adds	r3, #20
 80054f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054f6:	627a      	str	r2, [r7, #36]	; 0x24
 80054f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6a39      	ldr	r1, [r7, #32]
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	61fb      	str	r3, [r7, #28]
   return(result);
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e5      	bne.n	80054d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3760      	adds	r7, #96	; 0x60
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	0800509b 	.word	0x0800509b
 8005518:	080051c1 	.word	0x080051c1
 800551c:	080051f7 	.word	0x080051f7

08005520 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	; 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60bb      	str	r3, [r7, #8]
   return(result);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	61ba      	str	r2, [r7, #24]
 800554a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005564:	bf00      	nop
 8005566:	3724      	adds	r7, #36	; 0x24
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005570:	b480      	push	{r7}
 8005572:	b095      	sub	sp, #84	; 0x54
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800558e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005598:	643a      	str	r2, [r7, #64]	; 0x40
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800559e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3314      	adds	r3, #20
 80055b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3314      	adds	r3, #20
 80055ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e5      	bne.n	80055ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d119      	bne.n	800561c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f023 0310 	bic.w	r3, r3, #16
 80055fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005608:	61ba      	str	r2, [r7, #24]
 800560a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6979      	ldr	r1, [r7, #20]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	613b      	str	r3, [r7, #16]
   return(result);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800562a:	bf00      	nop
 800562c:	3754      	adds	r7, #84	; 0x54
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff fcb1 	bl	8004fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b21      	cmp	r3, #33	; 0x21
 8005670:	d13e      	bne.n	80056f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567a:	d114      	bne.n	80056a6 <UART_Transmit_IT+0x48>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d110      	bne.n	80056a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	1c9a      	adds	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	621a      	str	r2, [r3, #32]
 80056a4:	e008      	b.n	80056b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	1c59      	adds	r1, r3, #1
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6211      	str	r1, [r2, #32]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4619      	mov	r1, r3
 80056c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10f      	bne.n	80056ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fc2c 	bl	8004f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08c      	sub	sp, #48	; 0x30
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b22      	cmp	r3, #34	; 0x22
 8005740:	f040 80ab 	bne.w	800589a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d117      	bne.n	800577e <UART_Receive_IT+0x50>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d113      	bne.n	800577e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	b29b      	uxth	r3, r3
 8005768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576c:	b29a      	uxth	r2, r3
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	1c9a      	adds	r2, r3, #2
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
 800577c:	e026      	b.n	80057cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d007      	beq.n	80057a2 <UART_Receive_IT+0x74>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <UART_Receive_IT+0x82>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e008      	b.n	80057c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	4619      	mov	r1, r3
 80057da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d15a      	bne.n	8005896 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0220 	bic.w	r2, r2, #32
 80057ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	2b01      	cmp	r3, #1
 800581e:	d135      	bne.n	800588c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	613b      	str	r3, [r7, #16]
   return(result);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f023 0310 	bic.w	r3, r3, #16
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005846:	623a      	str	r2, [r7, #32]
 8005848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	61bb      	str	r3, [r7, #24]
   return(result);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e5      	bne.n	8005826 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b10      	cmp	r3, #16
 8005866:	d10a      	bne.n	800587e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fba1 	bl	8004fcc <HAL_UARTEx_RxEventCallback>
 800588a:	e002      	b.n	8005892 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fb fb6b 	bl	8000f68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e002      	b.n	800589c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e000      	b.n	800589c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
  }
}
 800589c:	4618      	mov	r0, r3
 800589e:	3730      	adds	r7, #48	; 0x30
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a8:	b0c0      	sub	sp, #256	; 0x100
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c0:	68d9      	ldr	r1, [r3, #12]
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	ea40 0301 	orr.w	r3, r0, r1
 80058cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	431a      	orrs	r2, r3
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058fc:	f021 010c 	bic.w	r1, r1, #12
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800590a:	430b      	orrs	r3, r1
 800590c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	6999      	ldr	r1, [r3, #24]
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	ea40 0301 	orr.w	r3, r0, r1
 800592a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b8f      	ldr	r3, [pc, #572]	; (8005b70 <UART_SetConfig+0x2cc>)
 8005934:	429a      	cmp	r2, r3
 8005936:	d005      	beq.n	8005944 <UART_SetConfig+0xa0>
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b8d      	ldr	r3, [pc, #564]	; (8005b74 <UART_SetConfig+0x2d0>)
 8005940:	429a      	cmp	r2, r3
 8005942:	d104      	bne.n	800594e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005944:	f7fd fda2 	bl	800348c <HAL_RCC_GetPCLK2Freq>
 8005948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800594c:	e003      	b.n	8005956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800594e:	f7fd fd89 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8005952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005960:	f040 810c 	bne.w	8005b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005968:	2200      	movs	r2, #0
 800596a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800596e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005976:	4622      	mov	r2, r4
 8005978:	462b      	mov	r3, r5
 800597a:	1891      	adds	r1, r2, r2
 800597c:	65b9      	str	r1, [r7, #88]	; 0x58
 800597e:	415b      	adcs	r3, r3
 8005980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005986:	4621      	mov	r1, r4
 8005988:	eb12 0801 	adds.w	r8, r2, r1
 800598c:	4629      	mov	r1, r5
 800598e:	eb43 0901 	adc.w	r9, r3, r1
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a6:	4690      	mov	r8, r2
 80059a8:	4699      	mov	r9, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	eb18 0303 	adds.w	r3, r8, r3
 80059b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059b4:	462b      	mov	r3, r5
 80059b6:	eb49 0303 	adc.w	r3, r9, r3
 80059ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059d2:	460b      	mov	r3, r1
 80059d4:	18db      	adds	r3, r3, r3
 80059d6:	653b      	str	r3, [r7, #80]	; 0x50
 80059d8:	4613      	mov	r3, r2
 80059da:	eb42 0303 	adc.w	r3, r2, r3
 80059de:	657b      	str	r3, [r7, #84]	; 0x54
 80059e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059e8:	f7fb f906 	bl	8000bf8 <__aeabi_uldivmod>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4b61      	ldr	r3, [pc, #388]	; (8005b78 <UART_SetConfig+0x2d4>)
 80059f2:	fba3 2302 	umull	r2, r3, r3, r2
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	011c      	lsls	r4, r3, #4
 80059fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a14:	415b      	adcs	r3, r3
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a22:	4649      	mov	r1, r9
 8005a24:	eb43 0b01 	adc.w	fp, r3, r1
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a3c:	4692      	mov	sl, r2
 8005a3e:	469b      	mov	fp, r3
 8005a40:	4643      	mov	r3, r8
 8005a42:	eb1a 0303 	adds.w	r3, sl, r3
 8005a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	18db      	adds	r3, r3, r3
 8005a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a6e:	4613      	mov	r3, r2
 8005a70:	eb42 0303 	adc.w	r3, r2, r3
 8005a74:	647b      	str	r3, [r7, #68]	; 0x44
 8005a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a7e:	f7fb f8bb 	bl	8000bf8 <__aeabi_uldivmod>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <UART_SetConfig+0x2d4>)
 8005a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2264      	movs	r2, #100	; 0x64
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	1acb      	subs	r3, r1, r3
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a9e:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <UART_SetConfig+0x2d4>)
 8005aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005aac:	441c      	add	r4, r3
 8005aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	1891      	adds	r1, r2, r2
 8005ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ac8:	415b      	adcs	r3, r3
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	1851      	adds	r1, r2, r1
 8005ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	414b      	adcs	r3, r1
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ae8:	4659      	mov	r1, fp
 8005aea:	00cb      	lsls	r3, r1, #3
 8005aec:	4651      	mov	r1, sl
 8005aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af2:	4651      	mov	r1, sl
 8005af4:	00ca      	lsls	r2, r1, #3
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	4642      	mov	r2, r8
 8005afe:	189b      	adds	r3, r3, r2
 8005b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b04:	464b      	mov	r3, r9
 8005b06:	460a      	mov	r2, r1
 8005b08:	eb42 0303 	adc.w	r3, r2, r3
 8005b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b24:	460b      	mov	r3, r1
 8005b26:	18db      	adds	r3, r3, r3
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	eb42 0303 	adc.w	r3, r2, r3
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b3a:	f7fb f85d 	bl	8000bf8 <__aeabi_uldivmod>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <UART_SetConfig+0x2d4>)
 8005b44:	fba3 1302 	umull	r1, r3, r3, r2
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	2164      	movs	r1, #100	; 0x64
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	3332      	adds	r3, #50	; 0x32
 8005b56:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <UART_SetConfig+0x2d4>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	f003 0207 	and.w	r2, r3, #7
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4422      	add	r2, r4
 8005b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b6c:	e105      	b.n	8005d7a <UART_SetConfig+0x4d6>
 8005b6e:	bf00      	nop
 8005b70:	40011000 	.word	0x40011000
 8005b74:	40011400 	.word	0x40011400
 8005b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b8e:	4642      	mov	r2, r8
 8005b90:	464b      	mov	r3, r9
 8005b92:	1891      	adds	r1, r2, r2
 8005b94:	6239      	str	r1, [r7, #32]
 8005b96:	415b      	adcs	r3, r3
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	1854      	adds	r4, r2, r1
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	eb43 0501 	adc.w	r5, r3, r1
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	00eb      	lsls	r3, r5, #3
 8005bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb6:	00e2      	lsls	r2, r4, #3
 8005bb8:	4614      	mov	r4, r2
 8005bba:	461d      	mov	r5, r3
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	18e3      	adds	r3, r4, r3
 8005bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	eb45 0303 	adc.w	r3, r5, r3
 8005bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bea:	4629      	mov	r1, r5
 8005bec:	008b      	lsls	r3, r1, #2
 8005bee:	4621      	mov	r1, r4
 8005bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	008a      	lsls	r2, r1, #2
 8005bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bfc:	f7fa fffc 	bl	8000bf8 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4b60      	ldr	r3, [pc, #384]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005c06:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	011c      	lsls	r4, r3, #4
 8005c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	1891      	adds	r1, r2, r2
 8005c26:	61b9      	str	r1, [r7, #24]
 8005c28:	415b      	adcs	r3, r3
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c30:	4641      	mov	r1, r8
 8005c32:	1851      	adds	r1, r2, r1
 8005c34:	6139      	str	r1, [r7, #16]
 8005c36:	4649      	mov	r1, r9
 8005c38:	414b      	adcs	r3, r1
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c48:	4659      	mov	r1, fp
 8005c4a:	00cb      	lsls	r3, r1, #3
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c52:	4651      	mov	r1, sl
 8005c54:	00ca      	lsls	r2, r1, #3
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	189b      	adds	r3, r3, r2
 8005c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c64:	464b      	mov	r3, r9
 8005c66:	460a      	mov	r2, r1
 8005c68:	eb42 0303 	adc.w	r3, r2, r3
 8005c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c88:	4649      	mov	r1, r9
 8005c8a:	008b      	lsls	r3, r1, #2
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c92:	4641      	mov	r1, r8
 8005c94:	008a      	lsls	r2, r1, #2
 8005c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c9a:	f7fa ffad 	bl	8000bf8 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4b39      	ldr	r3, [pc, #228]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	2164      	movs	r1, #100	; 0x64
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	3332      	adds	r3, #50	; 0x32
 8005cb6:	4a34      	ldr	r2, [pc, #208]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc2:	441c      	add	r4, r3
 8005cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc8:	2200      	movs	r2, #0
 8005cca:	673b      	str	r3, [r7, #112]	; 0x70
 8005ccc:	677a      	str	r2, [r7, #116]	; 0x74
 8005cce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	1891      	adds	r1, r2, r2
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	415b      	adcs	r3, r3
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	1851      	adds	r1, r2, r1
 8005ce6:	6039      	str	r1, [r7, #0]
 8005ce8:	4649      	mov	r1, r9
 8005cea:	414b      	adcs	r3, r1
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cfa:	4659      	mov	r1, fp
 8005cfc:	00cb      	lsls	r3, r1, #3
 8005cfe:	4651      	mov	r1, sl
 8005d00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d04:	4651      	mov	r1, sl
 8005d06:	00ca      	lsls	r2, r1, #3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4642      	mov	r2, r8
 8005d10:	189b      	adds	r3, r3, r2
 8005d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d14:	464b      	mov	r3, r9
 8005d16:	460a      	mov	r2, r1
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	663b      	str	r3, [r7, #96]	; 0x60
 8005d28:	667a      	str	r2, [r7, #100]	; 0x64
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d36:	4649      	mov	r1, r9
 8005d38:	008b      	lsls	r3, r1, #2
 8005d3a:	4641      	mov	r1, r8
 8005d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d40:	4641      	mov	r1, r8
 8005d42:	008a      	lsls	r2, r1, #2
 8005d44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d48:	f7fa ff56 	bl	8000bf8 <__aeabi_uldivmod>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005d52:	fba3 1302 	umull	r1, r3, r3, r2
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	2164      	movs	r1, #100	; 0x64
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	3332      	adds	r3, #50	; 0x32
 8005d64:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <UART_SetConfig+0x4e4>)
 8005d66:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	f003 020f 	and.w	r2, r3, #15
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4422      	add	r2, r4
 8005d78:	609a      	str	r2, [r3, #8]
}
 8005d7a:	bf00      	nop
 8005d7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d80:	46bd      	mov	sp, r7
 8005d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d86:	bf00      	nop
 8005d88:	51eb851f 	.word	0x51eb851f

08005d8c <atof>:
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	f001 bae1 	b.w	8007354 <strtod>
	...

08005d94 <__errno>:
 8005d94:	4b01      	ldr	r3, [pc, #4]	; (8005d9c <__errno+0x8>)
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000010 	.word	0x20000010

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4d0d      	ldr	r5, [pc, #52]	; (8005dd8 <__libc_init_array+0x38>)
 8005da4:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da6:	1b64      	subs	r4, r4, r5
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	2600      	movs	r6, #0
 8005dac:	42a6      	cmp	r6, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	4d0b      	ldr	r5, [pc, #44]	; (8005de0 <__libc_init_array+0x40>)
 8005db2:	4c0c      	ldr	r4, [pc, #48]	; (8005de4 <__libc_init_array+0x44>)
 8005db4:	f004 fa00 	bl	800a1b8 <_init>
 8005db8:	1b64      	subs	r4, r4, r5
 8005dba:	10a4      	asrs	r4, r4, #2
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	42a6      	cmp	r6, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc8:	4798      	blx	r3
 8005dca:	3601      	adds	r6, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd2:	4798      	blx	r3
 8005dd4:	3601      	adds	r6, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	0800a69c 	.word	0x0800a69c
 8005ddc:	0800a69c 	.word	0x0800a69c
 8005de0:	0800a69c 	.word	0x0800a69c
 8005de4:	0800a6a0 	.word	0x0800a6a0

08005de8 <memset>:
 8005de8:	4402      	add	r2, r0
 8005dea:	4603      	mov	r3, r0
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d100      	bne.n	8005df2 <memset+0xa>
 8005df0:	4770      	bx	lr
 8005df2:	f803 1b01 	strb.w	r1, [r3], #1
 8005df6:	e7f9      	b.n	8005dec <memset+0x4>

08005df8 <__cvt>:
 8005df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	ec55 4b10 	vmov	r4, r5, d0
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	460e      	mov	r6, r1
 8005e04:	4619      	mov	r1, r3
 8005e06:	462b      	mov	r3, r5
 8005e08:	bfbb      	ittet	lt
 8005e0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e0e:	461d      	movlt	r5, r3
 8005e10:	2300      	movge	r3, #0
 8005e12:	232d      	movlt	r3, #45	; 0x2d
 8005e14:	700b      	strb	r3, [r1, #0]
 8005e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e1c:	4691      	mov	r9, r2
 8005e1e:	f023 0820 	bic.w	r8, r3, #32
 8005e22:	bfbc      	itt	lt
 8005e24:	4622      	movlt	r2, r4
 8005e26:	4614      	movlt	r4, r2
 8005e28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e2c:	d005      	beq.n	8005e3a <__cvt+0x42>
 8005e2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e32:	d100      	bne.n	8005e36 <__cvt+0x3e>
 8005e34:	3601      	adds	r6, #1
 8005e36:	2102      	movs	r1, #2
 8005e38:	e000      	b.n	8005e3c <__cvt+0x44>
 8005e3a:	2103      	movs	r1, #3
 8005e3c:	ab03      	add	r3, sp, #12
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	ab02      	add	r3, sp, #8
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	ec45 4b10 	vmov	d0, r4, r5
 8005e48:	4653      	mov	r3, sl
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	f001 fb1c 	bl	8007488 <_dtoa_r>
 8005e50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e54:	4607      	mov	r7, r0
 8005e56:	d102      	bne.n	8005e5e <__cvt+0x66>
 8005e58:	f019 0f01 	tst.w	r9, #1
 8005e5c:	d022      	beq.n	8005ea4 <__cvt+0xac>
 8005e5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e62:	eb07 0906 	add.w	r9, r7, r6
 8005e66:	d110      	bne.n	8005e8a <__cvt+0x92>
 8005e68:	783b      	ldrb	r3, [r7, #0]
 8005e6a:	2b30      	cmp	r3, #48	; 0x30
 8005e6c:	d10a      	bne.n	8005e84 <__cvt+0x8c>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2300      	movs	r3, #0
 8005e72:	4620      	mov	r0, r4
 8005e74:	4629      	mov	r1, r5
 8005e76:	f7fa fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e7a:	b918      	cbnz	r0, 8005e84 <__cvt+0x8c>
 8005e7c:	f1c6 0601 	rsb	r6, r6, #1
 8005e80:	f8ca 6000 	str.w	r6, [sl]
 8005e84:	f8da 3000 	ldr.w	r3, [sl]
 8005e88:	4499      	add	r9, r3
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4620      	mov	r0, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	f7fa fe21 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e96:	b108      	cbz	r0, 8005e9c <__cvt+0xa4>
 8005e98:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e9c:	2230      	movs	r2, #48	; 0x30
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	454b      	cmp	r3, r9
 8005ea2:	d307      	bcc.n	8005eb4 <__cvt+0xbc>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ea8:	1bdb      	subs	r3, r3, r7
 8005eaa:	4638      	mov	r0, r7
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	b004      	add	sp, #16
 8005eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	9103      	str	r1, [sp, #12]
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e7f0      	b.n	8005e9e <__cvt+0xa6>

08005ebc <__exponent>:
 8005ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2900      	cmp	r1, #0
 8005ec2:	bfb8      	it	lt
 8005ec4:	4249      	neglt	r1, r1
 8005ec6:	f803 2b02 	strb.w	r2, [r3], #2
 8005eca:	bfb4      	ite	lt
 8005ecc:	222d      	movlt	r2, #45	; 0x2d
 8005ece:	222b      	movge	r2, #43	; 0x2b
 8005ed0:	2909      	cmp	r1, #9
 8005ed2:	7042      	strb	r2, [r0, #1]
 8005ed4:	dd2a      	ble.n	8005f2c <__exponent+0x70>
 8005ed6:	f10d 0407 	add.w	r4, sp, #7
 8005eda:	46a4      	mov	ip, r4
 8005edc:	270a      	movs	r7, #10
 8005ede:	46a6      	mov	lr, r4
 8005ee0:	460a      	mov	r2, r1
 8005ee2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ee6:	fb07 1516 	mls	r5, r7, r6, r1
 8005eea:	3530      	adds	r5, #48	; 0x30
 8005eec:	2a63      	cmp	r2, #99	; 0x63
 8005eee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005ef2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	dcf1      	bgt.n	8005ede <__exponent+0x22>
 8005efa:	3130      	adds	r1, #48	; 0x30
 8005efc:	f1ae 0502 	sub.w	r5, lr, #2
 8005f00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f04:	1c44      	adds	r4, r0, #1
 8005f06:	4629      	mov	r1, r5
 8005f08:	4561      	cmp	r1, ip
 8005f0a:	d30a      	bcc.n	8005f22 <__exponent+0x66>
 8005f0c:	f10d 0209 	add.w	r2, sp, #9
 8005f10:	eba2 020e 	sub.w	r2, r2, lr
 8005f14:	4565      	cmp	r5, ip
 8005f16:	bf88      	it	hi
 8005f18:	2200      	movhi	r2, #0
 8005f1a:	4413      	add	r3, r2
 8005f1c:	1a18      	subs	r0, r3, r0
 8005f1e:	b003      	add	sp, #12
 8005f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f2a:	e7ed      	b.n	8005f08 <__exponent+0x4c>
 8005f2c:	2330      	movs	r3, #48	; 0x30
 8005f2e:	3130      	adds	r1, #48	; 0x30
 8005f30:	7083      	strb	r3, [r0, #2]
 8005f32:	70c1      	strb	r1, [r0, #3]
 8005f34:	1d03      	adds	r3, r0, #4
 8005f36:	e7f1      	b.n	8005f1c <__exponent+0x60>

08005f38 <_printf_float>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	ed2d 8b02 	vpush	{d8}
 8005f40:	b08d      	sub	sp, #52	; 0x34
 8005f42:	460c      	mov	r4, r1
 8005f44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f48:	4616      	mov	r6, r2
 8005f4a:	461f      	mov	r7, r3
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	f002 fbf9 	bl	8008744 <_localeconv_r>
 8005f52:	f8d0 a000 	ldr.w	sl, [r0]
 8005f56:	4650      	mov	r0, sl
 8005f58:	f7fa f942 	bl	80001e0 <strlen>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	f8d8 3000 	ldr.w	r3, [r8]
 8005f68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f6c:	3307      	adds	r3, #7
 8005f6e:	f023 0307 	bic.w	r3, r3, #7
 8005f72:	f103 0208 	add.w	r2, r3, #8
 8005f76:	f8c8 2000 	str.w	r2, [r8]
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f8a:	9307      	str	r3, [sp, #28]
 8005f8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f90:	ee08 0a10 	vmov	s16, r0
 8005f94:	4b9f      	ldr	r3, [pc, #636]	; (8006214 <_printf_float+0x2dc>)
 8005f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f9e:	f7fa fdcd 	bl	8000b3c <__aeabi_dcmpun>
 8005fa2:	bb88      	cbnz	r0, 8006008 <_printf_float+0xd0>
 8005fa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fa8:	4b9a      	ldr	r3, [pc, #616]	; (8006214 <_printf_float+0x2dc>)
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fae:	f7fa fda7 	bl	8000b00 <__aeabi_dcmple>
 8005fb2:	bb48      	cbnz	r0, 8006008 <_printf_float+0xd0>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	4640      	mov	r0, r8
 8005fba:	4649      	mov	r1, r9
 8005fbc:	f7fa fd96 	bl	8000aec <__aeabi_dcmplt>
 8005fc0:	b110      	cbz	r0, 8005fc8 <_printf_float+0x90>
 8005fc2:	232d      	movs	r3, #45	; 0x2d
 8005fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc8:	4b93      	ldr	r3, [pc, #588]	; (8006218 <_printf_float+0x2e0>)
 8005fca:	4894      	ldr	r0, [pc, #592]	; (800621c <_printf_float+0x2e4>)
 8005fcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fd0:	bf94      	ite	ls
 8005fd2:	4698      	movls	r8, r3
 8005fd4:	4680      	movhi	r8, r0
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	9b05      	ldr	r3, [sp, #20]
 8005fdc:	f023 0204 	bic.w	r2, r3, #4
 8005fe0:	6022      	str	r2, [r4, #0]
 8005fe2:	f04f 0900 	mov.w	r9, #0
 8005fe6:	9700      	str	r7, [sp, #0]
 8005fe8:	4633      	mov	r3, r6
 8005fea:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f9d8 	bl	80063a4 <_printf_common>
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f040 8090 	bne.w	800611a <_printf_float+0x1e2>
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ffe:	b00d      	add	sp, #52	; 0x34
 8006000:	ecbd 8b02 	vpop	{d8}
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	4642      	mov	r2, r8
 800600a:	464b      	mov	r3, r9
 800600c:	4640      	mov	r0, r8
 800600e:	4649      	mov	r1, r9
 8006010:	f7fa fd94 	bl	8000b3c <__aeabi_dcmpun>
 8006014:	b140      	cbz	r0, 8006028 <_printf_float+0xf0>
 8006016:	464b      	mov	r3, r9
 8006018:	2b00      	cmp	r3, #0
 800601a:	bfbc      	itt	lt
 800601c:	232d      	movlt	r3, #45	; 0x2d
 800601e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006022:	487f      	ldr	r0, [pc, #508]	; (8006220 <_printf_float+0x2e8>)
 8006024:	4b7f      	ldr	r3, [pc, #508]	; (8006224 <_printf_float+0x2ec>)
 8006026:	e7d1      	b.n	8005fcc <_printf_float+0x94>
 8006028:	6863      	ldr	r3, [r4, #4]
 800602a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800602e:	9206      	str	r2, [sp, #24]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	d13f      	bne.n	80060b4 <_printf_float+0x17c>
 8006034:	2306      	movs	r3, #6
 8006036:	6063      	str	r3, [r4, #4]
 8006038:	9b05      	ldr	r3, [sp, #20]
 800603a:	6861      	ldr	r1, [r4, #4]
 800603c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006040:	2300      	movs	r3, #0
 8006042:	9303      	str	r3, [sp, #12]
 8006044:	ab0a      	add	r3, sp, #40	; 0x28
 8006046:	e9cd b301 	strd	fp, r3, [sp, #4]
 800604a:	ab09      	add	r3, sp, #36	; 0x24
 800604c:	ec49 8b10 	vmov	d0, r8, r9
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	6022      	str	r2, [r4, #0]
 8006054:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006058:	4628      	mov	r0, r5
 800605a:	f7ff fecd 	bl	8005df8 <__cvt>
 800605e:	9b06      	ldr	r3, [sp, #24]
 8006060:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006062:	2b47      	cmp	r3, #71	; 0x47
 8006064:	4680      	mov	r8, r0
 8006066:	d108      	bne.n	800607a <_printf_float+0x142>
 8006068:	1cc8      	adds	r0, r1, #3
 800606a:	db02      	blt.n	8006072 <_printf_float+0x13a>
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	4299      	cmp	r1, r3
 8006070:	dd41      	ble.n	80060f6 <_printf_float+0x1be>
 8006072:	f1ab 0b02 	sub.w	fp, fp, #2
 8006076:	fa5f fb8b 	uxtb.w	fp, fp
 800607a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800607e:	d820      	bhi.n	80060c2 <_printf_float+0x18a>
 8006080:	3901      	subs	r1, #1
 8006082:	465a      	mov	r2, fp
 8006084:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006088:	9109      	str	r1, [sp, #36]	; 0x24
 800608a:	f7ff ff17 	bl	8005ebc <__exponent>
 800608e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006090:	1813      	adds	r3, r2, r0
 8006092:	2a01      	cmp	r2, #1
 8006094:	4681      	mov	r9, r0
 8006096:	6123      	str	r3, [r4, #16]
 8006098:	dc02      	bgt.n	80060a0 <_printf_float+0x168>
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	07d2      	lsls	r2, r2, #31
 800609e:	d501      	bpl.n	80060a4 <_printf_float+0x16c>
 80060a0:	3301      	adds	r3, #1
 80060a2:	6123      	str	r3, [r4, #16]
 80060a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d09c      	beq.n	8005fe6 <_printf_float+0xae>
 80060ac:	232d      	movs	r3, #45	; 0x2d
 80060ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b2:	e798      	b.n	8005fe6 <_printf_float+0xae>
 80060b4:	9a06      	ldr	r2, [sp, #24]
 80060b6:	2a47      	cmp	r2, #71	; 0x47
 80060b8:	d1be      	bne.n	8006038 <_printf_float+0x100>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1bc      	bne.n	8006038 <_printf_float+0x100>
 80060be:	2301      	movs	r3, #1
 80060c0:	e7b9      	b.n	8006036 <_printf_float+0xfe>
 80060c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060c6:	d118      	bne.n	80060fa <_printf_float+0x1c2>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	6863      	ldr	r3, [r4, #4]
 80060cc:	dd0b      	ble.n	80060e6 <_printf_float+0x1ae>
 80060ce:	6121      	str	r1, [r4, #16]
 80060d0:	b913      	cbnz	r3, 80060d8 <_printf_float+0x1a0>
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	07d0      	lsls	r0, r2, #31
 80060d6:	d502      	bpl.n	80060de <_printf_float+0x1a6>
 80060d8:	3301      	adds	r3, #1
 80060da:	440b      	add	r3, r1
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	65a1      	str	r1, [r4, #88]	; 0x58
 80060e0:	f04f 0900 	mov.w	r9, #0
 80060e4:	e7de      	b.n	80060a4 <_printf_float+0x16c>
 80060e6:	b913      	cbnz	r3, 80060ee <_printf_float+0x1b6>
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	07d2      	lsls	r2, r2, #31
 80060ec:	d501      	bpl.n	80060f2 <_printf_float+0x1ba>
 80060ee:	3302      	adds	r3, #2
 80060f0:	e7f4      	b.n	80060dc <_printf_float+0x1a4>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e7f2      	b.n	80060dc <_printf_float+0x1a4>
 80060f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060fc:	4299      	cmp	r1, r3
 80060fe:	db05      	blt.n	800610c <_printf_float+0x1d4>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	6121      	str	r1, [r4, #16]
 8006104:	07d8      	lsls	r0, r3, #31
 8006106:	d5ea      	bpl.n	80060de <_printf_float+0x1a6>
 8006108:	1c4b      	adds	r3, r1, #1
 800610a:	e7e7      	b.n	80060dc <_printf_float+0x1a4>
 800610c:	2900      	cmp	r1, #0
 800610e:	bfd4      	ite	le
 8006110:	f1c1 0202 	rsble	r2, r1, #2
 8006114:	2201      	movgt	r2, #1
 8006116:	4413      	add	r3, r2
 8006118:	e7e0      	b.n	80060dc <_printf_float+0x1a4>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	055a      	lsls	r2, r3, #21
 800611e:	d407      	bmi.n	8006130 <_printf_float+0x1f8>
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	4642      	mov	r2, r8
 8006124:	4631      	mov	r1, r6
 8006126:	4628      	mov	r0, r5
 8006128:	47b8      	blx	r7
 800612a:	3001      	adds	r0, #1
 800612c:	d12c      	bne.n	8006188 <_printf_float+0x250>
 800612e:	e764      	b.n	8005ffa <_printf_float+0xc2>
 8006130:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006134:	f240 80e0 	bls.w	80062f8 <_printf_float+0x3c0>
 8006138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800613c:	2200      	movs	r2, #0
 800613e:	2300      	movs	r3, #0
 8006140:	f7fa fcca 	bl	8000ad8 <__aeabi_dcmpeq>
 8006144:	2800      	cmp	r0, #0
 8006146:	d034      	beq.n	80061b2 <_printf_float+0x27a>
 8006148:	4a37      	ldr	r2, [pc, #220]	; (8006228 <_printf_float+0x2f0>)
 800614a:	2301      	movs	r3, #1
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f af51 	beq.w	8005ffa <_printf_float+0xc2>
 8006158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800615c:	429a      	cmp	r2, r3
 800615e:	db02      	blt.n	8006166 <_printf_float+0x22e>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	07d8      	lsls	r0, r3, #31
 8006164:	d510      	bpl.n	8006188 <_printf_float+0x250>
 8006166:	ee18 3a10 	vmov	r3, s16
 800616a:	4652      	mov	r2, sl
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	f43f af41 	beq.w	8005ffa <_printf_float+0xc2>
 8006178:	f04f 0800 	mov.w	r8, #0
 800617c:	f104 091a 	add.w	r9, r4, #26
 8006180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	4543      	cmp	r3, r8
 8006186:	dc09      	bgt.n	800619c <_printf_float+0x264>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	f100 8105 	bmi.w	800639a <_printf_float+0x462>
 8006190:	68e0      	ldr	r0, [r4, #12]
 8006192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006194:	4298      	cmp	r0, r3
 8006196:	bfb8      	it	lt
 8006198:	4618      	movlt	r0, r3
 800619a:	e730      	b.n	8005ffe <_printf_float+0xc6>
 800619c:	2301      	movs	r3, #1
 800619e:	464a      	mov	r2, r9
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af27 	beq.w	8005ffa <_printf_float+0xc2>
 80061ac:	f108 0801 	add.w	r8, r8, #1
 80061b0:	e7e6      	b.n	8006180 <_printf_float+0x248>
 80061b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dc39      	bgt.n	800622c <_printf_float+0x2f4>
 80061b8:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <_printf_float+0x2f0>)
 80061ba:	2301      	movs	r3, #1
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	f43f af19 	beq.w	8005ffa <_printf_float+0xc2>
 80061c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061cc:	4313      	orrs	r3, r2
 80061ce:	d102      	bne.n	80061d6 <_printf_float+0x29e>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	07d9      	lsls	r1, r3, #31
 80061d4:	d5d8      	bpl.n	8006188 <_printf_float+0x250>
 80061d6:	ee18 3a10 	vmov	r3, s16
 80061da:	4652      	mov	r2, sl
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f af09 	beq.w	8005ffa <_printf_float+0xc2>
 80061e8:	f04f 0900 	mov.w	r9, #0
 80061ec:	f104 0a1a 	add.w	sl, r4, #26
 80061f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f2:	425b      	negs	r3, r3
 80061f4:	454b      	cmp	r3, r9
 80061f6:	dc01      	bgt.n	80061fc <_printf_float+0x2c4>
 80061f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061fa:	e792      	b.n	8006122 <_printf_float+0x1ea>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4652      	mov	r2, sl
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	f43f aef7 	beq.w	8005ffa <_printf_float+0xc2>
 800620c:	f109 0901 	add.w	r9, r9, #1
 8006210:	e7ee      	b.n	80061f0 <_printf_float+0x2b8>
 8006212:	bf00      	nop
 8006214:	7fefffff 	.word	0x7fefffff
 8006218:	0800a1fc 	.word	0x0800a1fc
 800621c:	0800a200 	.word	0x0800a200
 8006220:	0800a208 	.word	0x0800a208
 8006224:	0800a204 	.word	0x0800a204
 8006228:	0800a20c 	.word	0x0800a20c
 800622c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800622e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006230:	429a      	cmp	r2, r3
 8006232:	bfa8      	it	ge
 8006234:	461a      	movge	r2, r3
 8006236:	2a00      	cmp	r2, #0
 8006238:	4691      	mov	r9, r2
 800623a:	dc37      	bgt.n	80062ac <_printf_float+0x374>
 800623c:	f04f 0b00 	mov.w	fp, #0
 8006240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006244:	f104 021a 	add.w	r2, r4, #26
 8006248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800624a:	9305      	str	r3, [sp, #20]
 800624c:	eba3 0309 	sub.w	r3, r3, r9
 8006250:	455b      	cmp	r3, fp
 8006252:	dc33      	bgt.n	80062bc <_printf_float+0x384>
 8006254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006258:	429a      	cmp	r2, r3
 800625a:	db3b      	blt.n	80062d4 <_printf_float+0x39c>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	07da      	lsls	r2, r3, #31
 8006260:	d438      	bmi.n	80062d4 <_printf_float+0x39c>
 8006262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006264:	9a05      	ldr	r2, [sp, #20]
 8006266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006268:	1a9a      	subs	r2, r3, r2
 800626a:	eba3 0901 	sub.w	r9, r3, r1
 800626e:	4591      	cmp	r9, r2
 8006270:	bfa8      	it	ge
 8006272:	4691      	movge	r9, r2
 8006274:	f1b9 0f00 	cmp.w	r9, #0
 8006278:	dc35      	bgt.n	80062e6 <_printf_float+0x3ae>
 800627a:	f04f 0800 	mov.w	r8, #0
 800627e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006282:	f104 0a1a 	add.w	sl, r4, #26
 8006286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	eba3 0309 	sub.w	r3, r3, r9
 8006290:	4543      	cmp	r3, r8
 8006292:	f77f af79 	ble.w	8006188 <_printf_float+0x250>
 8006296:	2301      	movs	r3, #1
 8006298:	4652      	mov	r2, sl
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f aeaa 	beq.w	8005ffa <_printf_float+0xc2>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	e7ec      	b.n	8006286 <_printf_float+0x34e>
 80062ac:	4613      	mov	r3, r2
 80062ae:	4631      	mov	r1, r6
 80062b0:	4642      	mov	r2, r8
 80062b2:	4628      	mov	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	d1c0      	bne.n	800623c <_printf_float+0x304>
 80062ba:	e69e      	b.n	8005ffa <_printf_float+0xc2>
 80062bc:	2301      	movs	r3, #1
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	9205      	str	r2, [sp, #20]
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	f43f ae97 	beq.w	8005ffa <_printf_float+0xc2>
 80062cc:	9a05      	ldr	r2, [sp, #20]
 80062ce:	f10b 0b01 	add.w	fp, fp, #1
 80062d2:	e7b9      	b.n	8006248 <_printf_float+0x310>
 80062d4:	ee18 3a10 	vmov	r3, s16
 80062d8:	4652      	mov	r2, sl
 80062da:	4631      	mov	r1, r6
 80062dc:	4628      	mov	r0, r5
 80062de:	47b8      	blx	r7
 80062e0:	3001      	adds	r0, #1
 80062e2:	d1be      	bne.n	8006262 <_printf_float+0x32a>
 80062e4:	e689      	b.n	8005ffa <_printf_float+0xc2>
 80062e6:	9a05      	ldr	r2, [sp, #20]
 80062e8:	464b      	mov	r3, r9
 80062ea:	4442      	add	r2, r8
 80062ec:	4631      	mov	r1, r6
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	d1c1      	bne.n	800627a <_printf_float+0x342>
 80062f6:	e680      	b.n	8005ffa <_printf_float+0xc2>
 80062f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fa:	2a01      	cmp	r2, #1
 80062fc:	dc01      	bgt.n	8006302 <_printf_float+0x3ca>
 80062fe:	07db      	lsls	r3, r3, #31
 8006300:	d538      	bpl.n	8006374 <_printf_float+0x43c>
 8006302:	2301      	movs	r3, #1
 8006304:	4642      	mov	r2, r8
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	f43f ae74 	beq.w	8005ffa <_printf_float+0xc2>
 8006312:	ee18 3a10 	vmov	r3, s16
 8006316:	4652      	mov	r2, sl
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	f43f ae6b 	beq.w	8005ffa <_printf_float+0xc2>
 8006324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	f7fa fbd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006330:	b9d8      	cbnz	r0, 800636a <_printf_float+0x432>
 8006332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006334:	f108 0201 	add.w	r2, r8, #1
 8006338:	3b01      	subs	r3, #1
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	d10e      	bne.n	8006362 <_printf_float+0x42a>
 8006344:	e659      	b.n	8005ffa <_printf_float+0xc2>
 8006346:	2301      	movs	r3, #1
 8006348:	4652      	mov	r2, sl
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	f43f ae52 	beq.w	8005ffa <_printf_float+0xc2>
 8006356:	f108 0801 	add.w	r8, r8, #1
 800635a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635c:	3b01      	subs	r3, #1
 800635e:	4543      	cmp	r3, r8
 8006360:	dcf1      	bgt.n	8006346 <_printf_float+0x40e>
 8006362:	464b      	mov	r3, r9
 8006364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006368:	e6dc      	b.n	8006124 <_printf_float+0x1ec>
 800636a:	f04f 0800 	mov.w	r8, #0
 800636e:	f104 0a1a 	add.w	sl, r4, #26
 8006372:	e7f2      	b.n	800635a <_printf_float+0x422>
 8006374:	2301      	movs	r3, #1
 8006376:	4642      	mov	r2, r8
 8006378:	e7df      	b.n	800633a <_printf_float+0x402>
 800637a:	2301      	movs	r3, #1
 800637c:	464a      	mov	r2, r9
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	f43f ae38 	beq.w	8005ffa <_printf_float+0xc2>
 800638a:	f108 0801 	add.w	r8, r8, #1
 800638e:	68e3      	ldr	r3, [r4, #12]
 8006390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006392:	1a5b      	subs	r3, r3, r1
 8006394:	4543      	cmp	r3, r8
 8006396:	dcf0      	bgt.n	800637a <_printf_float+0x442>
 8006398:	e6fa      	b.n	8006190 <_printf_float+0x258>
 800639a:	f04f 0800 	mov.w	r8, #0
 800639e:	f104 0919 	add.w	r9, r4, #25
 80063a2:	e7f4      	b.n	800638e <_printf_float+0x456>

080063a4 <_printf_common>:
 80063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	4616      	mov	r6, r2
 80063aa:	4699      	mov	r9, r3
 80063ac:	688a      	ldr	r2, [r1, #8]
 80063ae:	690b      	ldr	r3, [r1, #16]
 80063b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bfb8      	it	lt
 80063b8:	4613      	movlt	r3, r2
 80063ba:	6033      	str	r3, [r6, #0]
 80063bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063c0:	4607      	mov	r7, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	b10a      	cbz	r2, 80063ca <_printf_common+0x26>
 80063c6:	3301      	adds	r3, #1
 80063c8:	6033      	str	r3, [r6, #0]
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	0699      	lsls	r1, r3, #26
 80063ce:	bf42      	ittt	mi
 80063d0:	6833      	ldrmi	r3, [r6, #0]
 80063d2:	3302      	addmi	r3, #2
 80063d4:	6033      	strmi	r3, [r6, #0]
 80063d6:	6825      	ldr	r5, [r4, #0]
 80063d8:	f015 0506 	ands.w	r5, r5, #6
 80063dc:	d106      	bne.n	80063ec <_printf_common+0x48>
 80063de:	f104 0a19 	add.w	sl, r4, #25
 80063e2:	68e3      	ldr	r3, [r4, #12]
 80063e4:	6832      	ldr	r2, [r6, #0]
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	dc26      	bgt.n	800643a <_printf_common+0x96>
 80063ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063f0:	1e13      	subs	r3, r2, #0
 80063f2:	6822      	ldr	r2, [r4, #0]
 80063f4:	bf18      	it	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	0692      	lsls	r2, r2, #26
 80063fa:	d42b      	bmi.n	8006454 <_printf_common+0xb0>
 80063fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006400:	4649      	mov	r1, r9
 8006402:	4638      	mov	r0, r7
 8006404:	47c0      	blx	r8
 8006406:	3001      	adds	r0, #1
 8006408:	d01e      	beq.n	8006448 <_printf_common+0xa4>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	68e5      	ldr	r5, [r4, #12]
 800640e:	6832      	ldr	r2, [r6, #0]
 8006410:	f003 0306 	and.w	r3, r3, #6
 8006414:	2b04      	cmp	r3, #4
 8006416:	bf08      	it	eq
 8006418:	1aad      	subeq	r5, r5, r2
 800641a:	68a3      	ldr	r3, [r4, #8]
 800641c:	6922      	ldr	r2, [r4, #16]
 800641e:	bf0c      	ite	eq
 8006420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006424:	2500      	movne	r5, #0
 8006426:	4293      	cmp	r3, r2
 8006428:	bfc4      	itt	gt
 800642a:	1a9b      	subgt	r3, r3, r2
 800642c:	18ed      	addgt	r5, r5, r3
 800642e:	2600      	movs	r6, #0
 8006430:	341a      	adds	r4, #26
 8006432:	42b5      	cmp	r5, r6
 8006434:	d11a      	bne.n	800646c <_printf_common+0xc8>
 8006436:	2000      	movs	r0, #0
 8006438:	e008      	b.n	800644c <_printf_common+0xa8>
 800643a:	2301      	movs	r3, #1
 800643c:	4652      	mov	r2, sl
 800643e:	4649      	mov	r1, r9
 8006440:	4638      	mov	r0, r7
 8006442:	47c0      	blx	r8
 8006444:	3001      	adds	r0, #1
 8006446:	d103      	bne.n	8006450 <_printf_common+0xac>
 8006448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006450:	3501      	adds	r5, #1
 8006452:	e7c6      	b.n	80063e2 <_printf_common+0x3e>
 8006454:	18e1      	adds	r1, r4, r3
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	2030      	movs	r0, #48	; 0x30
 800645a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800645e:	4422      	add	r2, r4
 8006460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006468:	3302      	adds	r3, #2
 800646a:	e7c7      	b.n	80063fc <_printf_common+0x58>
 800646c:	2301      	movs	r3, #1
 800646e:	4622      	mov	r2, r4
 8006470:	4649      	mov	r1, r9
 8006472:	4638      	mov	r0, r7
 8006474:	47c0      	blx	r8
 8006476:	3001      	adds	r0, #1
 8006478:	d0e6      	beq.n	8006448 <_printf_common+0xa4>
 800647a:	3601      	adds	r6, #1
 800647c:	e7d9      	b.n	8006432 <_printf_common+0x8e>
	...

08006480 <_printf_i>:
 8006480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	7e0f      	ldrb	r7, [r1, #24]
 8006486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006488:	2f78      	cmp	r7, #120	; 0x78
 800648a:	4691      	mov	r9, r2
 800648c:	4680      	mov	r8, r0
 800648e:	460c      	mov	r4, r1
 8006490:	469a      	mov	sl, r3
 8006492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006496:	d807      	bhi.n	80064a8 <_printf_i+0x28>
 8006498:	2f62      	cmp	r7, #98	; 0x62
 800649a:	d80a      	bhi.n	80064b2 <_printf_i+0x32>
 800649c:	2f00      	cmp	r7, #0
 800649e:	f000 80d8 	beq.w	8006652 <_printf_i+0x1d2>
 80064a2:	2f58      	cmp	r7, #88	; 0x58
 80064a4:	f000 80a3 	beq.w	80065ee <_printf_i+0x16e>
 80064a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064b0:	e03a      	b.n	8006528 <_printf_i+0xa8>
 80064b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064b6:	2b15      	cmp	r3, #21
 80064b8:	d8f6      	bhi.n	80064a8 <_printf_i+0x28>
 80064ba:	a101      	add	r1, pc, #4	; (adr r1, 80064c0 <_printf_i+0x40>)
 80064bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064c0:	08006519 	.word	0x08006519
 80064c4:	0800652d 	.word	0x0800652d
 80064c8:	080064a9 	.word	0x080064a9
 80064cc:	080064a9 	.word	0x080064a9
 80064d0:	080064a9 	.word	0x080064a9
 80064d4:	080064a9 	.word	0x080064a9
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	080064a9 	.word	0x080064a9
 80064e0:	080064a9 	.word	0x080064a9
 80064e4:	080064a9 	.word	0x080064a9
 80064e8:	080064a9 	.word	0x080064a9
 80064ec:	08006639 	.word	0x08006639
 80064f0:	0800655d 	.word	0x0800655d
 80064f4:	0800661b 	.word	0x0800661b
 80064f8:	080064a9 	.word	0x080064a9
 80064fc:	080064a9 	.word	0x080064a9
 8006500:	0800665b 	.word	0x0800665b
 8006504:	080064a9 	.word	0x080064a9
 8006508:	0800655d 	.word	0x0800655d
 800650c:	080064a9 	.word	0x080064a9
 8006510:	080064a9 	.word	0x080064a9
 8006514:	08006623 	.word	0x08006623
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	1d1a      	adds	r2, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	602a      	str	r2, [r5, #0]
 8006520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006528:	2301      	movs	r3, #1
 800652a:	e0a3      	b.n	8006674 <_printf_i+0x1f4>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	6829      	ldr	r1, [r5, #0]
 8006530:	0606      	lsls	r6, r0, #24
 8006532:	f101 0304 	add.w	r3, r1, #4
 8006536:	d50a      	bpl.n	800654e <_printf_i+0xce>
 8006538:	680e      	ldr	r6, [r1, #0]
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	2e00      	cmp	r6, #0
 800653e:	da03      	bge.n	8006548 <_printf_i+0xc8>
 8006540:	232d      	movs	r3, #45	; 0x2d
 8006542:	4276      	negs	r6, r6
 8006544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006548:	485e      	ldr	r0, [pc, #376]	; (80066c4 <_printf_i+0x244>)
 800654a:	230a      	movs	r3, #10
 800654c:	e019      	b.n	8006582 <_printf_i+0x102>
 800654e:	680e      	ldr	r6, [r1, #0]
 8006550:	602b      	str	r3, [r5, #0]
 8006552:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006556:	bf18      	it	ne
 8006558:	b236      	sxthne	r6, r6
 800655a:	e7ef      	b.n	800653c <_printf_i+0xbc>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	6820      	ldr	r0, [r4, #0]
 8006560:	1d19      	adds	r1, r3, #4
 8006562:	6029      	str	r1, [r5, #0]
 8006564:	0601      	lsls	r1, r0, #24
 8006566:	d501      	bpl.n	800656c <_printf_i+0xec>
 8006568:	681e      	ldr	r6, [r3, #0]
 800656a:	e002      	b.n	8006572 <_printf_i+0xf2>
 800656c:	0646      	lsls	r6, r0, #25
 800656e:	d5fb      	bpl.n	8006568 <_printf_i+0xe8>
 8006570:	881e      	ldrh	r6, [r3, #0]
 8006572:	4854      	ldr	r0, [pc, #336]	; (80066c4 <_printf_i+0x244>)
 8006574:	2f6f      	cmp	r7, #111	; 0x6f
 8006576:	bf0c      	ite	eq
 8006578:	2308      	moveq	r3, #8
 800657a:	230a      	movne	r3, #10
 800657c:	2100      	movs	r1, #0
 800657e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006582:	6865      	ldr	r5, [r4, #4]
 8006584:	60a5      	str	r5, [r4, #8]
 8006586:	2d00      	cmp	r5, #0
 8006588:	bfa2      	ittt	ge
 800658a:	6821      	ldrge	r1, [r4, #0]
 800658c:	f021 0104 	bicge.w	r1, r1, #4
 8006590:	6021      	strge	r1, [r4, #0]
 8006592:	b90e      	cbnz	r6, 8006598 <_printf_i+0x118>
 8006594:	2d00      	cmp	r5, #0
 8006596:	d04d      	beq.n	8006634 <_printf_i+0x1b4>
 8006598:	4615      	mov	r5, r2
 800659a:	fbb6 f1f3 	udiv	r1, r6, r3
 800659e:	fb03 6711 	mls	r7, r3, r1, r6
 80065a2:	5dc7      	ldrb	r7, [r0, r7]
 80065a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065a8:	4637      	mov	r7, r6
 80065aa:	42bb      	cmp	r3, r7
 80065ac:	460e      	mov	r6, r1
 80065ae:	d9f4      	bls.n	800659a <_printf_i+0x11a>
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d10b      	bne.n	80065cc <_printf_i+0x14c>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	07de      	lsls	r6, r3, #31
 80065b8:	d508      	bpl.n	80065cc <_printf_i+0x14c>
 80065ba:	6923      	ldr	r3, [r4, #16]
 80065bc:	6861      	ldr	r1, [r4, #4]
 80065be:	4299      	cmp	r1, r3
 80065c0:	bfde      	ittt	le
 80065c2:	2330      	movle	r3, #48	; 0x30
 80065c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065cc:	1b52      	subs	r2, r2, r5
 80065ce:	6122      	str	r2, [r4, #16]
 80065d0:	f8cd a000 	str.w	sl, [sp]
 80065d4:	464b      	mov	r3, r9
 80065d6:	aa03      	add	r2, sp, #12
 80065d8:	4621      	mov	r1, r4
 80065da:	4640      	mov	r0, r8
 80065dc:	f7ff fee2 	bl	80063a4 <_printf_common>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d14c      	bne.n	800667e <_printf_i+0x1fe>
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065e8:	b004      	add	sp, #16
 80065ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ee:	4835      	ldr	r0, [pc, #212]	; (80066c4 <_printf_i+0x244>)
 80065f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065f4:	6829      	ldr	r1, [r5, #0]
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80065fc:	6029      	str	r1, [r5, #0]
 80065fe:	061d      	lsls	r5, r3, #24
 8006600:	d514      	bpl.n	800662c <_printf_i+0x1ac>
 8006602:	07df      	lsls	r7, r3, #31
 8006604:	bf44      	itt	mi
 8006606:	f043 0320 	orrmi.w	r3, r3, #32
 800660a:	6023      	strmi	r3, [r4, #0]
 800660c:	b91e      	cbnz	r6, 8006616 <_printf_i+0x196>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	f023 0320 	bic.w	r3, r3, #32
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	2310      	movs	r3, #16
 8006618:	e7b0      	b.n	800657c <_printf_i+0xfc>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	f043 0320 	orr.w	r3, r3, #32
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	2378      	movs	r3, #120	; 0x78
 8006624:	4828      	ldr	r0, [pc, #160]	; (80066c8 <_printf_i+0x248>)
 8006626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800662a:	e7e3      	b.n	80065f4 <_printf_i+0x174>
 800662c:	0659      	lsls	r1, r3, #25
 800662e:	bf48      	it	mi
 8006630:	b2b6      	uxthmi	r6, r6
 8006632:	e7e6      	b.n	8006602 <_printf_i+0x182>
 8006634:	4615      	mov	r5, r2
 8006636:	e7bb      	b.n	80065b0 <_printf_i+0x130>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	6826      	ldr	r6, [r4, #0]
 800663c:	6961      	ldr	r1, [r4, #20]
 800663e:	1d18      	adds	r0, r3, #4
 8006640:	6028      	str	r0, [r5, #0]
 8006642:	0635      	lsls	r5, r6, #24
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	d501      	bpl.n	800664c <_printf_i+0x1cc>
 8006648:	6019      	str	r1, [r3, #0]
 800664a:	e002      	b.n	8006652 <_printf_i+0x1d2>
 800664c:	0670      	lsls	r0, r6, #25
 800664e:	d5fb      	bpl.n	8006648 <_printf_i+0x1c8>
 8006650:	8019      	strh	r1, [r3, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	6123      	str	r3, [r4, #16]
 8006656:	4615      	mov	r5, r2
 8006658:	e7ba      	b.n	80065d0 <_printf_i+0x150>
 800665a:	682b      	ldr	r3, [r5, #0]
 800665c:	1d1a      	adds	r2, r3, #4
 800665e:	602a      	str	r2, [r5, #0]
 8006660:	681d      	ldr	r5, [r3, #0]
 8006662:	6862      	ldr	r2, [r4, #4]
 8006664:	2100      	movs	r1, #0
 8006666:	4628      	mov	r0, r5
 8006668:	f7f9 fdc2 	bl	80001f0 <memchr>
 800666c:	b108      	cbz	r0, 8006672 <_printf_i+0x1f2>
 800666e:	1b40      	subs	r0, r0, r5
 8006670:	6060      	str	r0, [r4, #4]
 8006672:	6863      	ldr	r3, [r4, #4]
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	2300      	movs	r3, #0
 8006678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667c:	e7a8      	b.n	80065d0 <_printf_i+0x150>
 800667e:	6923      	ldr	r3, [r4, #16]
 8006680:	462a      	mov	r2, r5
 8006682:	4649      	mov	r1, r9
 8006684:	4640      	mov	r0, r8
 8006686:	47d0      	blx	sl
 8006688:	3001      	adds	r0, #1
 800668a:	d0ab      	beq.n	80065e4 <_printf_i+0x164>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	079b      	lsls	r3, r3, #30
 8006690:	d413      	bmi.n	80066ba <_printf_i+0x23a>
 8006692:	68e0      	ldr	r0, [r4, #12]
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	4298      	cmp	r0, r3
 8006698:	bfb8      	it	lt
 800669a:	4618      	movlt	r0, r3
 800669c:	e7a4      	b.n	80065e8 <_printf_i+0x168>
 800669e:	2301      	movs	r3, #1
 80066a0:	4632      	mov	r2, r6
 80066a2:	4649      	mov	r1, r9
 80066a4:	4640      	mov	r0, r8
 80066a6:	47d0      	blx	sl
 80066a8:	3001      	adds	r0, #1
 80066aa:	d09b      	beq.n	80065e4 <_printf_i+0x164>
 80066ac:	3501      	adds	r5, #1
 80066ae:	68e3      	ldr	r3, [r4, #12]
 80066b0:	9903      	ldr	r1, [sp, #12]
 80066b2:	1a5b      	subs	r3, r3, r1
 80066b4:	42ab      	cmp	r3, r5
 80066b6:	dcf2      	bgt.n	800669e <_printf_i+0x21e>
 80066b8:	e7eb      	b.n	8006692 <_printf_i+0x212>
 80066ba:	2500      	movs	r5, #0
 80066bc:	f104 0619 	add.w	r6, r4, #25
 80066c0:	e7f5      	b.n	80066ae <_printf_i+0x22e>
 80066c2:	bf00      	nop
 80066c4:	0800a20e 	.word	0x0800a20e
 80066c8:	0800a21f 	.word	0x0800a21f

080066cc <siprintf>:
 80066cc:	b40e      	push	{r1, r2, r3}
 80066ce:	b500      	push	{lr}
 80066d0:	b09c      	sub	sp, #112	; 0x70
 80066d2:	ab1d      	add	r3, sp, #116	; 0x74
 80066d4:	9002      	str	r0, [sp, #8]
 80066d6:	9006      	str	r0, [sp, #24]
 80066d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066dc:	4809      	ldr	r0, [pc, #36]	; (8006704 <siprintf+0x38>)
 80066de:	9107      	str	r1, [sp, #28]
 80066e0:	9104      	str	r1, [sp, #16]
 80066e2:	4909      	ldr	r1, [pc, #36]	; (8006708 <siprintf+0x3c>)
 80066e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066e8:	9105      	str	r1, [sp, #20]
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	a902      	add	r1, sp, #8
 80066f0:	f002 fe68 	bl	80093c4 <_svfiprintf_r>
 80066f4:	9b02      	ldr	r3, [sp, #8]
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	b01c      	add	sp, #112	; 0x70
 80066fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006700:	b003      	add	sp, #12
 8006702:	4770      	bx	lr
 8006704:	20000010 	.word	0x20000010
 8006708:	ffff0208 	.word	0xffff0208

0800670c <sulp>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	4604      	mov	r4, r0
 8006710:	460d      	mov	r5, r1
 8006712:	ec45 4b10 	vmov	d0, r4, r5
 8006716:	4616      	mov	r6, r2
 8006718:	f002 fbb2 	bl	8008e80 <__ulp>
 800671c:	ec51 0b10 	vmov	r0, r1, d0
 8006720:	b17e      	cbz	r6, 8006742 <sulp+0x36>
 8006722:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006726:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800672a:	2b00      	cmp	r3, #0
 800672c:	dd09      	ble.n	8006742 <sulp+0x36>
 800672e:	051b      	lsls	r3, r3, #20
 8006730:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006734:	2400      	movs	r4, #0
 8006736:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800673a:	4622      	mov	r2, r4
 800673c:	462b      	mov	r3, r5
 800673e:	f7f9 ff63 	bl	8000608 <__aeabi_dmul>
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	0000      	movs	r0, r0
	...

08006748 <_strtod_l>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	ed2d 8b02 	vpush	{d8}
 8006750:	b09d      	sub	sp, #116	; 0x74
 8006752:	461f      	mov	r7, r3
 8006754:	2300      	movs	r3, #0
 8006756:	9318      	str	r3, [sp, #96]	; 0x60
 8006758:	4ba2      	ldr	r3, [pc, #648]	; (80069e4 <_strtod_l+0x29c>)
 800675a:	9213      	str	r2, [sp, #76]	; 0x4c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	9305      	str	r3, [sp, #20]
 8006760:	4604      	mov	r4, r0
 8006762:	4618      	mov	r0, r3
 8006764:	4688      	mov	r8, r1
 8006766:	f7f9 fd3b 	bl	80001e0 <strlen>
 800676a:	f04f 0a00 	mov.w	sl, #0
 800676e:	4605      	mov	r5, r0
 8006770:	f04f 0b00 	mov.w	fp, #0
 8006774:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	2a2b      	cmp	r2, #43	; 0x2b
 800677e:	d04e      	beq.n	800681e <_strtod_l+0xd6>
 8006780:	d83b      	bhi.n	80067fa <_strtod_l+0xb2>
 8006782:	2a0d      	cmp	r2, #13
 8006784:	d834      	bhi.n	80067f0 <_strtod_l+0xa8>
 8006786:	2a08      	cmp	r2, #8
 8006788:	d834      	bhi.n	80067f4 <_strtod_l+0xac>
 800678a:	2a00      	cmp	r2, #0
 800678c:	d03e      	beq.n	800680c <_strtod_l+0xc4>
 800678e:	2300      	movs	r3, #0
 8006790:	930a      	str	r3, [sp, #40]	; 0x28
 8006792:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006794:	7833      	ldrb	r3, [r6, #0]
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	f040 80b0 	bne.w	80068fc <_strtod_l+0x1b4>
 800679c:	7873      	ldrb	r3, [r6, #1]
 800679e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067a2:	2b58      	cmp	r3, #88	; 0x58
 80067a4:	d168      	bne.n	8006878 <_strtod_l+0x130>
 80067a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	ab18      	add	r3, sp, #96	; 0x60
 80067ac:	9702      	str	r7, [sp, #8]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4a8d      	ldr	r2, [pc, #564]	; (80069e8 <_strtod_l+0x2a0>)
 80067b2:	ab19      	add	r3, sp, #100	; 0x64
 80067b4:	a917      	add	r1, sp, #92	; 0x5c
 80067b6:	4620      	mov	r0, r4
 80067b8:	f001 fcbc 	bl	8008134 <__gethex>
 80067bc:	f010 0707 	ands.w	r7, r0, #7
 80067c0:	4605      	mov	r5, r0
 80067c2:	d005      	beq.n	80067d0 <_strtod_l+0x88>
 80067c4:	2f06      	cmp	r7, #6
 80067c6:	d12c      	bne.n	8006822 <_strtod_l+0xda>
 80067c8:	3601      	adds	r6, #1
 80067ca:	2300      	movs	r3, #0
 80067cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80067ce:	930a      	str	r3, [sp, #40]	; 0x28
 80067d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 8590 	bne.w	80072f8 <_strtod_l+0xbb0>
 80067d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067da:	b1eb      	cbz	r3, 8006818 <_strtod_l+0xd0>
 80067dc:	4652      	mov	r2, sl
 80067de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067e2:	ec43 2b10 	vmov	d0, r2, r3
 80067e6:	b01d      	add	sp, #116	; 0x74
 80067e8:	ecbd 8b02 	vpop	{d8}
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	2a20      	cmp	r2, #32
 80067f2:	d1cc      	bne.n	800678e <_strtod_l+0x46>
 80067f4:	3301      	adds	r3, #1
 80067f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80067f8:	e7be      	b.n	8006778 <_strtod_l+0x30>
 80067fa:	2a2d      	cmp	r2, #45	; 0x2d
 80067fc:	d1c7      	bne.n	800678e <_strtod_l+0x46>
 80067fe:	2201      	movs	r2, #1
 8006800:	920a      	str	r2, [sp, #40]	; 0x28
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	9217      	str	r2, [sp, #92]	; 0x5c
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1c2      	bne.n	8006792 <_strtod_l+0x4a>
 800680c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800680e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 856e 	bne.w	80072f4 <_strtod_l+0xbac>
 8006818:	4652      	mov	r2, sl
 800681a:	465b      	mov	r3, fp
 800681c:	e7e1      	b.n	80067e2 <_strtod_l+0x9a>
 800681e:	2200      	movs	r2, #0
 8006820:	e7ee      	b.n	8006800 <_strtod_l+0xb8>
 8006822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006824:	b13a      	cbz	r2, 8006836 <_strtod_l+0xee>
 8006826:	2135      	movs	r1, #53	; 0x35
 8006828:	a81a      	add	r0, sp, #104	; 0x68
 800682a:	f002 fc34 	bl	8009096 <__copybits>
 800682e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006830:	4620      	mov	r0, r4
 8006832:	f001 fff3 	bl	800881c <_Bfree>
 8006836:	3f01      	subs	r7, #1
 8006838:	2f04      	cmp	r7, #4
 800683a:	d806      	bhi.n	800684a <_strtod_l+0x102>
 800683c:	e8df f007 	tbb	[pc, r7]
 8006840:	1714030a 	.word	0x1714030a
 8006844:	0a          	.byte	0x0a
 8006845:	00          	.byte	0x00
 8006846:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800684a:	0728      	lsls	r0, r5, #28
 800684c:	d5c0      	bpl.n	80067d0 <_strtod_l+0x88>
 800684e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006852:	e7bd      	b.n	80067d0 <_strtod_l+0x88>
 8006854:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006858:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800685a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800685e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006862:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006866:	e7f0      	b.n	800684a <_strtod_l+0x102>
 8006868:	f8df b180 	ldr.w	fp, [pc, #384]	; 80069ec <_strtod_l+0x2a4>
 800686c:	e7ed      	b.n	800684a <_strtod_l+0x102>
 800686e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006872:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006876:	e7e8      	b.n	800684a <_strtod_l+0x102>
 8006878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	9217      	str	r2, [sp, #92]	; 0x5c
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b30      	cmp	r3, #48	; 0x30
 8006882:	d0f9      	beq.n	8006878 <_strtod_l+0x130>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0a3      	beq.n	80067d0 <_strtod_l+0x88>
 8006888:	2301      	movs	r3, #1
 800688a:	f04f 0900 	mov.w	r9, #0
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006892:	9308      	str	r3, [sp, #32]
 8006894:	f8cd 901c 	str.w	r9, [sp, #28]
 8006898:	464f      	mov	r7, r9
 800689a:	220a      	movs	r2, #10
 800689c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800689e:	7806      	ldrb	r6, [r0, #0]
 80068a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80068a4:	b2d9      	uxtb	r1, r3
 80068a6:	2909      	cmp	r1, #9
 80068a8:	d92a      	bls.n	8006900 <_strtod_l+0x1b8>
 80068aa:	9905      	ldr	r1, [sp, #20]
 80068ac:	462a      	mov	r2, r5
 80068ae:	f002 fea3 	bl	80095f8 <strncmp>
 80068b2:	b398      	cbz	r0, 800691c <_strtod_l+0x1d4>
 80068b4:	2000      	movs	r0, #0
 80068b6:	4632      	mov	r2, r6
 80068b8:	463d      	mov	r5, r7
 80068ba:	9005      	str	r0, [sp, #20]
 80068bc:	4603      	mov	r3, r0
 80068be:	2a65      	cmp	r2, #101	; 0x65
 80068c0:	d001      	beq.n	80068c6 <_strtod_l+0x17e>
 80068c2:	2a45      	cmp	r2, #69	; 0x45
 80068c4:	d118      	bne.n	80068f8 <_strtod_l+0x1b0>
 80068c6:	b91d      	cbnz	r5, 80068d0 <_strtod_l+0x188>
 80068c8:	9a04      	ldr	r2, [sp, #16]
 80068ca:	4302      	orrs	r2, r0
 80068cc:	d09e      	beq.n	800680c <_strtod_l+0xc4>
 80068ce:	2500      	movs	r5, #0
 80068d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80068d4:	f108 0201 	add.w	r2, r8, #1
 80068d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80068da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80068de:	2a2b      	cmp	r2, #43	; 0x2b
 80068e0:	d075      	beq.n	80069ce <_strtod_l+0x286>
 80068e2:	2a2d      	cmp	r2, #45	; 0x2d
 80068e4:	d07b      	beq.n	80069de <_strtod_l+0x296>
 80068e6:	f04f 0c00 	mov.w	ip, #0
 80068ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80068ee:	2909      	cmp	r1, #9
 80068f0:	f240 8082 	bls.w	80069f8 <_strtod_l+0x2b0>
 80068f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80068f8:	2600      	movs	r6, #0
 80068fa:	e09d      	b.n	8006a38 <_strtod_l+0x2f0>
 80068fc:	2300      	movs	r3, #0
 80068fe:	e7c4      	b.n	800688a <_strtod_l+0x142>
 8006900:	2f08      	cmp	r7, #8
 8006902:	bfd8      	it	le
 8006904:	9907      	ldrle	r1, [sp, #28]
 8006906:	f100 0001 	add.w	r0, r0, #1
 800690a:	bfda      	itte	le
 800690c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006910:	9307      	strle	r3, [sp, #28]
 8006912:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006916:	3701      	adds	r7, #1
 8006918:	9017      	str	r0, [sp, #92]	; 0x5c
 800691a:	e7bf      	b.n	800689c <_strtod_l+0x154>
 800691c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800691e:	195a      	adds	r2, r3, r5
 8006920:	9217      	str	r2, [sp, #92]	; 0x5c
 8006922:	5d5a      	ldrb	r2, [r3, r5]
 8006924:	2f00      	cmp	r7, #0
 8006926:	d037      	beq.n	8006998 <_strtod_l+0x250>
 8006928:	9005      	str	r0, [sp, #20]
 800692a:	463d      	mov	r5, r7
 800692c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006930:	2b09      	cmp	r3, #9
 8006932:	d912      	bls.n	800695a <_strtod_l+0x212>
 8006934:	2301      	movs	r3, #1
 8006936:	e7c2      	b.n	80068be <_strtod_l+0x176>
 8006938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	9217      	str	r2, [sp, #92]	; 0x5c
 800693e:	785a      	ldrb	r2, [r3, #1]
 8006940:	3001      	adds	r0, #1
 8006942:	2a30      	cmp	r2, #48	; 0x30
 8006944:	d0f8      	beq.n	8006938 <_strtod_l+0x1f0>
 8006946:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800694a:	2b08      	cmp	r3, #8
 800694c:	f200 84d9 	bhi.w	8007302 <_strtod_l+0xbba>
 8006950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006952:	9005      	str	r0, [sp, #20]
 8006954:	2000      	movs	r0, #0
 8006956:	9308      	str	r3, [sp, #32]
 8006958:	4605      	mov	r5, r0
 800695a:	3a30      	subs	r2, #48	; 0x30
 800695c:	f100 0301 	add.w	r3, r0, #1
 8006960:	d014      	beq.n	800698c <_strtod_l+0x244>
 8006962:	9905      	ldr	r1, [sp, #20]
 8006964:	4419      	add	r1, r3
 8006966:	9105      	str	r1, [sp, #20]
 8006968:	462b      	mov	r3, r5
 800696a:	eb00 0e05 	add.w	lr, r0, r5
 800696e:	210a      	movs	r1, #10
 8006970:	4573      	cmp	r3, lr
 8006972:	d113      	bne.n	800699c <_strtod_l+0x254>
 8006974:	182b      	adds	r3, r5, r0
 8006976:	2b08      	cmp	r3, #8
 8006978:	f105 0501 	add.w	r5, r5, #1
 800697c:	4405      	add	r5, r0
 800697e:	dc1c      	bgt.n	80069ba <_strtod_l+0x272>
 8006980:	9907      	ldr	r1, [sp, #28]
 8006982:	230a      	movs	r3, #10
 8006984:	fb03 2301 	mla	r3, r3, r1, r2
 8006988:	9307      	str	r3, [sp, #28]
 800698a:	2300      	movs	r3, #0
 800698c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800698e:	1c51      	adds	r1, r2, #1
 8006990:	9117      	str	r1, [sp, #92]	; 0x5c
 8006992:	7852      	ldrb	r2, [r2, #1]
 8006994:	4618      	mov	r0, r3
 8006996:	e7c9      	b.n	800692c <_strtod_l+0x1e4>
 8006998:	4638      	mov	r0, r7
 800699a:	e7d2      	b.n	8006942 <_strtod_l+0x1fa>
 800699c:	2b08      	cmp	r3, #8
 800699e:	dc04      	bgt.n	80069aa <_strtod_l+0x262>
 80069a0:	9e07      	ldr	r6, [sp, #28]
 80069a2:	434e      	muls	r6, r1
 80069a4:	9607      	str	r6, [sp, #28]
 80069a6:	3301      	adds	r3, #1
 80069a8:	e7e2      	b.n	8006970 <_strtod_l+0x228>
 80069aa:	f103 0c01 	add.w	ip, r3, #1
 80069ae:	f1bc 0f10 	cmp.w	ip, #16
 80069b2:	bfd8      	it	le
 80069b4:	fb01 f909 	mulle.w	r9, r1, r9
 80069b8:	e7f5      	b.n	80069a6 <_strtod_l+0x25e>
 80069ba:	2d10      	cmp	r5, #16
 80069bc:	bfdc      	itt	le
 80069be:	230a      	movle	r3, #10
 80069c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80069c4:	e7e1      	b.n	800698a <_strtod_l+0x242>
 80069c6:	2300      	movs	r3, #0
 80069c8:	9305      	str	r3, [sp, #20]
 80069ca:	2301      	movs	r3, #1
 80069cc:	e77c      	b.n	80068c8 <_strtod_l+0x180>
 80069ce:	f04f 0c00 	mov.w	ip, #0
 80069d2:	f108 0202 	add.w	r2, r8, #2
 80069d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80069d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80069dc:	e785      	b.n	80068ea <_strtod_l+0x1a2>
 80069de:	f04f 0c01 	mov.w	ip, #1
 80069e2:	e7f6      	b.n	80069d2 <_strtod_l+0x28a>
 80069e4:	0800a378 	.word	0x0800a378
 80069e8:	0800a230 	.word	0x0800a230
 80069ec:	7ff00000 	.word	0x7ff00000
 80069f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069f2:	1c51      	adds	r1, r2, #1
 80069f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80069f6:	7852      	ldrb	r2, [r2, #1]
 80069f8:	2a30      	cmp	r2, #48	; 0x30
 80069fa:	d0f9      	beq.n	80069f0 <_strtod_l+0x2a8>
 80069fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a00:	2908      	cmp	r1, #8
 8006a02:	f63f af79 	bhi.w	80068f8 <_strtod_l+0x1b0>
 8006a06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006a0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a0c:	9206      	str	r2, [sp, #24]
 8006a0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a10:	1c51      	adds	r1, r2, #1
 8006a12:	9117      	str	r1, [sp, #92]	; 0x5c
 8006a14:	7852      	ldrb	r2, [r2, #1]
 8006a16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006a1a:	2e09      	cmp	r6, #9
 8006a1c:	d937      	bls.n	8006a8e <_strtod_l+0x346>
 8006a1e:	9e06      	ldr	r6, [sp, #24]
 8006a20:	1b89      	subs	r1, r1, r6
 8006a22:	2908      	cmp	r1, #8
 8006a24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006a28:	dc02      	bgt.n	8006a30 <_strtod_l+0x2e8>
 8006a2a:	4576      	cmp	r6, lr
 8006a2c:	bfa8      	it	ge
 8006a2e:	4676      	movge	r6, lr
 8006a30:	f1bc 0f00 	cmp.w	ip, #0
 8006a34:	d000      	beq.n	8006a38 <_strtod_l+0x2f0>
 8006a36:	4276      	negs	r6, r6
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	d14d      	bne.n	8006ad8 <_strtod_l+0x390>
 8006a3c:	9904      	ldr	r1, [sp, #16]
 8006a3e:	4301      	orrs	r1, r0
 8006a40:	f47f aec6 	bne.w	80067d0 <_strtod_l+0x88>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f47f aee1 	bne.w	800680c <_strtod_l+0xc4>
 8006a4a:	2a69      	cmp	r2, #105	; 0x69
 8006a4c:	d027      	beq.n	8006a9e <_strtod_l+0x356>
 8006a4e:	dc24      	bgt.n	8006a9a <_strtod_l+0x352>
 8006a50:	2a49      	cmp	r2, #73	; 0x49
 8006a52:	d024      	beq.n	8006a9e <_strtod_l+0x356>
 8006a54:	2a4e      	cmp	r2, #78	; 0x4e
 8006a56:	f47f aed9 	bne.w	800680c <_strtod_l+0xc4>
 8006a5a:	499f      	ldr	r1, [pc, #636]	; (8006cd8 <_strtod_l+0x590>)
 8006a5c:	a817      	add	r0, sp, #92	; 0x5c
 8006a5e:	f001 fdc1 	bl	80085e4 <__match>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	f43f aed2 	beq.w	800680c <_strtod_l+0xc4>
 8006a68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b28      	cmp	r3, #40	; 0x28
 8006a6e:	d12d      	bne.n	8006acc <_strtod_l+0x384>
 8006a70:	499a      	ldr	r1, [pc, #616]	; (8006cdc <_strtod_l+0x594>)
 8006a72:	aa1a      	add	r2, sp, #104	; 0x68
 8006a74:	a817      	add	r0, sp, #92	; 0x5c
 8006a76:	f001 fdc9 	bl	800860c <__hexnan>
 8006a7a:	2805      	cmp	r0, #5
 8006a7c:	d126      	bne.n	8006acc <_strtod_l+0x384>
 8006a7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006a84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a8c:	e6a0      	b.n	80067d0 <_strtod_l+0x88>
 8006a8e:	210a      	movs	r1, #10
 8006a90:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006a94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006a98:	e7b9      	b.n	8006a0e <_strtod_l+0x2c6>
 8006a9a:	2a6e      	cmp	r2, #110	; 0x6e
 8006a9c:	e7db      	b.n	8006a56 <_strtod_l+0x30e>
 8006a9e:	4990      	ldr	r1, [pc, #576]	; (8006ce0 <_strtod_l+0x598>)
 8006aa0:	a817      	add	r0, sp, #92	; 0x5c
 8006aa2:	f001 fd9f 	bl	80085e4 <__match>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f43f aeb0 	beq.w	800680c <_strtod_l+0xc4>
 8006aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aae:	498d      	ldr	r1, [pc, #564]	; (8006ce4 <_strtod_l+0x59c>)
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	a817      	add	r0, sp, #92	; 0x5c
 8006ab4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ab6:	f001 fd95 	bl	80085e4 <__match>
 8006aba:	b910      	cbnz	r0, 8006ac2 <_strtod_l+0x37a>
 8006abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006abe:	3301      	adds	r3, #1
 8006ac0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ac2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006cf4 <_strtod_l+0x5ac>
 8006ac6:	f04f 0a00 	mov.w	sl, #0
 8006aca:	e681      	b.n	80067d0 <_strtod_l+0x88>
 8006acc:	4886      	ldr	r0, [pc, #536]	; (8006ce8 <_strtod_l+0x5a0>)
 8006ace:	f002 fd7b 	bl	80095c8 <nan>
 8006ad2:	ec5b ab10 	vmov	sl, fp, d0
 8006ad6:	e67b      	b.n	80067d0 <_strtod_l+0x88>
 8006ad8:	9b05      	ldr	r3, [sp, #20]
 8006ada:	9807      	ldr	r0, [sp, #28]
 8006adc:	1af3      	subs	r3, r6, r3
 8006ade:	2f00      	cmp	r7, #0
 8006ae0:	bf08      	it	eq
 8006ae2:	462f      	moveq	r7, r5
 8006ae4:	2d10      	cmp	r5, #16
 8006ae6:	9306      	str	r3, [sp, #24]
 8006ae8:	46a8      	mov	r8, r5
 8006aea:	bfa8      	it	ge
 8006aec:	f04f 0810 	movge.w	r8, #16
 8006af0:	f7f9 fd10 	bl	8000514 <__aeabi_ui2d>
 8006af4:	2d09      	cmp	r5, #9
 8006af6:	4682      	mov	sl, r0
 8006af8:	468b      	mov	fp, r1
 8006afa:	dd13      	ble.n	8006b24 <_strtod_l+0x3dc>
 8006afc:	4b7b      	ldr	r3, [pc, #492]	; (8006cec <_strtod_l+0x5a4>)
 8006afe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006b02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b06:	f7f9 fd7f 	bl	8000608 <__aeabi_dmul>
 8006b0a:	4682      	mov	sl, r0
 8006b0c:	4648      	mov	r0, r9
 8006b0e:	468b      	mov	fp, r1
 8006b10:	f7f9 fd00 	bl	8000514 <__aeabi_ui2d>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4650      	mov	r0, sl
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	f7f9 fbbe 	bl	800029c <__adddf3>
 8006b20:	4682      	mov	sl, r0
 8006b22:	468b      	mov	fp, r1
 8006b24:	2d0f      	cmp	r5, #15
 8006b26:	dc38      	bgt.n	8006b9a <_strtod_l+0x452>
 8006b28:	9b06      	ldr	r3, [sp, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f43f ae50 	beq.w	80067d0 <_strtod_l+0x88>
 8006b30:	dd24      	ble.n	8006b7c <_strtod_l+0x434>
 8006b32:	2b16      	cmp	r3, #22
 8006b34:	dc0b      	bgt.n	8006b4e <_strtod_l+0x406>
 8006b36:	496d      	ldr	r1, [pc, #436]	; (8006cec <_strtod_l+0x5a4>)
 8006b38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b40:	4652      	mov	r2, sl
 8006b42:	465b      	mov	r3, fp
 8006b44:	f7f9 fd60 	bl	8000608 <__aeabi_dmul>
 8006b48:	4682      	mov	sl, r0
 8006b4a:	468b      	mov	fp, r1
 8006b4c:	e640      	b.n	80067d0 <_strtod_l+0x88>
 8006b4e:	9a06      	ldr	r2, [sp, #24]
 8006b50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006b54:	4293      	cmp	r3, r2
 8006b56:	db20      	blt.n	8006b9a <_strtod_l+0x452>
 8006b58:	4c64      	ldr	r4, [pc, #400]	; (8006cec <_strtod_l+0x5a4>)
 8006b5a:	f1c5 050f 	rsb	r5, r5, #15
 8006b5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b62:	4652      	mov	r2, sl
 8006b64:	465b      	mov	r3, fp
 8006b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b6a:	f7f9 fd4d 	bl	8000608 <__aeabi_dmul>
 8006b6e:	9b06      	ldr	r3, [sp, #24]
 8006b70:	1b5d      	subs	r5, r3, r5
 8006b72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b7a:	e7e3      	b.n	8006b44 <_strtod_l+0x3fc>
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	3316      	adds	r3, #22
 8006b80:	db0b      	blt.n	8006b9a <_strtod_l+0x452>
 8006b82:	9b05      	ldr	r3, [sp, #20]
 8006b84:	1b9e      	subs	r6, r3, r6
 8006b86:	4b59      	ldr	r3, [pc, #356]	; (8006cec <_strtod_l+0x5a4>)
 8006b88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006b8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b90:	4650      	mov	r0, sl
 8006b92:	4659      	mov	r1, fp
 8006b94:	f7f9 fe62 	bl	800085c <__aeabi_ddiv>
 8006b98:	e7d6      	b.n	8006b48 <_strtod_l+0x400>
 8006b9a:	9b06      	ldr	r3, [sp, #24]
 8006b9c:	eba5 0808 	sub.w	r8, r5, r8
 8006ba0:	4498      	add	r8, r3
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	dd74      	ble.n	8006c92 <_strtod_l+0x54a>
 8006ba8:	f018 030f 	ands.w	r3, r8, #15
 8006bac:	d00a      	beq.n	8006bc4 <_strtod_l+0x47c>
 8006bae:	494f      	ldr	r1, [pc, #316]	; (8006cec <_strtod_l+0x5a4>)
 8006bb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	465b      	mov	r3, fp
 8006bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bbc:	f7f9 fd24 	bl	8000608 <__aeabi_dmul>
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	468b      	mov	fp, r1
 8006bc4:	f038 080f 	bics.w	r8, r8, #15
 8006bc8:	d04f      	beq.n	8006c6a <_strtod_l+0x522>
 8006bca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006bce:	dd22      	ble.n	8006c16 <_strtod_l+0x4ce>
 8006bd0:	2500      	movs	r5, #0
 8006bd2:	462e      	mov	r6, r5
 8006bd4:	9507      	str	r5, [sp, #28]
 8006bd6:	9505      	str	r5, [sp, #20]
 8006bd8:	2322      	movs	r3, #34	; 0x22
 8006bda:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006cf4 <_strtod_l+0x5ac>
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	f04f 0a00 	mov.w	sl, #0
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f43f adf2 	beq.w	80067d0 <_strtod_l+0x88>
 8006bec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f001 fe14 	bl	800881c <_Bfree>
 8006bf4:	9905      	ldr	r1, [sp, #20]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f001 fe10 	bl	800881c <_Bfree>
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f001 fe0c 	bl	800881c <_Bfree>
 8006c04:	9907      	ldr	r1, [sp, #28]
 8006c06:	4620      	mov	r0, r4
 8006c08:	f001 fe08 	bl	800881c <_Bfree>
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f001 fe04 	bl	800881c <_Bfree>
 8006c14:	e5dc      	b.n	80067d0 <_strtod_l+0x88>
 8006c16:	4b36      	ldr	r3, [pc, #216]	; (8006cf0 <_strtod_l+0x5a8>)
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006c20:	4650      	mov	r0, sl
 8006c22:	4659      	mov	r1, fp
 8006c24:	4699      	mov	r9, r3
 8006c26:	f1b8 0f01 	cmp.w	r8, #1
 8006c2a:	dc21      	bgt.n	8006c70 <_strtod_l+0x528>
 8006c2c:	b10b      	cbz	r3, 8006c32 <_strtod_l+0x4ea>
 8006c2e:	4682      	mov	sl, r0
 8006c30:	468b      	mov	fp, r1
 8006c32:	4b2f      	ldr	r3, [pc, #188]	; (8006cf0 <_strtod_l+0x5a8>)
 8006c34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006c38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	465b      	mov	r3, fp
 8006c40:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006c44:	f7f9 fce0 	bl	8000608 <__aeabi_dmul>
 8006c48:	4b2a      	ldr	r3, [pc, #168]	; (8006cf4 <_strtod_l+0x5ac>)
 8006c4a:	460a      	mov	r2, r1
 8006c4c:	400b      	ands	r3, r1
 8006c4e:	492a      	ldr	r1, [pc, #168]	; (8006cf8 <_strtod_l+0x5b0>)
 8006c50:	428b      	cmp	r3, r1
 8006c52:	4682      	mov	sl, r0
 8006c54:	d8bc      	bhi.n	8006bd0 <_strtod_l+0x488>
 8006c56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006c5a:	428b      	cmp	r3, r1
 8006c5c:	bf86      	itte	hi
 8006c5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006cfc <_strtod_l+0x5b4>
 8006c62:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006c66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	e084      	b.n	8006d7a <_strtod_l+0x632>
 8006c70:	f018 0f01 	tst.w	r8, #1
 8006c74:	d005      	beq.n	8006c82 <_strtod_l+0x53a>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 fcc4 	bl	8000608 <__aeabi_dmul>
 8006c80:	2301      	movs	r3, #1
 8006c82:	9a04      	ldr	r2, [sp, #16]
 8006c84:	3208      	adds	r2, #8
 8006c86:	f109 0901 	add.w	r9, r9, #1
 8006c8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c8e:	9204      	str	r2, [sp, #16]
 8006c90:	e7c9      	b.n	8006c26 <_strtod_l+0x4de>
 8006c92:	d0ea      	beq.n	8006c6a <_strtod_l+0x522>
 8006c94:	f1c8 0800 	rsb	r8, r8, #0
 8006c98:	f018 020f 	ands.w	r2, r8, #15
 8006c9c:	d00a      	beq.n	8006cb4 <_strtod_l+0x56c>
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <_strtod_l+0x5a4>)
 8006ca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ca4:	4650      	mov	r0, sl
 8006ca6:	4659      	mov	r1, fp
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fdd6 	bl	800085c <__aeabi_ddiv>
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	468b      	mov	fp, r1
 8006cb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006cb8:	d0d7      	beq.n	8006c6a <_strtod_l+0x522>
 8006cba:	f1b8 0f1f 	cmp.w	r8, #31
 8006cbe:	dd1f      	ble.n	8006d00 <_strtod_l+0x5b8>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	462e      	mov	r6, r5
 8006cc4:	9507      	str	r5, [sp, #28]
 8006cc6:	9505      	str	r5, [sp, #20]
 8006cc8:	2322      	movs	r3, #34	; 0x22
 8006cca:	f04f 0a00 	mov.w	sl, #0
 8006cce:	f04f 0b00 	mov.w	fp, #0
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	e786      	b.n	8006be4 <_strtod_l+0x49c>
 8006cd6:	bf00      	nop
 8006cd8:	0800a209 	.word	0x0800a209
 8006cdc:	0800a244 	.word	0x0800a244
 8006ce0:	0800a201 	.word	0x0800a201
 8006ce4:	0800a283 	.word	0x0800a283
 8006ce8:	0800a530 	.word	0x0800a530
 8006cec:	0800a410 	.word	0x0800a410
 8006cf0:	0800a3e8 	.word	0x0800a3e8
 8006cf4:	7ff00000 	.word	0x7ff00000
 8006cf8:	7ca00000 	.word	0x7ca00000
 8006cfc:	7fefffff 	.word	0x7fefffff
 8006d00:	f018 0310 	ands.w	r3, r8, #16
 8006d04:	bf18      	it	ne
 8006d06:	236a      	movne	r3, #106	; 0x6a
 8006d08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80070b8 <_strtod_l+0x970>
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	4650      	mov	r0, sl
 8006d10:	4659      	mov	r1, fp
 8006d12:	2300      	movs	r3, #0
 8006d14:	f018 0f01 	tst.w	r8, #1
 8006d18:	d004      	beq.n	8006d24 <_strtod_l+0x5dc>
 8006d1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d1e:	f7f9 fc73 	bl	8000608 <__aeabi_dmul>
 8006d22:	2301      	movs	r3, #1
 8006d24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006d28:	f109 0908 	add.w	r9, r9, #8
 8006d2c:	d1f2      	bne.n	8006d14 <_strtod_l+0x5cc>
 8006d2e:	b10b      	cbz	r3, 8006d34 <_strtod_l+0x5ec>
 8006d30:	4682      	mov	sl, r0
 8006d32:	468b      	mov	fp, r1
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	b1c3      	cbz	r3, 8006d6a <_strtod_l+0x622>
 8006d38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	4659      	mov	r1, fp
 8006d44:	dd11      	ble.n	8006d6a <_strtod_l+0x622>
 8006d46:	2b1f      	cmp	r3, #31
 8006d48:	f340 8124 	ble.w	8006f94 <_strtod_l+0x84c>
 8006d4c:	2b34      	cmp	r3, #52	; 0x34
 8006d4e:	bfde      	ittt	le
 8006d50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006d54:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006d58:	fa03 f202 	lslle.w	r2, r3, r2
 8006d5c:	f04f 0a00 	mov.w	sl, #0
 8006d60:	bfcc      	ite	gt
 8006d62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006d66:	ea02 0b01 	andle.w	fp, r2, r1
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4650      	mov	r0, sl
 8006d70:	4659      	mov	r1, fp
 8006d72:	f7f9 feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d1a2      	bne.n	8006cc0 <_strtod_l+0x578>
 8006d7a:	9b07      	ldr	r3, [sp, #28]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	9908      	ldr	r1, [sp, #32]
 8006d80:	462b      	mov	r3, r5
 8006d82:	463a      	mov	r2, r7
 8006d84:	4620      	mov	r0, r4
 8006d86:	f001 fdb1 	bl	80088ec <__s2b>
 8006d8a:	9007      	str	r0, [sp, #28]
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	f43f af1f 	beq.w	8006bd0 <_strtod_l+0x488>
 8006d92:	9b05      	ldr	r3, [sp, #20]
 8006d94:	1b9e      	subs	r6, r3, r6
 8006d96:	9b06      	ldr	r3, [sp, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfb4      	ite	lt
 8006d9c:	4633      	movlt	r3, r6
 8006d9e:	2300      	movge	r3, #0
 8006da0:	930c      	str	r3, [sp, #48]	; 0x30
 8006da2:	9b06      	ldr	r3, [sp, #24]
 8006da4:	2500      	movs	r5, #0
 8006da6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006daa:	9312      	str	r3, [sp, #72]	; 0x48
 8006dac:	462e      	mov	r6, r5
 8006dae:	9b07      	ldr	r3, [sp, #28]
 8006db0:	4620      	mov	r0, r4
 8006db2:	6859      	ldr	r1, [r3, #4]
 8006db4:	f001 fcf2 	bl	800879c <_Balloc>
 8006db8:	9005      	str	r0, [sp, #20]
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	f43f af0c 	beq.w	8006bd8 <_strtod_l+0x490>
 8006dc0:	9b07      	ldr	r3, [sp, #28]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	3202      	adds	r2, #2
 8006dc6:	f103 010c 	add.w	r1, r3, #12
 8006dca:	0092      	lsls	r2, r2, #2
 8006dcc:	300c      	adds	r0, #12
 8006dce:	f001 fcd7 	bl	8008780 <memcpy>
 8006dd2:	ec4b ab10 	vmov	d0, sl, fp
 8006dd6:	aa1a      	add	r2, sp, #104	; 0x68
 8006dd8:	a919      	add	r1, sp, #100	; 0x64
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f002 f8cc 	bl	8008f78 <__d2b>
 8006de0:	ec4b ab18 	vmov	d8, sl, fp
 8006de4:	9018      	str	r0, [sp, #96]	; 0x60
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f aef6 	beq.w	8006bd8 <_strtod_l+0x490>
 8006dec:	2101      	movs	r1, #1
 8006dee:	4620      	mov	r0, r4
 8006df0:	f001 fe16 	bl	8008a20 <__i2b>
 8006df4:	4606      	mov	r6, r0
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f43f aeee 	beq.w	8006bd8 <_strtod_l+0x490>
 8006dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dfe:	9904      	ldr	r1, [sp, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bfab      	itete	ge
 8006e04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006e06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006e08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006e0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006e0e:	bfac      	ite	ge
 8006e10:	eb03 0902 	addge.w	r9, r3, r2
 8006e14:	1ad7      	sublt	r7, r2, r3
 8006e16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e18:	eba3 0801 	sub.w	r8, r3, r1
 8006e1c:	4490      	add	r8, r2
 8006e1e:	4ba1      	ldr	r3, [pc, #644]	; (80070a4 <_strtod_l+0x95c>)
 8006e20:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006e24:	4598      	cmp	r8, r3
 8006e26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e2a:	f280 80c7 	bge.w	8006fbc <_strtod_l+0x874>
 8006e2e:	eba3 0308 	sub.w	r3, r3, r8
 8006e32:	2b1f      	cmp	r3, #31
 8006e34:	eba2 0203 	sub.w	r2, r2, r3
 8006e38:	f04f 0101 	mov.w	r1, #1
 8006e3c:	f300 80b1 	bgt.w	8006fa2 <_strtod_l+0x85a>
 8006e40:	fa01 f303 	lsl.w	r3, r1, r3
 8006e44:	930d      	str	r3, [sp, #52]	; 0x34
 8006e46:	2300      	movs	r3, #0
 8006e48:	9308      	str	r3, [sp, #32]
 8006e4a:	eb09 0802 	add.w	r8, r9, r2
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	45c1      	cmp	r9, r8
 8006e52:	4417      	add	r7, r2
 8006e54:	441f      	add	r7, r3
 8006e56:	464b      	mov	r3, r9
 8006e58:	bfa8      	it	ge
 8006e5a:	4643      	movge	r3, r8
 8006e5c:	42bb      	cmp	r3, r7
 8006e5e:	bfa8      	it	ge
 8006e60:	463b      	movge	r3, r7
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfc2      	ittt	gt
 8006e66:	eba8 0803 	subgt.w	r8, r8, r3
 8006e6a:	1aff      	subgt	r7, r7, r3
 8006e6c:	eba9 0903 	subgt.w	r9, r9, r3
 8006e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	dd17      	ble.n	8006ea6 <_strtod_l+0x75e>
 8006e76:	4631      	mov	r1, r6
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f001 fe90 	bl	8008ba0 <__pow5mult>
 8006e80:	4606      	mov	r6, r0
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f43f aea8 	beq.w	8006bd8 <_strtod_l+0x490>
 8006e88:	4601      	mov	r1, r0
 8006e8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f001 fddd 	bl	8008a4c <__multiply>
 8006e92:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f43f ae9f 	beq.w	8006bd8 <_strtod_l+0x490>
 8006e9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f001 fcbd 	bl	800881c <_Bfree>
 8006ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea4:	9318      	str	r3, [sp, #96]	; 0x60
 8006ea6:	f1b8 0f00 	cmp.w	r8, #0
 8006eaa:	f300 808c 	bgt.w	8006fc6 <_strtod_l+0x87e>
 8006eae:	9b06      	ldr	r3, [sp, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dd08      	ble.n	8006ec6 <_strtod_l+0x77e>
 8006eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006eb6:	9905      	ldr	r1, [sp, #20]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f001 fe71 	bl	8008ba0 <__pow5mult>
 8006ebe:	9005      	str	r0, [sp, #20]
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f43f ae89 	beq.w	8006bd8 <_strtod_l+0x490>
 8006ec6:	2f00      	cmp	r7, #0
 8006ec8:	dd08      	ble.n	8006edc <_strtod_l+0x794>
 8006eca:	9905      	ldr	r1, [sp, #20]
 8006ecc:	463a      	mov	r2, r7
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f001 fec0 	bl	8008c54 <__lshift>
 8006ed4:	9005      	str	r0, [sp, #20]
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f43f ae7e 	beq.w	8006bd8 <_strtod_l+0x490>
 8006edc:	f1b9 0f00 	cmp.w	r9, #0
 8006ee0:	dd08      	ble.n	8006ef4 <_strtod_l+0x7ac>
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	464a      	mov	r2, r9
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 feb4 	bl	8008c54 <__lshift>
 8006eec:	4606      	mov	r6, r0
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f43f ae72 	beq.w	8006bd8 <_strtod_l+0x490>
 8006ef4:	9a05      	ldr	r2, [sp, #20]
 8006ef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f001 ff37 	bl	8008d6c <__mdiff>
 8006efe:	4605      	mov	r5, r0
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f43f ae69 	beq.w	8006bd8 <_strtod_l+0x490>
 8006f06:	68c3      	ldr	r3, [r0, #12]
 8006f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60c3      	str	r3, [r0, #12]
 8006f0e:	4631      	mov	r1, r6
 8006f10:	f001 ff10 	bl	8008d34 <__mcmp>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	da60      	bge.n	8006fda <_strtod_l+0x892>
 8006f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1a:	ea53 030a 	orrs.w	r3, r3, sl
 8006f1e:	f040 8082 	bne.w	8007026 <_strtod_l+0x8de>
 8006f22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d17d      	bne.n	8007026 <_strtod_l+0x8de>
 8006f2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f2e:	0d1b      	lsrs	r3, r3, #20
 8006f30:	051b      	lsls	r3, r3, #20
 8006f32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f36:	d976      	bls.n	8007026 <_strtod_l+0x8de>
 8006f38:	696b      	ldr	r3, [r5, #20]
 8006f3a:	b913      	cbnz	r3, 8006f42 <_strtod_l+0x7fa>
 8006f3c:	692b      	ldr	r3, [r5, #16]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	dd71      	ble.n	8007026 <_strtod_l+0x8de>
 8006f42:	4629      	mov	r1, r5
 8006f44:	2201      	movs	r2, #1
 8006f46:	4620      	mov	r0, r4
 8006f48:	f001 fe84 	bl	8008c54 <__lshift>
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4605      	mov	r5, r0
 8006f50:	f001 fef0 	bl	8008d34 <__mcmp>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dd66      	ble.n	8007026 <_strtod_l+0x8de>
 8006f58:	9904      	ldr	r1, [sp, #16]
 8006f5a:	4a53      	ldr	r2, [pc, #332]	; (80070a8 <_strtod_l+0x960>)
 8006f5c:	465b      	mov	r3, fp
 8006f5e:	2900      	cmp	r1, #0
 8006f60:	f000 8081 	beq.w	8007066 <_strtod_l+0x91e>
 8006f64:	ea02 010b 	and.w	r1, r2, fp
 8006f68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f6c:	dc7b      	bgt.n	8007066 <_strtod_l+0x91e>
 8006f6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f72:	f77f aea9 	ble.w	8006cc8 <_strtod_l+0x580>
 8006f76:	4b4d      	ldr	r3, [pc, #308]	; (80070ac <_strtod_l+0x964>)
 8006f78:	4650      	mov	r0, sl
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f7f9 fb43 	bl	8000608 <__aeabi_dmul>
 8006f82:	460b      	mov	r3, r1
 8006f84:	4303      	orrs	r3, r0
 8006f86:	bf08      	it	eq
 8006f88:	2322      	moveq	r3, #34	; 0x22
 8006f8a:	4682      	mov	sl, r0
 8006f8c:	468b      	mov	fp, r1
 8006f8e:	bf08      	it	eq
 8006f90:	6023      	streq	r3, [r4, #0]
 8006f92:	e62b      	b.n	8006bec <_strtod_l+0x4a4>
 8006f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	ea03 0a0a 	and.w	sl, r3, sl
 8006fa0:	e6e3      	b.n	8006d6a <_strtod_l+0x622>
 8006fa2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006fa6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006faa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006fae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006fb2:	fa01 f308 	lsl.w	r3, r1, r8
 8006fb6:	9308      	str	r3, [sp, #32]
 8006fb8:	910d      	str	r1, [sp, #52]	; 0x34
 8006fba:	e746      	b.n	8006e4a <_strtod_l+0x702>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9308      	str	r3, [sp, #32]
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8006fc4:	e741      	b.n	8006e4a <_strtod_l+0x702>
 8006fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006fc8:	4642      	mov	r2, r8
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f001 fe42 	bl	8008c54 <__lshift>
 8006fd0:	9018      	str	r0, [sp, #96]	; 0x60
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	f47f af6b 	bne.w	8006eae <_strtod_l+0x766>
 8006fd8:	e5fe      	b.n	8006bd8 <_strtod_l+0x490>
 8006fda:	465f      	mov	r7, fp
 8006fdc:	d16e      	bne.n	80070bc <_strtod_l+0x974>
 8006fde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fe4:	b342      	cbz	r2, 8007038 <_strtod_l+0x8f0>
 8006fe6:	4a32      	ldr	r2, [pc, #200]	; (80070b0 <_strtod_l+0x968>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d128      	bne.n	800703e <_strtod_l+0x8f6>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	4651      	mov	r1, sl
 8006ff0:	b1eb      	cbz	r3, 800702e <_strtod_l+0x8e6>
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <_strtod_l+0x960>)
 8006ff4:	403b      	ands	r3, r7
 8006ff6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ffe:	d819      	bhi.n	8007034 <_strtod_l+0x8ec>
 8007000:	0d1b      	lsrs	r3, r3, #20
 8007002:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	4299      	cmp	r1, r3
 800700c:	d117      	bne.n	800703e <_strtod_l+0x8f6>
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <_strtod_l+0x96c>)
 8007010:	429f      	cmp	r7, r3
 8007012:	d102      	bne.n	800701a <_strtod_l+0x8d2>
 8007014:	3101      	adds	r1, #1
 8007016:	f43f addf 	beq.w	8006bd8 <_strtod_l+0x490>
 800701a:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <_strtod_l+0x960>)
 800701c:	403b      	ands	r3, r7
 800701e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007022:	f04f 0a00 	mov.w	sl, #0
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1a4      	bne.n	8006f76 <_strtod_l+0x82e>
 800702c:	e5de      	b.n	8006bec <_strtod_l+0x4a4>
 800702e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007032:	e7ea      	b.n	800700a <_strtod_l+0x8c2>
 8007034:	4613      	mov	r3, r2
 8007036:	e7e8      	b.n	800700a <_strtod_l+0x8c2>
 8007038:	ea53 030a 	orrs.w	r3, r3, sl
 800703c:	d08c      	beq.n	8006f58 <_strtod_l+0x810>
 800703e:	9b08      	ldr	r3, [sp, #32]
 8007040:	b1db      	cbz	r3, 800707a <_strtod_l+0x932>
 8007042:	423b      	tst	r3, r7
 8007044:	d0ef      	beq.n	8007026 <_strtod_l+0x8de>
 8007046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	4650      	mov	r0, sl
 800704c:	4659      	mov	r1, fp
 800704e:	b1c3      	cbz	r3, 8007082 <_strtod_l+0x93a>
 8007050:	f7ff fb5c 	bl	800670c <sulp>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	ec51 0b18 	vmov	r0, r1, d8
 800705c:	f7f9 f91e 	bl	800029c <__adddf3>
 8007060:	4682      	mov	sl, r0
 8007062:	468b      	mov	fp, r1
 8007064:	e7df      	b.n	8007026 <_strtod_l+0x8de>
 8007066:	4013      	ands	r3, r2
 8007068:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800706c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007070:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007074:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007078:	e7d5      	b.n	8007026 <_strtod_l+0x8de>
 800707a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800707c:	ea13 0f0a 	tst.w	r3, sl
 8007080:	e7e0      	b.n	8007044 <_strtod_l+0x8fc>
 8007082:	f7ff fb43 	bl	800670c <sulp>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	ec51 0b18 	vmov	r0, r1, d8
 800708e:	f7f9 f903 	bl	8000298 <__aeabi_dsub>
 8007092:	2200      	movs	r2, #0
 8007094:	2300      	movs	r3, #0
 8007096:	4682      	mov	sl, r0
 8007098:	468b      	mov	fp, r1
 800709a:	f7f9 fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0c1      	beq.n	8007026 <_strtod_l+0x8de>
 80070a2:	e611      	b.n	8006cc8 <_strtod_l+0x580>
 80070a4:	fffffc02 	.word	0xfffffc02
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	39500000 	.word	0x39500000
 80070b0:	000fffff 	.word	0x000fffff
 80070b4:	7fefffff 	.word	0x7fefffff
 80070b8:	0800a258 	.word	0x0800a258
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	f001 ffb6 	bl	8009030 <__ratio>
 80070c4:	ec59 8b10 	vmov	r8, r9, d0
 80070c8:	ee10 0a10 	vmov	r0, s0
 80070cc:	2200      	movs	r2, #0
 80070ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070d2:	4649      	mov	r1, r9
 80070d4:	f7f9 fd14 	bl	8000b00 <__aeabi_dcmple>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d07a      	beq.n	80071d2 <_strtod_l+0xa8a>
 80070dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d04a      	beq.n	8007178 <_strtod_l+0xa30>
 80070e2:	4b95      	ldr	r3, [pc, #596]	; (8007338 <_strtod_l+0xbf0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007338 <_strtod_l+0xbf0>
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	4b92      	ldr	r3, [pc, #584]	; (800733c <_strtod_l+0xbf4>)
 80070f4:	403b      	ands	r3, r7
 80070f6:	930d      	str	r3, [sp, #52]	; 0x34
 80070f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070fa:	4b91      	ldr	r3, [pc, #580]	; (8007340 <_strtod_l+0xbf8>)
 80070fc:	429a      	cmp	r2, r3
 80070fe:	f040 80b0 	bne.w	8007262 <_strtod_l+0xb1a>
 8007102:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007106:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800710a:	ec4b ab10 	vmov	d0, sl, fp
 800710e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007112:	f001 feb5 	bl	8008e80 <__ulp>
 8007116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800711a:	ec53 2b10 	vmov	r2, r3, d0
 800711e:	f7f9 fa73 	bl	8000608 <__aeabi_dmul>
 8007122:	4652      	mov	r2, sl
 8007124:	465b      	mov	r3, fp
 8007126:	f7f9 f8b9 	bl	800029c <__adddf3>
 800712a:	460b      	mov	r3, r1
 800712c:	4983      	ldr	r1, [pc, #524]	; (800733c <_strtod_l+0xbf4>)
 800712e:	4a85      	ldr	r2, [pc, #532]	; (8007344 <_strtod_l+0xbfc>)
 8007130:	4019      	ands	r1, r3
 8007132:	4291      	cmp	r1, r2
 8007134:	4682      	mov	sl, r0
 8007136:	d960      	bls.n	80071fa <_strtod_l+0xab2>
 8007138:	ee18 3a90 	vmov	r3, s17
 800713c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007140:	4293      	cmp	r3, r2
 8007142:	d104      	bne.n	800714e <_strtod_l+0xa06>
 8007144:	ee18 3a10 	vmov	r3, s16
 8007148:	3301      	adds	r3, #1
 800714a:	f43f ad45 	beq.w	8006bd8 <_strtod_l+0x490>
 800714e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007350 <_strtod_l+0xc08>
 8007152:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007156:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007158:	4620      	mov	r0, r4
 800715a:	f001 fb5f 	bl	800881c <_Bfree>
 800715e:	9905      	ldr	r1, [sp, #20]
 8007160:	4620      	mov	r0, r4
 8007162:	f001 fb5b 	bl	800881c <_Bfree>
 8007166:	4631      	mov	r1, r6
 8007168:	4620      	mov	r0, r4
 800716a:	f001 fb57 	bl	800881c <_Bfree>
 800716e:	4629      	mov	r1, r5
 8007170:	4620      	mov	r0, r4
 8007172:	f001 fb53 	bl	800881c <_Bfree>
 8007176:	e61a      	b.n	8006dae <_strtod_l+0x666>
 8007178:	f1ba 0f00 	cmp.w	sl, #0
 800717c:	d11b      	bne.n	80071b6 <_strtod_l+0xa6e>
 800717e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007182:	b9f3      	cbnz	r3, 80071c2 <_strtod_l+0xa7a>
 8007184:	4b6c      	ldr	r3, [pc, #432]	; (8007338 <_strtod_l+0xbf0>)
 8007186:	2200      	movs	r2, #0
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 fcae 	bl	8000aec <__aeabi_dcmplt>
 8007190:	b9d0      	cbnz	r0, 80071c8 <_strtod_l+0xa80>
 8007192:	4640      	mov	r0, r8
 8007194:	4649      	mov	r1, r9
 8007196:	4b6c      	ldr	r3, [pc, #432]	; (8007348 <_strtod_l+0xc00>)
 8007198:	2200      	movs	r2, #0
 800719a:	f7f9 fa35 	bl	8000608 <__aeabi_dmul>
 800719e:	4680      	mov	r8, r0
 80071a0:	4689      	mov	r9, r1
 80071a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80071aa:	9315      	str	r3, [sp, #84]	; 0x54
 80071ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80071b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80071b4:	e79d      	b.n	80070f2 <_strtod_l+0x9aa>
 80071b6:	f1ba 0f01 	cmp.w	sl, #1
 80071ba:	d102      	bne.n	80071c2 <_strtod_l+0xa7a>
 80071bc:	2f00      	cmp	r7, #0
 80071be:	f43f ad83 	beq.w	8006cc8 <_strtod_l+0x580>
 80071c2:	4b62      	ldr	r3, [pc, #392]	; (800734c <_strtod_l+0xc04>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	e78e      	b.n	80070e6 <_strtod_l+0x99e>
 80071c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007348 <_strtod_l+0xc00>
 80071cc:	f04f 0800 	mov.w	r8, #0
 80071d0:	e7e7      	b.n	80071a2 <_strtod_l+0xa5a>
 80071d2:	4b5d      	ldr	r3, [pc, #372]	; (8007348 <_strtod_l+0xc00>)
 80071d4:	4640      	mov	r0, r8
 80071d6:	4649      	mov	r1, r9
 80071d8:	2200      	movs	r2, #0
 80071da:	f7f9 fa15 	bl	8000608 <__aeabi_dmul>
 80071de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	b933      	cbnz	r3, 80071f4 <_strtod_l+0xaac>
 80071e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ea:	900e      	str	r0, [sp, #56]	; 0x38
 80071ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80071f2:	e7dd      	b.n	80071b0 <_strtod_l+0xa68>
 80071f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80071f8:	e7f9      	b.n	80071ee <_strtod_l+0xaa6>
 80071fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80071fe:	9b04      	ldr	r3, [sp, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1a8      	bne.n	8007156 <_strtod_l+0xa0e>
 8007204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800720a:	0d1b      	lsrs	r3, r3, #20
 800720c:	051b      	lsls	r3, r3, #20
 800720e:	429a      	cmp	r2, r3
 8007210:	d1a1      	bne.n	8007156 <_strtod_l+0xa0e>
 8007212:	4640      	mov	r0, r8
 8007214:	4649      	mov	r1, r9
 8007216:	f7f9 fd07 	bl	8000c28 <__aeabi_d2lz>
 800721a:	f7f9 f9c7 	bl	80005ac <__aeabi_l2d>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4640      	mov	r0, r8
 8007224:	4649      	mov	r1, r9
 8007226:	f7f9 f837 	bl	8000298 <__aeabi_dsub>
 800722a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800722c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007230:	ea43 030a 	orr.w	r3, r3, sl
 8007234:	4313      	orrs	r3, r2
 8007236:	4680      	mov	r8, r0
 8007238:	4689      	mov	r9, r1
 800723a:	d055      	beq.n	80072e8 <_strtod_l+0xba0>
 800723c:	a336      	add	r3, pc, #216	; (adr r3, 8007318 <_strtod_l+0xbd0>)
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 fc53 	bl	8000aec <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	f47f acd0 	bne.w	8006bec <_strtod_l+0x4a4>
 800724c:	a334      	add	r3, pc, #208	; (adr r3, 8007320 <_strtod_l+0xbd8>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	4640      	mov	r0, r8
 8007254:	4649      	mov	r1, r9
 8007256:	f7f9 fc67 	bl	8000b28 <__aeabi_dcmpgt>
 800725a:	2800      	cmp	r0, #0
 800725c:	f43f af7b 	beq.w	8007156 <_strtod_l+0xa0e>
 8007260:	e4c4      	b.n	8006bec <_strtod_l+0x4a4>
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	b333      	cbz	r3, 80072b4 <_strtod_l+0xb6c>
 8007266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007268:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800726c:	d822      	bhi.n	80072b4 <_strtod_l+0xb6c>
 800726e:	a32e      	add	r3, pc, #184	; (adr r3, 8007328 <_strtod_l+0xbe0>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	4640      	mov	r0, r8
 8007276:	4649      	mov	r1, r9
 8007278:	f7f9 fc42 	bl	8000b00 <__aeabi_dcmple>
 800727c:	b1a0      	cbz	r0, 80072a8 <_strtod_l+0xb60>
 800727e:	4649      	mov	r1, r9
 8007280:	4640      	mov	r0, r8
 8007282:	f7f9 fc99 	bl	8000bb8 <__aeabi_d2uiz>
 8007286:	2801      	cmp	r0, #1
 8007288:	bf38      	it	cc
 800728a:	2001      	movcc	r0, #1
 800728c:	f7f9 f942 	bl	8000514 <__aeabi_ui2d>
 8007290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007292:	4680      	mov	r8, r0
 8007294:	4689      	mov	r9, r1
 8007296:	bb23      	cbnz	r3, 80072e2 <_strtod_l+0xb9a>
 8007298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800729c:	9010      	str	r0, [sp, #64]	; 0x40
 800729e:	9311      	str	r3, [sp, #68]	; 0x44
 80072a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80072b0:	1a9b      	subs	r3, r3, r2
 80072b2:	9309      	str	r3, [sp, #36]	; 0x24
 80072b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072b8:	eeb0 0a48 	vmov.f32	s0, s16
 80072bc:	eef0 0a68 	vmov.f32	s1, s17
 80072c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072c4:	f001 fddc 	bl	8008e80 <__ulp>
 80072c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072cc:	ec53 2b10 	vmov	r2, r3, d0
 80072d0:	f7f9 f99a 	bl	8000608 <__aeabi_dmul>
 80072d4:	ec53 2b18 	vmov	r2, r3, d8
 80072d8:	f7f8 ffe0 	bl	800029c <__adddf3>
 80072dc:	4682      	mov	sl, r0
 80072de:	468b      	mov	fp, r1
 80072e0:	e78d      	b.n	80071fe <_strtod_l+0xab6>
 80072e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80072e6:	e7db      	b.n	80072a0 <_strtod_l+0xb58>
 80072e8:	a311      	add	r3, pc, #68	; (adr r3, 8007330 <_strtod_l+0xbe8>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f9 fbfd 	bl	8000aec <__aeabi_dcmplt>
 80072f2:	e7b2      	b.n	800725a <_strtod_l+0xb12>
 80072f4:	2300      	movs	r3, #0
 80072f6:	930a      	str	r3, [sp, #40]	; 0x28
 80072f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	f7ff ba6b 	b.w	80067d8 <_strtod_l+0x90>
 8007302:	2a65      	cmp	r2, #101	; 0x65
 8007304:	f43f ab5f 	beq.w	80069c6 <_strtod_l+0x27e>
 8007308:	2a45      	cmp	r2, #69	; 0x45
 800730a:	f43f ab5c 	beq.w	80069c6 <_strtod_l+0x27e>
 800730e:	2301      	movs	r3, #1
 8007310:	f7ff bb94 	b.w	8006a3c <_strtod_l+0x2f4>
 8007314:	f3af 8000 	nop.w
 8007318:	94a03595 	.word	0x94a03595
 800731c:	3fdfffff 	.word	0x3fdfffff
 8007320:	35afe535 	.word	0x35afe535
 8007324:	3fe00000 	.word	0x3fe00000
 8007328:	ffc00000 	.word	0xffc00000
 800732c:	41dfffff 	.word	0x41dfffff
 8007330:	94a03595 	.word	0x94a03595
 8007334:	3fcfffff 	.word	0x3fcfffff
 8007338:	3ff00000 	.word	0x3ff00000
 800733c:	7ff00000 	.word	0x7ff00000
 8007340:	7fe00000 	.word	0x7fe00000
 8007344:	7c9fffff 	.word	0x7c9fffff
 8007348:	3fe00000 	.word	0x3fe00000
 800734c:	bff00000 	.word	0xbff00000
 8007350:	7fefffff 	.word	0x7fefffff

08007354 <strtod>:
 8007354:	460a      	mov	r2, r1
 8007356:	4601      	mov	r1, r0
 8007358:	4802      	ldr	r0, [pc, #8]	; (8007364 <strtod+0x10>)
 800735a:	4b03      	ldr	r3, [pc, #12]	; (8007368 <strtod+0x14>)
 800735c:	6800      	ldr	r0, [r0, #0]
 800735e:	f7ff b9f3 	b.w	8006748 <_strtod_l>
 8007362:	bf00      	nop
 8007364:	20000010 	.word	0x20000010
 8007368:	20000078 	.word	0x20000078

0800736c <quorem>:
 800736c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	6903      	ldr	r3, [r0, #16]
 8007372:	690c      	ldr	r4, [r1, #16]
 8007374:	42a3      	cmp	r3, r4
 8007376:	4607      	mov	r7, r0
 8007378:	f2c0 8081 	blt.w	800747e <quorem+0x112>
 800737c:	3c01      	subs	r4, #1
 800737e:	f101 0814 	add.w	r8, r1, #20
 8007382:	f100 0514 	add.w	r5, r0, #20
 8007386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007394:	3301      	adds	r3, #1
 8007396:	429a      	cmp	r2, r3
 8007398:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800739c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80073a4:	d331      	bcc.n	800740a <quorem+0x9e>
 80073a6:	f04f 0e00 	mov.w	lr, #0
 80073aa:	4640      	mov	r0, r8
 80073ac:	46ac      	mov	ip, r5
 80073ae:	46f2      	mov	sl, lr
 80073b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80073b4:	b293      	uxth	r3, r2
 80073b6:	fb06 e303 	mla	r3, r6, r3, lr
 80073ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073be:	b29b      	uxth	r3, r3
 80073c0:	ebaa 0303 	sub.w	r3, sl, r3
 80073c4:	f8dc a000 	ldr.w	sl, [ip]
 80073c8:	0c12      	lsrs	r2, r2, #16
 80073ca:	fa13 f38a 	uxtah	r3, r3, sl
 80073ce:	fb06 e202 	mla	r2, r6, r2, lr
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	9b00      	ldr	r3, [sp, #0]
 80073d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073da:	b292      	uxth	r2, r2
 80073dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80073e8:	4581      	cmp	r9, r0
 80073ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ee:	f84c 3b04 	str.w	r3, [ip], #4
 80073f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073f6:	d2db      	bcs.n	80073b0 <quorem+0x44>
 80073f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80073fc:	b92b      	cbnz	r3, 800740a <quorem+0x9e>
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	3b04      	subs	r3, #4
 8007402:	429d      	cmp	r5, r3
 8007404:	461a      	mov	r2, r3
 8007406:	d32e      	bcc.n	8007466 <quorem+0xfa>
 8007408:	613c      	str	r4, [r7, #16]
 800740a:	4638      	mov	r0, r7
 800740c:	f001 fc92 	bl	8008d34 <__mcmp>
 8007410:	2800      	cmp	r0, #0
 8007412:	db24      	blt.n	800745e <quorem+0xf2>
 8007414:	3601      	adds	r6, #1
 8007416:	4628      	mov	r0, r5
 8007418:	f04f 0c00 	mov.w	ip, #0
 800741c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007420:	f8d0 e000 	ldr.w	lr, [r0]
 8007424:	b293      	uxth	r3, r2
 8007426:	ebac 0303 	sub.w	r3, ip, r3
 800742a:	0c12      	lsrs	r2, r2, #16
 800742c:	fa13 f38e 	uxtah	r3, r3, lr
 8007430:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007438:	b29b      	uxth	r3, r3
 800743a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800743e:	45c1      	cmp	r9, r8
 8007440:	f840 3b04 	str.w	r3, [r0], #4
 8007444:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007448:	d2e8      	bcs.n	800741c <quorem+0xb0>
 800744a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800744e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007452:	b922      	cbnz	r2, 800745e <quorem+0xf2>
 8007454:	3b04      	subs	r3, #4
 8007456:	429d      	cmp	r5, r3
 8007458:	461a      	mov	r2, r3
 800745a:	d30a      	bcc.n	8007472 <quorem+0x106>
 800745c:	613c      	str	r4, [r7, #16]
 800745e:	4630      	mov	r0, r6
 8007460:	b003      	add	sp, #12
 8007462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	3b04      	subs	r3, #4
 800746a:	2a00      	cmp	r2, #0
 800746c:	d1cc      	bne.n	8007408 <quorem+0x9c>
 800746e:	3c01      	subs	r4, #1
 8007470:	e7c7      	b.n	8007402 <quorem+0x96>
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	3b04      	subs	r3, #4
 8007476:	2a00      	cmp	r2, #0
 8007478:	d1f0      	bne.n	800745c <quorem+0xf0>
 800747a:	3c01      	subs	r4, #1
 800747c:	e7eb      	b.n	8007456 <quorem+0xea>
 800747e:	2000      	movs	r0, #0
 8007480:	e7ee      	b.n	8007460 <quorem+0xf4>
 8007482:	0000      	movs	r0, r0
 8007484:	0000      	movs	r0, r0
	...

08007488 <_dtoa_r>:
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	ed2d 8b04 	vpush	{d8-d9}
 8007490:	ec57 6b10 	vmov	r6, r7, d0
 8007494:	b093      	sub	sp, #76	; 0x4c
 8007496:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007498:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800749c:	9106      	str	r1, [sp, #24]
 800749e:	ee10 aa10 	vmov	sl, s0
 80074a2:	4604      	mov	r4, r0
 80074a4:	9209      	str	r2, [sp, #36]	; 0x24
 80074a6:	930c      	str	r3, [sp, #48]	; 0x30
 80074a8:	46bb      	mov	fp, r7
 80074aa:	b975      	cbnz	r5, 80074ca <_dtoa_r+0x42>
 80074ac:	2010      	movs	r0, #16
 80074ae:	f001 f94d 	bl	800874c <malloc>
 80074b2:	4602      	mov	r2, r0
 80074b4:	6260      	str	r0, [r4, #36]	; 0x24
 80074b6:	b920      	cbnz	r0, 80074c2 <_dtoa_r+0x3a>
 80074b8:	4ba7      	ldr	r3, [pc, #668]	; (8007758 <_dtoa_r+0x2d0>)
 80074ba:	21ea      	movs	r1, #234	; 0xea
 80074bc:	48a7      	ldr	r0, [pc, #668]	; (800775c <_dtoa_r+0x2d4>)
 80074be:	f002 f8bd 	bl	800963c <__assert_func>
 80074c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074c6:	6005      	str	r5, [r0, #0]
 80074c8:	60c5      	str	r5, [r0, #12]
 80074ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074cc:	6819      	ldr	r1, [r3, #0]
 80074ce:	b151      	cbz	r1, 80074e6 <_dtoa_r+0x5e>
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	604a      	str	r2, [r1, #4]
 80074d4:	2301      	movs	r3, #1
 80074d6:	4093      	lsls	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
 80074da:	4620      	mov	r0, r4
 80074dc:	f001 f99e 	bl	800881c <_Bfree>
 80074e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	1e3b      	subs	r3, r7, #0
 80074e8:	bfaa      	itet	ge
 80074ea:	2300      	movge	r3, #0
 80074ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80074f0:	f8c8 3000 	strge.w	r3, [r8]
 80074f4:	4b9a      	ldr	r3, [pc, #616]	; (8007760 <_dtoa_r+0x2d8>)
 80074f6:	bfbc      	itt	lt
 80074f8:	2201      	movlt	r2, #1
 80074fa:	f8c8 2000 	strlt.w	r2, [r8]
 80074fe:	ea33 030b 	bics.w	r3, r3, fp
 8007502:	d11b      	bne.n	800753c <_dtoa_r+0xb4>
 8007504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007506:	f242 730f 	movw	r3, #9999	; 0x270f
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007510:	4333      	orrs	r3, r6
 8007512:	f000 8592 	beq.w	800803a <_dtoa_r+0xbb2>
 8007516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007518:	b963      	cbnz	r3, 8007534 <_dtoa_r+0xac>
 800751a:	4b92      	ldr	r3, [pc, #584]	; (8007764 <_dtoa_r+0x2dc>)
 800751c:	e022      	b.n	8007564 <_dtoa_r+0xdc>
 800751e:	4b92      	ldr	r3, [pc, #584]	; (8007768 <_dtoa_r+0x2e0>)
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	3308      	adds	r3, #8
 8007524:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	9801      	ldr	r0, [sp, #4]
 800752a:	b013      	add	sp, #76	; 0x4c
 800752c:	ecbd 8b04 	vpop	{d8-d9}
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	4b8b      	ldr	r3, [pc, #556]	; (8007764 <_dtoa_r+0x2dc>)
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	3303      	adds	r3, #3
 800753a:	e7f3      	b.n	8007524 <_dtoa_r+0x9c>
 800753c:	2200      	movs	r2, #0
 800753e:	2300      	movs	r3, #0
 8007540:	4650      	mov	r0, sl
 8007542:	4659      	mov	r1, fp
 8007544:	f7f9 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007548:	ec4b ab19 	vmov	d9, sl, fp
 800754c:	4680      	mov	r8, r0
 800754e:	b158      	cbz	r0, 8007568 <_dtoa_r+0xe0>
 8007550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007552:	2301      	movs	r3, #1
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 856b 	beq.w	8008034 <_dtoa_r+0xbac>
 800755e:	4883      	ldr	r0, [pc, #524]	; (800776c <_dtoa_r+0x2e4>)
 8007560:	6018      	str	r0, [r3, #0]
 8007562:	1e43      	subs	r3, r0, #1
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	e7df      	b.n	8007528 <_dtoa_r+0xa0>
 8007568:	ec4b ab10 	vmov	d0, sl, fp
 800756c:	aa10      	add	r2, sp, #64	; 0x40
 800756e:	a911      	add	r1, sp, #68	; 0x44
 8007570:	4620      	mov	r0, r4
 8007572:	f001 fd01 	bl	8008f78 <__d2b>
 8007576:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800757a:	ee08 0a10 	vmov	s16, r0
 800757e:	2d00      	cmp	r5, #0
 8007580:	f000 8084 	beq.w	800768c <_dtoa_r+0x204>
 8007584:	ee19 3a90 	vmov	r3, s19
 8007588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800758c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007590:	4656      	mov	r6, sl
 8007592:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800759a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800759e:	4b74      	ldr	r3, [pc, #464]	; (8007770 <_dtoa_r+0x2e8>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	4630      	mov	r0, r6
 80075a4:	4639      	mov	r1, r7
 80075a6:	f7f8 fe77 	bl	8000298 <__aeabi_dsub>
 80075aa:	a365      	add	r3, pc, #404	; (adr r3, 8007740 <_dtoa_r+0x2b8>)
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	f7f9 f82a 	bl	8000608 <__aeabi_dmul>
 80075b4:	a364      	add	r3, pc, #400	; (adr r3, 8007748 <_dtoa_r+0x2c0>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f7f8 fe6f 	bl	800029c <__adddf3>
 80075be:	4606      	mov	r6, r0
 80075c0:	4628      	mov	r0, r5
 80075c2:	460f      	mov	r7, r1
 80075c4:	f7f8 ffb6 	bl	8000534 <__aeabi_i2d>
 80075c8:	a361      	add	r3, pc, #388	; (adr r3, 8007750 <_dtoa_r+0x2c8>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f9 f81b 	bl	8000608 <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	f7f8 fe5f 	bl	800029c <__adddf3>
 80075de:	4606      	mov	r6, r0
 80075e0:	460f      	mov	r7, r1
 80075e2:	f7f9 fac1 	bl	8000b68 <__aeabi_d2iz>
 80075e6:	2200      	movs	r2, #0
 80075e8:	9000      	str	r0, [sp, #0]
 80075ea:	2300      	movs	r3, #0
 80075ec:	4630      	mov	r0, r6
 80075ee:	4639      	mov	r1, r7
 80075f0:	f7f9 fa7c 	bl	8000aec <__aeabi_dcmplt>
 80075f4:	b150      	cbz	r0, 800760c <_dtoa_r+0x184>
 80075f6:	9800      	ldr	r0, [sp, #0]
 80075f8:	f7f8 ff9c 	bl	8000534 <__aeabi_i2d>
 80075fc:	4632      	mov	r2, r6
 80075fe:	463b      	mov	r3, r7
 8007600:	f7f9 fa6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007604:	b910      	cbnz	r0, 800760c <_dtoa_r+0x184>
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	3b01      	subs	r3, #1
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	9b00      	ldr	r3, [sp, #0]
 800760e:	2b16      	cmp	r3, #22
 8007610:	d85a      	bhi.n	80076c8 <_dtoa_r+0x240>
 8007612:	9a00      	ldr	r2, [sp, #0]
 8007614:	4b57      	ldr	r3, [pc, #348]	; (8007774 <_dtoa_r+0x2ec>)
 8007616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	ec51 0b19 	vmov	r0, r1, d9
 8007622:	f7f9 fa63 	bl	8000aec <__aeabi_dcmplt>
 8007626:	2800      	cmp	r0, #0
 8007628:	d050      	beq.n	80076cc <_dtoa_r+0x244>
 800762a:	9b00      	ldr	r3, [sp, #0]
 800762c:	3b01      	subs	r3, #1
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	930b      	str	r3, [sp, #44]	; 0x2c
 8007634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007636:	1b5d      	subs	r5, r3, r5
 8007638:	1e6b      	subs	r3, r5, #1
 800763a:	9305      	str	r3, [sp, #20]
 800763c:	bf45      	ittet	mi
 800763e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007642:	9304      	strmi	r3, [sp, #16]
 8007644:	2300      	movpl	r3, #0
 8007646:	2300      	movmi	r3, #0
 8007648:	bf4c      	ite	mi
 800764a:	9305      	strmi	r3, [sp, #20]
 800764c:	9304      	strpl	r3, [sp, #16]
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	db3d      	blt.n	80076d0 <_dtoa_r+0x248>
 8007654:	9b05      	ldr	r3, [sp, #20]
 8007656:	9a00      	ldr	r2, [sp, #0]
 8007658:	920a      	str	r2, [sp, #40]	; 0x28
 800765a:	4413      	add	r3, r2
 800765c:	9305      	str	r3, [sp, #20]
 800765e:	2300      	movs	r3, #0
 8007660:	9307      	str	r3, [sp, #28]
 8007662:	9b06      	ldr	r3, [sp, #24]
 8007664:	2b09      	cmp	r3, #9
 8007666:	f200 8089 	bhi.w	800777c <_dtoa_r+0x2f4>
 800766a:	2b05      	cmp	r3, #5
 800766c:	bfc4      	itt	gt
 800766e:	3b04      	subgt	r3, #4
 8007670:	9306      	strgt	r3, [sp, #24]
 8007672:	9b06      	ldr	r3, [sp, #24]
 8007674:	f1a3 0302 	sub.w	r3, r3, #2
 8007678:	bfcc      	ite	gt
 800767a:	2500      	movgt	r5, #0
 800767c:	2501      	movle	r5, #1
 800767e:	2b03      	cmp	r3, #3
 8007680:	f200 8087 	bhi.w	8007792 <_dtoa_r+0x30a>
 8007684:	e8df f003 	tbb	[pc, r3]
 8007688:	59383a2d 	.word	0x59383a2d
 800768c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007690:	441d      	add	r5, r3
 8007692:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007696:	2b20      	cmp	r3, #32
 8007698:	bfc1      	itttt	gt
 800769a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800769e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80076a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076aa:	bfda      	itte	le
 80076ac:	f1c3 0320 	rsble	r3, r3, #32
 80076b0:	fa06 f003 	lslle.w	r0, r6, r3
 80076b4:	4318      	orrgt	r0, r3
 80076b6:	f7f8 ff2d 	bl	8000514 <__aeabi_ui2d>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4606      	mov	r6, r0
 80076be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076c2:	3d01      	subs	r5, #1
 80076c4:	930e      	str	r3, [sp, #56]	; 0x38
 80076c6:	e76a      	b.n	800759e <_dtoa_r+0x116>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7b2      	b.n	8007632 <_dtoa_r+0x1aa>
 80076cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80076ce:	e7b1      	b.n	8007634 <_dtoa_r+0x1ac>
 80076d0:	9b04      	ldr	r3, [sp, #16]
 80076d2:	9a00      	ldr	r2, [sp, #0]
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	9304      	str	r3, [sp, #16]
 80076d8:	4253      	negs	r3, r2
 80076da:	9307      	str	r3, [sp, #28]
 80076dc:	2300      	movs	r3, #0
 80076de:	930a      	str	r3, [sp, #40]	; 0x28
 80076e0:	e7bf      	b.n	8007662 <_dtoa_r+0x1da>
 80076e2:	2300      	movs	r3, #0
 80076e4:	9308      	str	r3, [sp, #32]
 80076e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dc55      	bgt.n	8007798 <_dtoa_r+0x310>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076f2:	461a      	mov	r2, r3
 80076f4:	9209      	str	r2, [sp, #36]	; 0x24
 80076f6:	e00c      	b.n	8007712 <_dtoa_r+0x28a>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e7f3      	b.n	80076e4 <_dtoa_r+0x25c>
 80076fc:	2300      	movs	r3, #0
 80076fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007700:	9308      	str	r3, [sp, #32]
 8007702:	9b00      	ldr	r3, [sp, #0]
 8007704:	4413      	add	r3, r2
 8007706:	9302      	str	r3, [sp, #8]
 8007708:	3301      	adds	r3, #1
 800770a:	2b01      	cmp	r3, #1
 800770c:	9303      	str	r3, [sp, #12]
 800770e:	bfb8      	it	lt
 8007710:	2301      	movlt	r3, #1
 8007712:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007714:	2200      	movs	r2, #0
 8007716:	6042      	str	r2, [r0, #4]
 8007718:	2204      	movs	r2, #4
 800771a:	f102 0614 	add.w	r6, r2, #20
 800771e:	429e      	cmp	r6, r3
 8007720:	6841      	ldr	r1, [r0, #4]
 8007722:	d93d      	bls.n	80077a0 <_dtoa_r+0x318>
 8007724:	4620      	mov	r0, r4
 8007726:	f001 f839 	bl	800879c <_Balloc>
 800772a:	9001      	str	r0, [sp, #4]
 800772c:	2800      	cmp	r0, #0
 800772e:	d13b      	bne.n	80077a8 <_dtoa_r+0x320>
 8007730:	4b11      	ldr	r3, [pc, #68]	; (8007778 <_dtoa_r+0x2f0>)
 8007732:	4602      	mov	r2, r0
 8007734:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007738:	e6c0      	b.n	80074bc <_dtoa_r+0x34>
 800773a:	2301      	movs	r3, #1
 800773c:	e7df      	b.n	80076fe <_dtoa_r+0x276>
 800773e:	bf00      	nop
 8007740:	636f4361 	.word	0x636f4361
 8007744:	3fd287a7 	.word	0x3fd287a7
 8007748:	8b60c8b3 	.word	0x8b60c8b3
 800774c:	3fc68a28 	.word	0x3fc68a28
 8007750:	509f79fb 	.word	0x509f79fb
 8007754:	3fd34413 	.word	0x3fd34413
 8007758:	0800a28d 	.word	0x0800a28d
 800775c:	0800a2a4 	.word	0x0800a2a4
 8007760:	7ff00000 	.word	0x7ff00000
 8007764:	0800a289 	.word	0x0800a289
 8007768:	0800a280 	.word	0x0800a280
 800776c:	0800a20d 	.word	0x0800a20d
 8007770:	3ff80000 	.word	0x3ff80000
 8007774:	0800a410 	.word	0x0800a410
 8007778:	0800a2ff 	.word	0x0800a2ff
 800777c:	2501      	movs	r5, #1
 800777e:	2300      	movs	r3, #0
 8007780:	9306      	str	r3, [sp, #24]
 8007782:	9508      	str	r5, [sp, #32]
 8007784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007788:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800778c:	2200      	movs	r2, #0
 800778e:	2312      	movs	r3, #18
 8007790:	e7b0      	b.n	80076f4 <_dtoa_r+0x26c>
 8007792:	2301      	movs	r3, #1
 8007794:	9308      	str	r3, [sp, #32]
 8007796:	e7f5      	b.n	8007784 <_dtoa_r+0x2fc>
 8007798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800779e:	e7b8      	b.n	8007712 <_dtoa_r+0x28a>
 80077a0:	3101      	adds	r1, #1
 80077a2:	6041      	str	r1, [r0, #4]
 80077a4:	0052      	lsls	r2, r2, #1
 80077a6:	e7b8      	b.n	800771a <_dtoa_r+0x292>
 80077a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077aa:	9a01      	ldr	r2, [sp, #4]
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	2b0e      	cmp	r3, #14
 80077b2:	f200 809d 	bhi.w	80078f0 <_dtoa_r+0x468>
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	f000 809a 	beq.w	80078f0 <_dtoa_r+0x468>
 80077bc:	9b00      	ldr	r3, [sp, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	dd32      	ble.n	8007828 <_dtoa_r+0x3a0>
 80077c2:	4ab7      	ldr	r2, [pc, #732]	; (8007aa0 <_dtoa_r+0x618>)
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077d0:	9b00      	ldr	r3, [sp, #0]
 80077d2:	05d8      	lsls	r0, r3, #23
 80077d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80077d8:	d516      	bpl.n	8007808 <_dtoa_r+0x380>
 80077da:	4bb2      	ldr	r3, [pc, #712]	; (8007aa4 <_dtoa_r+0x61c>)
 80077dc:	ec51 0b19 	vmov	r0, r1, d9
 80077e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077e4:	f7f9 f83a 	bl	800085c <__aeabi_ddiv>
 80077e8:	f007 070f 	and.w	r7, r7, #15
 80077ec:	4682      	mov	sl, r0
 80077ee:	468b      	mov	fp, r1
 80077f0:	2503      	movs	r5, #3
 80077f2:	4eac      	ldr	r6, [pc, #688]	; (8007aa4 <_dtoa_r+0x61c>)
 80077f4:	b957      	cbnz	r7, 800780c <_dtoa_r+0x384>
 80077f6:	4642      	mov	r2, r8
 80077f8:	464b      	mov	r3, r9
 80077fa:	4650      	mov	r0, sl
 80077fc:	4659      	mov	r1, fp
 80077fe:	f7f9 f82d 	bl	800085c <__aeabi_ddiv>
 8007802:	4682      	mov	sl, r0
 8007804:	468b      	mov	fp, r1
 8007806:	e028      	b.n	800785a <_dtoa_r+0x3d2>
 8007808:	2502      	movs	r5, #2
 800780a:	e7f2      	b.n	80077f2 <_dtoa_r+0x36a>
 800780c:	07f9      	lsls	r1, r7, #31
 800780e:	d508      	bpl.n	8007822 <_dtoa_r+0x39a>
 8007810:	4640      	mov	r0, r8
 8007812:	4649      	mov	r1, r9
 8007814:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007818:	f7f8 fef6 	bl	8000608 <__aeabi_dmul>
 800781c:	3501      	adds	r5, #1
 800781e:	4680      	mov	r8, r0
 8007820:	4689      	mov	r9, r1
 8007822:	107f      	asrs	r7, r7, #1
 8007824:	3608      	adds	r6, #8
 8007826:	e7e5      	b.n	80077f4 <_dtoa_r+0x36c>
 8007828:	f000 809b 	beq.w	8007962 <_dtoa_r+0x4da>
 800782c:	9b00      	ldr	r3, [sp, #0]
 800782e:	4f9d      	ldr	r7, [pc, #628]	; (8007aa4 <_dtoa_r+0x61c>)
 8007830:	425e      	negs	r6, r3
 8007832:	4b9b      	ldr	r3, [pc, #620]	; (8007aa0 <_dtoa_r+0x618>)
 8007834:	f006 020f 	and.w	r2, r6, #15
 8007838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	ec51 0b19 	vmov	r0, r1, d9
 8007844:	f7f8 fee0 	bl	8000608 <__aeabi_dmul>
 8007848:	1136      	asrs	r6, r6, #4
 800784a:	4682      	mov	sl, r0
 800784c:	468b      	mov	fp, r1
 800784e:	2300      	movs	r3, #0
 8007850:	2502      	movs	r5, #2
 8007852:	2e00      	cmp	r6, #0
 8007854:	d17a      	bne.n	800794c <_dtoa_r+0x4c4>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1d3      	bne.n	8007802 <_dtoa_r+0x37a>
 800785a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8082 	beq.w	8007966 <_dtoa_r+0x4de>
 8007862:	4b91      	ldr	r3, [pc, #580]	; (8007aa8 <_dtoa_r+0x620>)
 8007864:	2200      	movs	r2, #0
 8007866:	4650      	mov	r0, sl
 8007868:	4659      	mov	r1, fp
 800786a:	f7f9 f93f 	bl	8000aec <__aeabi_dcmplt>
 800786e:	2800      	cmp	r0, #0
 8007870:	d079      	beq.n	8007966 <_dtoa_r+0x4de>
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d076      	beq.n	8007966 <_dtoa_r+0x4de>
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	dd36      	ble.n	80078ec <_dtoa_r+0x464>
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	4650      	mov	r0, sl
 8007882:	4659      	mov	r1, fp
 8007884:	1e5f      	subs	r7, r3, #1
 8007886:	2200      	movs	r2, #0
 8007888:	4b88      	ldr	r3, [pc, #544]	; (8007aac <_dtoa_r+0x624>)
 800788a:	f7f8 febd 	bl	8000608 <__aeabi_dmul>
 800788e:	9e02      	ldr	r6, [sp, #8]
 8007890:	4682      	mov	sl, r0
 8007892:	468b      	mov	fp, r1
 8007894:	3501      	adds	r5, #1
 8007896:	4628      	mov	r0, r5
 8007898:	f7f8 fe4c 	bl	8000534 <__aeabi_i2d>
 800789c:	4652      	mov	r2, sl
 800789e:	465b      	mov	r3, fp
 80078a0:	f7f8 feb2 	bl	8000608 <__aeabi_dmul>
 80078a4:	4b82      	ldr	r3, [pc, #520]	; (8007ab0 <_dtoa_r+0x628>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	f7f8 fcf8 	bl	800029c <__adddf3>
 80078ac:	46d0      	mov	r8, sl
 80078ae:	46d9      	mov	r9, fp
 80078b0:	4682      	mov	sl, r0
 80078b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	d158      	bne.n	800796c <_dtoa_r+0x4e4>
 80078ba:	4b7e      	ldr	r3, [pc, #504]	; (8007ab4 <_dtoa_r+0x62c>)
 80078bc:	2200      	movs	r2, #0
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	f7f8 fce9 	bl	8000298 <__aeabi_dsub>
 80078c6:	4652      	mov	r2, sl
 80078c8:	465b      	mov	r3, fp
 80078ca:	4680      	mov	r8, r0
 80078cc:	4689      	mov	r9, r1
 80078ce:	f7f9 f92b 	bl	8000b28 <__aeabi_dcmpgt>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f040 8295 	bne.w	8007e02 <_dtoa_r+0x97a>
 80078d8:	4652      	mov	r2, sl
 80078da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f9 f903 	bl	8000aec <__aeabi_dcmplt>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f040 8289 	bne.w	8007dfe <_dtoa_r+0x976>
 80078ec:	ec5b ab19 	vmov	sl, fp, d9
 80078f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f2c0 8148 	blt.w	8007b88 <_dtoa_r+0x700>
 80078f8:	9a00      	ldr	r2, [sp, #0]
 80078fa:	2a0e      	cmp	r2, #14
 80078fc:	f300 8144 	bgt.w	8007b88 <_dtoa_r+0x700>
 8007900:	4b67      	ldr	r3, [pc, #412]	; (8007aa0 <_dtoa_r+0x618>)
 8007902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007906:	e9d3 8900 	ldrd	r8, r9, [r3]
 800790a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	f280 80d5 	bge.w	8007abc <_dtoa_r+0x634>
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f300 80d1 	bgt.w	8007abc <_dtoa_r+0x634>
 800791a:	f040 826f 	bne.w	8007dfc <_dtoa_r+0x974>
 800791e:	4b65      	ldr	r3, [pc, #404]	; (8007ab4 <_dtoa_r+0x62c>)
 8007920:	2200      	movs	r2, #0
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	f7f8 fe6f 	bl	8000608 <__aeabi_dmul>
 800792a:	4652      	mov	r2, sl
 800792c:	465b      	mov	r3, fp
 800792e:	f7f9 f8f1 	bl	8000b14 <__aeabi_dcmpge>
 8007932:	9e03      	ldr	r6, [sp, #12]
 8007934:	4637      	mov	r7, r6
 8007936:	2800      	cmp	r0, #0
 8007938:	f040 8245 	bne.w	8007dc6 <_dtoa_r+0x93e>
 800793c:	9d01      	ldr	r5, [sp, #4]
 800793e:	2331      	movs	r3, #49	; 0x31
 8007940:	f805 3b01 	strb.w	r3, [r5], #1
 8007944:	9b00      	ldr	r3, [sp, #0]
 8007946:	3301      	adds	r3, #1
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	e240      	b.n	8007dce <_dtoa_r+0x946>
 800794c:	07f2      	lsls	r2, r6, #31
 800794e:	d505      	bpl.n	800795c <_dtoa_r+0x4d4>
 8007950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007954:	f7f8 fe58 	bl	8000608 <__aeabi_dmul>
 8007958:	3501      	adds	r5, #1
 800795a:	2301      	movs	r3, #1
 800795c:	1076      	asrs	r6, r6, #1
 800795e:	3708      	adds	r7, #8
 8007960:	e777      	b.n	8007852 <_dtoa_r+0x3ca>
 8007962:	2502      	movs	r5, #2
 8007964:	e779      	b.n	800785a <_dtoa_r+0x3d2>
 8007966:	9f00      	ldr	r7, [sp, #0]
 8007968:	9e03      	ldr	r6, [sp, #12]
 800796a:	e794      	b.n	8007896 <_dtoa_r+0x40e>
 800796c:	9901      	ldr	r1, [sp, #4]
 800796e:	4b4c      	ldr	r3, [pc, #304]	; (8007aa0 <_dtoa_r+0x618>)
 8007970:	4431      	add	r1, r6
 8007972:	910d      	str	r1, [sp, #52]	; 0x34
 8007974:	9908      	ldr	r1, [sp, #32]
 8007976:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800797a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800797e:	2900      	cmp	r1, #0
 8007980:	d043      	beq.n	8007a0a <_dtoa_r+0x582>
 8007982:	494d      	ldr	r1, [pc, #308]	; (8007ab8 <_dtoa_r+0x630>)
 8007984:	2000      	movs	r0, #0
 8007986:	f7f8 ff69 	bl	800085c <__aeabi_ddiv>
 800798a:	4652      	mov	r2, sl
 800798c:	465b      	mov	r3, fp
 800798e:	f7f8 fc83 	bl	8000298 <__aeabi_dsub>
 8007992:	9d01      	ldr	r5, [sp, #4]
 8007994:	4682      	mov	sl, r0
 8007996:	468b      	mov	fp, r1
 8007998:	4649      	mov	r1, r9
 800799a:	4640      	mov	r0, r8
 800799c:	f7f9 f8e4 	bl	8000b68 <__aeabi_d2iz>
 80079a0:	4606      	mov	r6, r0
 80079a2:	f7f8 fdc7 	bl	8000534 <__aeabi_i2d>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4640      	mov	r0, r8
 80079ac:	4649      	mov	r1, r9
 80079ae:	f7f8 fc73 	bl	8000298 <__aeabi_dsub>
 80079b2:	3630      	adds	r6, #48	; 0x30
 80079b4:	f805 6b01 	strb.w	r6, [r5], #1
 80079b8:	4652      	mov	r2, sl
 80079ba:	465b      	mov	r3, fp
 80079bc:	4680      	mov	r8, r0
 80079be:	4689      	mov	r9, r1
 80079c0:	f7f9 f894 	bl	8000aec <__aeabi_dcmplt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d163      	bne.n	8007a90 <_dtoa_r+0x608>
 80079c8:	4642      	mov	r2, r8
 80079ca:	464b      	mov	r3, r9
 80079cc:	4936      	ldr	r1, [pc, #216]	; (8007aa8 <_dtoa_r+0x620>)
 80079ce:	2000      	movs	r0, #0
 80079d0:	f7f8 fc62 	bl	8000298 <__aeabi_dsub>
 80079d4:	4652      	mov	r2, sl
 80079d6:	465b      	mov	r3, fp
 80079d8:	f7f9 f888 	bl	8000aec <__aeabi_dcmplt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f040 80b5 	bne.w	8007b4c <_dtoa_r+0x6c4>
 80079e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079e4:	429d      	cmp	r5, r3
 80079e6:	d081      	beq.n	80078ec <_dtoa_r+0x464>
 80079e8:	4b30      	ldr	r3, [pc, #192]	; (8007aac <_dtoa_r+0x624>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	4650      	mov	r0, sl
 80079ee:	4659      	mov	r1, fp
 80079f0:	f7f8 fe0a 	bl	8000608 <__aeabi_dmul>
 80079f4:	4b2d      	ldr	r3, [pc, #180]	; (8007aac <_dtoa_r+0x624>)
 80079f6:	4682      	mov	sl, r0
 80079f8:	468b      	mov	fp, r1
 80079fa:	4640      	mov	r0, r8
 80079fc:	4649      	mov	r1, r9
 80079fe:	2200      	movs	r2, #0
 8007a00:	f7f8 fe02 	bl	8000608 <__aeabi_dmul>
 8007a04:	4680      	mov	r8, r0
 8007a06:	4689      	mov	r9, r1
 8007a08:	e7c6      	b.n	8007998 <_dtoa_r+0x510>
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	f7f8 fdfb 	bl	8000608 <__aeabi_dmul>
 8007a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a14:	9d01      	ldr	r5, [sp, #4]
 8007a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a18:	4682      	mov	sl, r0
 8007a1a:	468b      	mov	fp, r1
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	4640      	mov	r0, r8
 8007a20:	f7f9 f8a2 	bl	8000b68 <__aeabi_d2iz>
 8007a24:	4606      	mov	r6, r0
 8007a26:	f7f8 fd85 	bl	8000534 <__aeabi_i2d>
 8007a2a:	3630      	adds	r6, #48	; 0x30
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f8 fc30 	bl	8000298 <__aeabi_dsub>
 8007a38:	f805 6b01 	strb.w	r6, [r5], #1
 8007a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a3e:	429d      	cmp	r5, r3
 8007a40:	4680      	mov	r8, r0
 8007a42:	4689      	mov	r9, r1
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	d124      	bne.n	8007a94 <_dtoa_r+0x60c>
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <_dtoa_r+0x630>)
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	4659      	mov	r1, fp
 8007a50:	f7f8 fc24 	bl	800029c <__adddf3>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4640      	mov	r0, r8
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	f7f9 f864 	bl	8000b28 <__aeabi_dcmpgt>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d173      	bne.n	8007b4c <_dtoa_r+0x6c4>
 8007a64:	4652      	mov	r2, sl
 8007a66:	465b      	mov	r3, fp
 8007a68:	4913      	ldr	r1, [pc, #76]	; (8007ab8 <_dtoa_r+0x630>)
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	f7f8 fc14 	bl	8000298 <__aeabi_dsub>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f9 f838 	bl	8000aec <__aeabi_dcmplt>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f43f af35 	beq.w	80078ec <_dtoa_r+0x464>
 8007a82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a84:	1e6b      	subs	r3, r5, #1
 8007a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a8c:	2b30      	cmp	r3, #48	; 0x30
 8007a8e:	d0f8      	beq.n	8007a82 <_dtoa_r+0x5fa>
 8007a90:	9700      	str	r7, [sp, #0]
 8007a92:	e049      	b.n	8007b28 <_dtoa_r+0x6a0>
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <_dtoa_r+0x624>)
 8007a96:	f7f8 fdb7 	bl	8000608 <__aeabi_dmul>
 8007a9a:	4680      	mov	r8, r0
 8007a9c:	4689      	mov	r9, r1
 8007a9e:	e7bd      	b.n	8007a1c <_dtoa_r+0x594>
 8007aa0:	0800a410 	.word	0x0800a410
 8007aa4:	0800a3e8 	.word	0x0800a3e8
 8007aa8:	3ff00000 	.word	0x3ff00000
 8007aac:	40240000 	.word	0x40240000
 8007ab0:	401c0000 	.word	0x401c0000
 8007ab4:	40140000 	.word	0x40140000
 8007ab8:	3fe00000 	.word	0x3fe00000
 8007abc:	9d01      	ldr	r5, [sp, #4]
 8007abe:	4656      	mov	r6, sl
 8007ac0:	465f      	mov	r7, fp
 8007ac2:	4642      	mov	r2, r8
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	4639      	mov	r1, r7
 8007aca:	f7f8 fec7 	bl	800085c <__aeabi_ddiv>
 8007ace:	f7f9 f84b 	bl	8000b68 <__aeabi_d2iz>
 8007ad2:	4682      	mov	sl, r0
 8007ad4:	f7f8 fd2e 	bl	8000534 <__aeabi_i2d>
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	f7f8 fd94 	bl	8000608 <__aeabi_dmul>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007aec:	f7f8 fbd4 	bl	8000298 <__aeabi_dsub>
 8007af0:	f805 6b01 	strb.w	r6, [r5], #1
 8007af4:	9e01      	ldr	r6, [sp, #4]
 8007af6:	9f03      	ldr	r7, [sp, #12]
 8007af8:	1bae      	subs	r6, r5, r6
 8007afa:	42b7      	cmp	r7, r6
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	d135      	bne.n	8007b6e <_dtoa_r+0x6e6>
 8007b02:	f7f8 fbcb 	bl	800029c <__adddf3>
 8007b06:	4642      	mov	r2, r8
 8007b08:	464b      	mov	r3, r9
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460f      	mov	r7, r1
 8007b0e:	f7f9 f80b 	bl	8000b28 <__aeabi_dcmpgt>
 8007b12:	b9d0      	cbnz	r0, 8007b4a <_dtoa_r+0x6c2>
 8007b14:	4642      	mov	r2, r8
 8007b16:	464b      	mov	r3, r9
 8007b18:	4630      	mov	r0, r6
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	f7f8 ffdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b20:	b110      	cbz	r0, 8007b28 <_dtoa_r+0x6a0>
 8007b22:	f01a 0f01 	tst.w	sl, #1
 8007b26:	d110      	bne.n	8007b4a <_dtoa_r+0x6c2>
 8007b28:	4620      	mov	r0, r4
 8007b2a:	ee18 1a10 	vmov	r1, s16
 8007b2e:	f000 fe75 	bl	800881c <_Bfree>
 8007b32:	2300      	movs	r3, #0
 8007b34:	9800      	ldr	r0, [sp, #0]
 8007b36:	702b      	strb	r3, [r5, #0]
 8007b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	6018      	str	r0, [r3, #0]
 8007b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f43f acf1 	beq.w	8007528 <_dtoa_r+0xa0>
 8007b46:	601d      	str	r5, [r3, #0]
 8007b48:	e4ee      	b.n	8007528 <_dtoa_r+0xa0>
 8007b4a:	9f00      	ldr	r7, [sp, #0]
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	461d      	mov	r5, r3
 8007b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b54:	2a39      	cmp	r2, #57	; 0x39
 8007b56:	d106      	bne.n	8007b66 <_dtoa_r+0x6de>
 8007b58:	9a01      	ldr	r2, [sp, #4]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d1f7      	bne.n	8007b4e <_dtoa_r+0x6c6>
 8007b5e:	9901      	ldr	r1, [sp, #4]
 8007b60:	2230      	movs	r2, #48	; 0x30
 8007b62:	3701      	adds	r7, #1
 8007b64:	700a      	strb	r2, [r1, #0]
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	3201      	adds	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	e790      	b.n	8007a90 <_dtoa_r+0x608>
 8007b6e:	4ba6      	ldr	r3, [pc, #664]	; (8007e08 <_dtoa_r+0x980>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	f7f8 fd49 	bl	8000608 <__aeabi_dmul>
 8007b76:	2200      	movs	r2, #0
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	460f      	mov	r7, r1
 8007b7e:	f7f8 ffab 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d09d      	beq.n	8007ac2 <_dtoa_r+0x63a>
 8007b86:	e7cf      	b.n	8007b28 <_dtoa_r+0x6a0>
 8007b88:	9a08      	ldr	r2, [sp, #32]
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	f000 80d7 	beq.w	8007d3e <_dtoa_r+0x8b6>
 8007b90:	9a06      	ldr	r2, [sp, #24]
 8007b92:	2a01      	cmp	r2, #1
 8007b94:	f300 80ba 	bgt.w	8007d0c <_dtoa_r+0x884>
 8007b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	f000 80b2 	beq.w	8007d04 <_dtoa_r+0x87c>
 8007ba0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ba4:	9e07      	ldr	r6, [sp, #28]
 8007ba6:	9d04      	ldr	r5, [sp, #16]
 8007ba8:	9a04      	ldr	r2, [sp, #16]
 8007baa:	441a      	add	r2, r3
 8007bac:	9204      	str	r2, [sp, #16]
 8007bae:	9a05      	ldr	r2, [sp, #20]
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	441a      	add	r2, r3
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	9205      	str	r2, [sp, #20]
 8007bb8:	f000 ff32 	bl	8008a20 <__i2b>
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	dd0c      	ble.n	8007bdc <_dtoa_r+0x754>
 8007bc2:	9b05      	ldr	r3, [sp, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd09      	ble.n	8007bdc <_dtoa_r+0x754>
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	9a04      	ldr	r2, [sp, #16]
 8007bcc:	bfa8      	it	ge
 8007bce:	462b      	movge	r3, r5
 8007bd0:	1ad2      	subs	r2, r2, r3
 8007bd2:	9204      	str	r2, [sp, #16]
 8007bd4:	9a05      	ldr	r2, [sp, #20]
 8007bd6:	1aed      	subs	r5, r5, r3
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	9305      	str	r3, [sp, #20]
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	b31b      	cbz	r3, 8007c28 <_dtoa_r+0x7a0>
 8007be0:	9b08      	ldr	r3, [sp, #32]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 80af 	beq.w	8007d46 <_dtoa_r+0x8be>
 8007be8:	2e00      	cmp	r6, #0
 8007bea:	dd13      	ble.n	8007c14 <_dtoa_r+0x78c>
 8007bec:	4639      	mov	r1, r7
 8007bee:	4632      	mov	r2, r6
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 ffd5 	bl	8008ba0 <__pow5mult>
 8007bf6:	ee18 2a10 	vmov	r2, s16
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 ff24 	bl	8008a4c <__multiply>
 8007c04:	ee18 1a10 	vmov	r1, s16
 8007c08:	4680      	mov	r8, r0
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 fe06 	bl	800881c <_Bfree>
 8007c10:	ee08 8a10 	vmov	s16, r8
 8007c14:	9b07      	ldr	r3, [sp, #28]
 8007c16:	1b9a      	subs	r2, r3, r6
 8007c18:	d006      	beq.n	8007c28 <_dtoa_r+0x7a0>
 8007c1a:	ee18 1a10 	vmov	r1, s16
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 ffbe 	bl	8008ba0 <__pow5mult>
 8007c24:	ee08 0a10 	vmov	s16, r0
 8007c28:	2101      	movs	r1, #1
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 fef8 	bl	8008a20 <__i2b>
 8007c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	4606      	mov	r6, r0
 8007c36:	f340 8088 	ble.w	8007d4a <_dtoa_r+0x8c2>
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4601      	mov	r1, r0
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 ffae 	bl	8008ba0 <__pow5mult>
 8007c44:	9b06      	ldr	r3, [sp, #24]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	4606      	mov	r6, r0
 8007c4a:	f340 8081 	ble.w	8007d50 <_dtoa_r+0x8c8>
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	6933      	ldr	r3, [r6, #16]
 8007c54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c58:	6918      	ldr	r0, [r3, #16]
 8007c5a:	f000 fe91 	bl	8008980 <__hi0bits>
 8007c5e:	f1c0 0020 	rsb	r0, r0, #32
 8007c62:	9b05      	ldr	r3, [sp, #20]
 8007c64:	4418      	add	r0, r3
 8007c66:	f010 001f 	ands.w	r0, r0, #31
 8007c6a:	f000 8092 	beq.w	8007d92 <_dtoa_r+0x90a>
 8007c6e:	f1c0 0320 	rsb	r3, r0, #32
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	f340 808a 	ble.w	8007d8c <_dtoa_r+0x904>
 8007c78:	f1c0 001c 	rsb	r0, r0, #28
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	4403      	add	r3, r0
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	9b05      	ldr	r3, [sp, #20]
 8007c84:	4403      	add	r3, r0
 8007c86:	4405      	add	r5, r0
 8007c88:	9305      	str	r3, [sp, #20]
 8007c8a:	9b04      	ldr	r3, [sp, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dd07      	ble.n	8007ca0 <_dtoa_r+0x818>
 8007c90:	ee18 1a10 	vmov	r1, s16
 8007c94:	461a      	mov	r2, r3
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 ffdc 	bl	8008c54 <__lshift>
 8007c9c:	ee08 0a10 	vmov	s16, r0
 8007ca0:	9b05      	ldr	r3, [sp, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dd05      	ble.n	8007cb2 <_dtoa_r+0x82a>
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 ffd2 	bl	8008c54 <__lshift>
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d06e      	beq.n	8007d96 <_dtoa_r+0x90e>
 8007cb8:	ee18 0a10 	vmov	r0, s16
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	f001 f839 	bl	8008d34 <__mcmp>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	da67      	bge.n	8007d96 <_dtoa_r+0x90e>
 8007cc6:	9b00      	ldr	r3, [sp, #0]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	ee18 1a10 	vmov	r1, s16
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	220a      	movs	r2, #10
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fdc3 	bl	8008860 <__multadd>
 8007cda:	9b08      	ldr	r3, [sp, #32]
 8007cdc:	ee08 0a10 	vmov	s16, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 81b1 	beq.w	8008048 <_dtoa_r+0xbc0>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4639      	mov	r1, r7
 8007cea:	220a      	movs	r2, #10
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fdb7 	bl	8008860 <__multadd>
 8007cf2:	9b02      	ldr	r3, [sp, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	f300 808e 	bgt.w	8007e18 <_dtoa_r+0x990>
 8007cfc:	9b06      	ldr	r3, [sp, #24]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	dc51      	bgt.n	8007da6 <_dtoa_r+0x91e>
 8007d02:	e089      	b.n	8007e18 <_dtoa_r+0x990>
 8007d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d0a:	e74b      	b.n	8007ba4 <_dtoa_r+0x71c>
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	1e5e      	subs	r6, r3, #1
 8007d10:	9b07      	ldr	r3, [sp, #28]
 8007d12:	42b3      	cmp	r3, r6
 8007d14:	bfbf      	itttt	lt
 8007d16:	9b07      	ldrlt	r3, [sp, #28]
 8007d18:	9607      	strlt	r6, [sp, #28]
 8007d1a:	1af2      	sublt	r2, r6, r3
 8007d1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d1e:	bfb6      	itet	lt
 8007d20:	189b      	addlt	r3, r3, r2
 8007d22:	1b9e      	subge	r6, r3, r6
 8007d24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d26:	9b03      	ldr	r3, [sp, #12]
 8007d28:	bfb8      	it	lt
 8007d2a:	2600      	movlt	r6, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bfb7      	itett	lt
 8007d30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d38:	1a9d      	sublt	r5, r3, r2
 8007d3a:	2300      	movlt	r3, #0
 8007d3c:	e734      	b.n	8007ba8 <_dtoa_r+0x720>
 8007d3e:	9e07      	ldr	r6, [sp, #28]
 8007d40:	9d04      	ldr	r5, [sp, #16]
 8007d42:	9f08      	ldr	r7, [sp, #32]
 8007d44:	e73b      	b.n	8007bbe <_dtoa_r+0x736>
 8007d46:	9a07      	ldr	r2, [sp, #28]
 8007d48:	e767      	b.n	8007c1a <_dtoa_r+0x792>
 8007d4a:	9b06      	ldr	r3, [sp, #24]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	dc18      	bgt.n	8007d82 <_dtoa_r+0x8fa>
 8007d50:	f1ba 0f00 	cmp.w	sl, #0
 8007d54:	d115      	bne.n	8007d82 <_dtoa_r+0x8fa>
 8007d56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d5a:	b993      	cbnz	r3, 8007d82 <_dtoa_r+0x8fa>
 8007d5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d60:	0d1b      	lsrs	r3, r3, #20
 8007d62:	051b      	lsls	r3, r3, #20
 8007d64:	b183      	cbz	r3, 8007d88 <_dtoa_r+0x900>
 8007d66:	9b04      	ldr	r3, [sp, #16]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	9304      	str	r3, [sp, #16]
 8007d6c:	9b05      	ldr	r3, [sp, #20]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	f04f 0801 	mov.w	r8, #1
 8007d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f47f af6a 	bne.w	8007c52 <_dtoa_r+0x7ca>
 8007d7e:	2001      	movs	r0, #1
 8007d80:	e76f      	b.n	8007c62 <_dtoa_r+0x7da>
 8007d82:	f04f 0800 	mov.w	r8, #0
 8007d86:	e7f6      	b.n	8007d76 <_dtoa_r+0x8ee>
 8007d88:	4698      	mov	r8, r3
 8007d8a:	e7f4      	b.n	8007d76 <_dtoa_r+0x8ee>
 8007d8c:	f43f af7d 	beq.w	8007c8a <_dtoa_r+0x802>
 8007d90:	4618      	mov	r0, r3
 8007d92:	301c      	adds	r0, #28
 8007d94:	e772      	b.n	8007c7c <_dtoa_r+0x7f4>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dc37      	bgt.n	8007e0c <_dtoa_r+0x984>
 8007d9c:	9b06      	ldr	r3, [sp, #24]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	dd34      	ble.n	8007e0c <_dtoa_r+0x984>
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	9302      	str	r3, [sp, #8]
 8007da6:	9b02      	ldr	r3, [sp, #8]
 8007da8:	b96b      	cbnz	r3, 8007dc6 <_dtoa_r+0x93e>
 8007daa:	4631      	mov	r1, r6
 8007dac:	2205      	movs	r2, #5
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 fd56 	bl	8008860 <__multadd>
 8007db4:	4601      	mov	r1, r0
 8007db6:	4606      	mov	r6, r0
 8007db8:	ee18 0a10 	vmov	r0, s16
 8007dbc:	f000 ffba 	bl	8008d34 <__mcmp>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	f73f adbb 	bgt.w	800793c <_dtoa_r+0x4b4>
 8007dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc8:	9d01      	ldr	r5, [sp, #4]
 8007dca:	43db      	mvns	r3, r3
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	f04f 0800 	mov.w	r8, #0
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fd21 	bl	800881c <_Bfree>
 8007dda:	2f00      	cmp	r7, #0
 8007ddc:	f43f aea4 	beq.w	8007b28 <_dtoa_r+0x6a0>
 8007de0:	f1b8 0f00 	cmp.w	r8, #0
 8007de4:	d005      	beq.n	8007df2 <_dtoa_r+0x96a>
 8007de6:	45b8      	cmp	r8, r7
 8007de8:	d003      	beq.n	8007df2 <_dtoa_r+0x96a>
 8007dea:	4641      	mov	r1, r8
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 fd15 	bl	800881c <_Bfree>
 8007df2:	4639      	mov	r1, r7
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 fd11 	bl	800881c <_Bfree>
 8007dfa:	e695      	b.n	8007b28 <_dtoa_r+0x6a0>
 8007dfc:	2600      	movs	r6, #0
 8007dfe:	4637      	mov	r7, r6
 8007e00:	e7e1      	b.n	8007dc6 <_dtoa_r+0x93e>
 8007e02:	9700      	str	r7, [sp, #0]
 8007e04:	4637      	mov	r7, r6
 8007e06:	e599      	b.n	800793c <_dtoa_r+0x4b4>
 8007e08:	40240000 	.word	0x40240000
 8007e0c:	9b08      	ldr	r3, [sp, #32]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80ca 	beq.w	8007fa8 <_dtoa_r+0xb20>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	9302      	str	r3, [sp, #8]
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	dd05      	ble.n	8007e28 <_dtoa_r+0x9a0>
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	462a      	mov	r2, r5
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 ff17 	bl	8008c54 <__lshift>
 8007e26:	4607      	mov	r7, r0
 8007e28:	f1b8 0f00 	cmp.w	r8, #0
 8007e2c:	d05b      	beq.n	8007ee6 <_dtoa_r+0xa5e>
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 fcb3 	bl	800879c <_Balloc>
 8007e36:	4605      	mov	r5, r0
 8007e38:	b928      	cbnz	r0, 8007e46 <_dtoa_r+0x9be>
 8007e3a:	4b87      	ldr	r3, [pc, #540]	; (8008058 <_dtoa_r+0xbd0>)
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e42:	f7ff bb3b 	b.w	80074bc <_dtoa_r+0x34>
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	3202      	adds	r2, #2
 8007e4a:	0092      	lsls	r2, r2, #2
 8007e4c:	f107 010c 	add.w	r1, r7, #12
 8007e50:	300c      	adds	r0, #12
 8007e52:	f000 fc95 	bl	8008780 <memcpy>
 8007e56:	2201      	movs	r2, #1
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fefa 	bl	8008c54 <__lshift>
 8007e60:	9b01      	ldr	r3, [sp, #4]
 8007e62:	f103 0901 	add.w	r9, r3, #1
 8007e66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	9305      	str	r3, [sp, #20]
 8007e6e:	f00a 0301 	and.w	r3, sl, #1
 8007e72:	46b8      	mov	r8, r7
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	4607      	mov	r7, r0
 8007e78:	4631      	mov	r1, r6
 8007e7a:	ee18 0a10 	vmov	r0, s16
 8007e7e:	f7ff fa75 	bl	800736c <quorem>
 8007e82:	4641      	mov	r1, r8
 8007e84:	9002      	str	r0, [sp, #8]
 8007e86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e8a:	ee18 0a10 	vmov	r0, s16
 8007e8e:	f000 ff51 	bl	8008d34 <__mcmp>
 8007e92:	463a      	mov	r2, r7
 8007e94:	9003      	str	r0, [sp, #12]
 8007e96:	4631      	mov	r1, r6
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 ff67 	bl	8008d6c <__mdiff>
 8007e9e:	68c2      	ldr	r2, [r0, #12]
 8007ea0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	bb02      	cbnz	r2, 8007eea <_dtoa_r+0xa62>
 8007ea8:	4601      	mov	r1, r0
 8007eaa:	ee18 0a10 	vmov	r0, s16
 8007eae:	f000 ff41 	bl	8008d34 <__mcmp>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	9207      	str	r2, [sp, #28]
 8007eba:	f000 fcaf 	bl	800881c <_Bfree>
 8007ebe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007ec2:	ea43 0102 	orr.w	r1, r3, r2
 8007ec6:	9b04      	ldr	r3, [sp, #16]
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	464d      	mov	r5, r9
 8007ecc:	d10f      	bne.n	8007eee <_dtoa_r+0xa66>
 8007ece:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ed2:	d02a      	beq.n	8007f2a <_dtoa_r+0xaa2>
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dd02      	ble.n	8007ee0 <_dtoa_r+0xa58>
 8007eda:	9b02      	ldr	r3, [sp, #8]
 8007edc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007ee0:	f88b a000 	strb.w	sl, [fp]
 8007ee4:	e775      	b.n	8007dd2 <_dtoa_r+0x94a>
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	e7ba      	b.n	8007e60 <_dtoa_r+0x9d8>
 8007eea:	2201      	movs	r2, #1
 8007eec:	e7e2      	b.n	8007eb4 <_dtoa_r+0xa2c>
 8007eee:	9b03      	ldr	r3, [sp, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	db04      	blt.n	8007efe <_dtoa_r+0xa76>
 8007ef4:	9906      	ldr	r1, [sp, #24]
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	9904      	ldr	r1, [sp, #16]
 8007efa:	430b      	orrs	r3, r1
 8007efc:	d122      	bne.n	8007f44 <_dtoa_r+0xabc>
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	ddee      	ble.n	8007ee0 <_dtoa_r+0xa58>
 8007f02:	ee18 1a10 	vmov	r1, s16
 8007f06:	2201      	movs	r2, #1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fea3 	bl	8008c54 <__lshift>
 8007f0e:	4631      	mov	r1, r6
 8007f10:	ee08 0a10 	vmov	s16, r0
 8007f14:	f000 ff0e 	bl	8008d34 <__mcmp>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	dc03      	bgt.n	8007f24 <_dtoa_r+0xa9c>
 8007f1c:	d1e0      	bne.n	8007ee0 <_dtoa_r+0xa58>
 8007f1e:	f01a 0f01 	tst.w	sl, #1
 8007f22:	d0dd      	beq.n	8007ee0 <_dtoa_r+0xa58>
 8007f24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f28:	d1d7      	bne.n	8007eda <_dtoa_r+0xa52>
 8007f2a:	2339      	movs	r3, #57	; 0x39
 8007f2c:	f88b 3000 	strb.w	r3, [fp]
 8007f30:	462b      	mov	r3, r5
 8007f32:	461d      	mov	r5, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f3a:	2a39      	cmp	r2, #57	; 0x39
 8007f3c:	d071      	beq.n	8008022 <_dtoa_r+0xb9a>
 8007f3e:	3201      	adds	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	e746      	b.n	8007dd2 <_dtoa_r+0x94a>
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	dd07      	ble.n	8007f58 <_dtoa_r+0xad0>
 8007f48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f4c:	d0ed      	beq.n	8007f2a <_dtoa_r+0xaa2>
 8007f4e:	f10a 0301 	add.w	r3, sl, #1
 8007f52:	f88b 3000 	strb.w	r3, [fp]
 8007f56:	e73c      	b.n	8007dd2 <_dtoa_r+0x94a>
 8007f58:	9b05      	ldr	r3, [sp, #20]
 8007f5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f5e:	4599      	cmp	r9, r3
 8007f60:	d047      	beq.n	8007ff2 <_dtoa_r+0xb6a>
 8007f62:	ee18 1a10 	vmov	r1, s16
 8007f66:	2300      	movs	r3, #0
 8007f68:	220a      	movs	r2, #10
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fc78 	bl	8008860 <__multadd>
 8007f70:	45b8      	cmp	r8, r7
 8007f72:	ee08 0a10 	vmov	s16, r0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	f04f 020a 	mov.w	r2, #10
 8007f7e:	4641      	mov	r1, r8
 8007f80:	4620      	mov	r0, r4
 8007f82:	d106      	bne.n	8007f92 <_dtoa_r+0xb0a>
 8007f84:	f000 fc6c 	bl	8008860 <__multadd>
 8007f88:	4680      	mov	r8, r0
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	f109 0901 	add.w	r9, r9, #1
 8007f90:	e772      	b.n	8007e78 <_dtoa_r+0x9f0>
 8007f92:	f000 fc65 	bl	8008860 <__multadd>
 8007f96:	4639      	mov	r1, r7
 8007f98:	4680      	mov	r8, r0
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 fc5e 	bl	8008860 <__multadd>
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	e7f1      	b.n	8007f8c <_dtoa_r+0xb04>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	9302      	str	r3, [sp, #8]
 8007fac:	9d01      	ldr	r5, [sp, #4]
 8007fae:	ee18 0a10 	vmov	r0, s16
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	f7ff f9da 	bl	800736c <quorem>
 8007fb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	f805 ab01 	strb.w	sl, [r5], #1
 8007fc2:	1aea      	subs	r2, r5, r3
 8007fc4:	9b02      	ldr	r3, [sp, #8]
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	dd09      	ble.n	8007fde <_dtoa_r+0xb56>
 8007fca:	ee18 1a10 	vmov	r1, s16
 8007fce:	2300      	movs	r3, #0
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fc44 	bl	8008860 <__multadd>
 8007fd8:	ee08 0a10 	vmov	s16, r0
 8007fdc:	e7e7      	b.n	8007fae <_dtoa_r+0xb26>
 8007fde:	9b02      	ldr	r3, [sp, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bfc8      	it	gt
 8007fe4:	461d      	movgt	r5, r3
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	bfd8      	it	le
 8007fea:	2501      	movle	r5, #1
 8007fec:	441d      	add	r5, r3
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	ee18 1a10 	vmov	r1, s16
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fe2b 	bl	8008c54 <__lshift>
 8007ffe:	4631      	mov	r1, r6
 8008000:	ee08 0a10 	vmov	s16, r0
 8008004:	f000 fe96 	bl	8008d34 <__mcmp>
 8008008:	2800      	cmp	r0, #0
 800800a:	dc91      	bgt.n	8007f30 <_dtoa_r+0xaa8>
 800800c:	d102      	bne.n	8008014 <_dtoa_r+0xb8c>
 800800e:	f01a 0f01 	tst.w	sl, #1
 8008012:	d18d      	bne.n	8007f30 <_dtoa_r+0xaa8>
 8008014:	462b      	mov	r3, r5
 8008016:	461d      	mov	r5, r3
 8008018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800801c:	2a30      	cmp	r2, #48	; 0x30
 800801e:	d0fa      	beq.n	8008016 <_dtoa_r+0xb8e>
 8008020:	e6d7      	b.n	8007dd2 <_dtoa_r+0x94a>
 8008022:	9a01      	ldr	r2, [sp, #4]
 8008024:	429a      	cmp	r2, r3
 8008026:	d184      	bne.n	8007f32 <_dtoa_r+0xaaa>
 8008028:	9b00      	ldr	r3, [sp, #0]
 800802a:	3301      	adds	r3, #1
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	2331      	movs	r3, #49	; 0x31
 8008030:	7013      	strb	r3, [r2, #0]
 8008032:	e6ce      	b.n	8007dd2 <_dtoa_r+0x94a>
 8008034:	4b09      	ldr	r3, [pc, #36]	; (800805c <_dtoa_r+0xbd4>)
 8008036:	f7ff ba95 	b.w	8007564 <_dtoa_r+0xdc>
 800803a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800803c:	2b00      	cmp	r3, #0
 800803e:	f47f aa6e 	bne.w	800751e <_dtoa_r+0x96>
 8008042:	4b07      	ldr	r3, [pc, #28]	; (8008060 <_dtoa_r+0xbd8>)
 8008044:	f7ff ba8e 	b.w	8007564 <_dtoa_r+0xdc>
 8008048:	9b02      	ldr	r3, [sp, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	dcae      	bgt.n	8007fac <_dtoa_r+0xb24>
 800804e:	9b06      	ldr	r3, [sp, #24]
 8008050:	2b02      	cmp	r3, #2
 8008052:	f73f aea8 	bgt.w	8007da6 <_dtoa_r+0x91e>
 8008056:	e7a9      	b.n	8007fac <_dtoa_r+0xb24>
 8008058:	0800a2ff 	.word	0x0800a2ff
 800805c:	0800a20c 	.word	0x0800a20c
 8008060:	0800a280 	.word	0x0800a280

08008064 <rshift>:
 8008064:	6903      	ldr	r3, [r0, #16]
 8008066:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800806a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800806e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008072:	f100 0414 	add.w	r4, r0, #20
 8008076:	dd45      	ble.n	8008104 <rshift+0xa0>
 8008078:	f011 011f 	ands.w	r1, r1, #31
 800807c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008080:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008084:	d10c      	bne.n	80080a0 <rshift+0x3c>
 8008086:	f100 0710 	add.w	r7, r0, #16
 800808a:	4629      	mov	r1, r5
 800808c:	42b1      	cmp	r1, r6
 800808e:	d334      	bcc.n	80080fa <rshift+0x96>
 8008090:	1a9b      	subs	r3, r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	1eea      	subs	r2, r5, #3
 8008096:	4296      	cmp	r6, r2
 8008098:	bf38      	it	cc
 800809a:	2300      	movcc	r3, #0
 800809c:	4423      	add	r3, r4
 800809e:	e015      	b.n	80080cc <rshift+0x68>
 80080a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80080a4:	f1c1 0820 	rsb	r8, r1, #32
 80080a8:	40cf      	lsrs	r7, r1
 80080aa:	f105 0e04 	add.w	lr, r5, #4
 80080ae:	46a1      	mov	r9, r4
 80080b0:	4576      	cmp	r6, lr
 80080b2:	46f4      	mov	ip, lr
 80080b4:	d815      	bhi.n	80080e2 <rshift+0x7e>
 80080b6:	1a9a      	subs	r2, r3, r2
 80080b8:	0092      	lsls	r2, r2, #2
 80080ba:	3a04      	subs	r2, #4
 80080bc:	3501      	adds	r5, #1
 80080be:	42ae      	cmp	r6, r5
 80080c0:	bf38      	it	cc
 80080c2:	2200      	movcc	r2, #0
 80080c4:	18a3      	adds	r3, r4, r2
 80080c6:	50a7      	str	r7, [r4, r2]
 80080c8:	b107      	cbz	r7, 80080cc <rshift+0x68>
 80080ca:	3304      	adds	r3, #4
 80080cc:	1b1a      	subs	r2, r3, r4
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080d4:	bf08      	it	eq
 80080d6:	2300      	moveq	r3, #0
 80080d8:	6102      	str	r2, [r0, #16]
 80080da:	bf08      	it	eq
 80080dc:	6143      	streq	r3, [r0, #20]
 80080de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080e2:	f8dc c000 	ldr.w	ip, [ip]
 80080e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80080ea:	ea4c 0707 	orr.w	r7, ip, r7
 80080ee:	f849 7b04 	str.w	r7, [r9], #4
 80080f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080f6:	40cf      	lsrs	r7, r1
 80080f8:	e7da      	b.n	80080b0 <rshift+0x4c>
 80080fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80080fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008102:	e7c3      	b.n	800808c <rshift+0x28>
 8008104:	4623      	mov	r3, r4
 8008106:	e7e1      	b.n	80080cc <rshift+0x68>

08008108 <__hexdig_fun>:
 8008108:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800810c:	2b09      	cmp	r3, #9
 800810e:	d802      	bhi.n	8008116 <__hexdig_fun+0xe>
 8008110:	3820      	subs	r0, #32
 8008112:	b2c0      	uxtb	r0, r0
 8008114:	4770      	bx	lr
 8008116:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800811a:	2b05      	cmp	r3, #5
 800811c:	d801      	bhi.n	8008122 <__hexdig_fun+0x1a>
 800811e:	3847      	subs	r0, #71	; 0x47
 8008120:	e7f7      	b.n	8008112 <__hexdig_fun+0xa>
 8008122:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008126:	2b05      	cmp	r3, #5
 8008128:	d801      	bhi.n	800812e <__hexdig_fun+0x26>
 800812a:	3827      	subs	r0, #39	; 0x27
 800812c:	e7f1      	b.n	8008112 <__hexdig_fun+0xa>
 800812e:	2000      	movs	r0, #0
 8008130:	4770      	bx	lr
	...

08008134 <__gethex>:
 8008134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	ed2d 8b02 	vpush	{d8}
 800813c:	b089      	sub	sp, #36	; 0x24
 800813e:	ee08 0a10 	vmov	s16, r0
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	4bb4      	ldr	r3, [pc, #720]	; (8008418 <__gethex+0x2e4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	4618      	mov	r0, r3
 800814c:	468b      	mov	fp, r1
 800814e:	4690      	mov	r8, r2
 8008150:	f7f8 f846 	bl	80001e0 <strlen>
 8008154:	9b01      	ldr	r3, [sp, #4]
 8008156:	f8db 2000 	ldr.w	r2, [fp]
 800815a:	4403      	add	r3, r0
 800815c:	4682      	mov	sl, r0
 800815e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	1c93      	adds	r3, r2, #2
 8008166:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800816a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800816e:	32fe      	adds	r2, #254	; 0xfe
 8008170:	18d1      	adds	r1, r2, r3
 8008172:	461f      	mov	r7, r3
 8008174:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008178:	9100      	str	r1, [sp, #0]
 800817a:	2830      	cmp	r0, #48	; 0x30
 800817c:	d0f8      	beq.n	8008170 <__gethex+0x3c>
 800817e:	f7ff ffc3 	bl	8008108 <__hexdig_fun>
 8008182:	4604      	mov	r4, r0
 8008184:	2800      	cmp	r0, #0
 8008186:	d13a      	bne.n	80081fe <__gethex+0xca>
 8008188:	9901      	ldr	r1, [sp, #4]
 800818a:	4652      	mov	r2, sl
 800818c:	4638      	mov	r0, r7
 800818e:	f001 fa33 	bl	80095f8 <strncmp>
 8008192:	4605      	mov	r5, r0
 8008194:	2800      	cmp	r0, #0
 8008196:	d168      	bne.n	800826a <__gethex+0x136>
 8008198:	f817 000a 	ldrb.w	r0, [r7, sl]
 800819c:	eb07 060a 	add.w	r6, r7, sl
 80081a0:	f7ff ffb2 	bl	8008108 <__hexdig_fun>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d062      	beq.n	800826e <__gethex+0x13a>
 80081a8:	4633      	mov	r3, r6
 80081aa:	7818      	ldrb	r0, [r3, #0]
 80081ac:	2830      	cmp	r0, #48	; 0x30
 80081ae:	461f      	mov	r7, r3
 80081b0:	f103 0301 	add.w	r3, r3, #1
 80081b4:	d0f9      	beq.n	80081aa <__gethex+0x76>
 80081b6:	f7ff ffa7 	bl	8008108 <__hexdig_fun>
 80081ba:	2301      	movs	r3, #1
 80081bc:	fab0 f480 	clz	r4, r0
 80081c0:	0964      	lsrs	r4, r4, #5
 80081c2:	4635      	mov	r5, r6
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	463a      	mov	r2, r7
 80081c8:	4616      	mov	r6, r2
 80081ca:	3201      	adds	r2, #1
 80081cc:	7830      	ldrb	r0, [r6, #0]
 80081ce:	f7ff ff9b 	bl	8008108 <__hexdig_fun>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d1f8      	bne.n	80081c8 <__gethex+0x94>
 80081d6:	9901      	ldr	r1, [sp, #4]
 80081d8:	4652      	mov	r2, sl
 80081da:	4630      	mov	r0, r6
 80081dc:	f001 fa0c 	bl	80095f8 <strncmp>
 80081e0:	b980      	cbnz	r0, 8008204 <__gethex+0xd0>
 80081e2:	b94d      	cbnz	r5, 80081f8 <__gethex+0xc4>
 80081e4:	eb06 050a 	add.w	r5, r6, sl
 80081e8:	462a      	mov	r2, r5
 80081ea:	4616      	mov	r6, r2
 80081ec:	3201      	adds	r2, #1
 80081ee:	7830      	ldrb	r0, [r6, #0]
 80081f0:	f7ff ff8a 	bl	8008108 <__hexdig_fun>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d1f8      	bne.n	80081ea <__gethex+0xb6>
 80081f8:	1bad      	subs	r5, r5, r6
 80081fa:	00ad      	lsls	r5, r5, #2
 80081fc:	e004      	b.n	8008208 <__gethex+0xd4>
 80081fe:	2400      	movs	r4, #0
 8008200:	4625      	mov	r5, r4
 8008202:	e7e0      	b.n	80081c6 <__gethex+0x92>
 8008204:	2d00      	cmp	r5, #0
 8008206:	d1f7      	bne.n	80081f8 <__gethex+0xc4>
 8008208:	7833      	ldrb	r3, [r6, #0]
 800820a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800820e:	2b50      	cmp	r3, #80	; 0x50
 8008210:	d13b      	bne.n	800828a <__gethex+0x156>
 8008212:	7873      	ldrb	r3, [r6, #1]
 8008214:	2b2b      	cmp	r3, #43	; 0x2b
 8008216:	d02c      	beq.n	8008272 <__gethex+0x13e>
 8008218:	2b2d      	cmp	r3, #45	; 0x2d
 800821a:	d02e      	beq.n	800827a <__gethex+0x146>
 800821c:	1c71      	adds	r1, r6, #1
 800821e:	f04f 0900 	mov.w	r9, #0
 8008222:	7808      	ldrb	r0, [r1, #0]
 8008224:	f7ff ff70 	bl	8008108 <__hexdig_fun>
 8008228:	1e43      	subs	r3, r0, #1
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b18      	cmp	r3, #24
 800822e:	d82c      	bhi.n	800828a <__gethex+0x156>
 8008230:	f1a0 0210 	sub.w	r2, r0, #16
 8008234:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008238:	f7ff ff66 	bl	8008108 <__hexdig_fun>
 800823c:	1e43      	subs	r3, r0, #1
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b18      	cmp	r3, #24
 8008242:	d91d      	bls.n	8008280 <__gethex+0x14c>
 8008244:	f1b9 0f00 	cmp.w	r9, #0
 8008248:	d000      	beq.n	800824c <__gethex+0x118>
 800824a:	4252      	negs	r2, r2
 800824c:	4415      	add	r5, r2
 800824e:	f8cb 1000 	str.w	r1, [fp]
 8008252:	b1e4      	cbz	r4, 800828e <__gethex+0x15a>
 8008254:	9b00      	ldr	r3, [sp, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	bf14      	ite	ne
 800825a:	2700      	movne	r7, #0
 800825c:	2706      	moveq	r7, #6
 800825e:	4638      	mov	r0, r7
 8008260:	b009      	add	sp, #36	; 0x24
 8008262:	ecbd 8b02 	vpop	{d8}
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	463e      	mov	r6, r7
 800826c:	4625      	mov	r5, r4
 800826e:	2401      	movs	r4, #1
 8008270:	e7ca      	b.n	8008208 <__gethex+0xd4>
 8008272:	f04f 0900 	mov.w	r9, #0
 8008276:	1cb1      	adds	r1, r6, #2
 8008278:	e7d3      	b.n	8008222 <__gethex+0xee>
 800827a:	f04f 0901 	mov.w	r9, #1
 800827e:	e7fa      	b.n	8008276 <__gethex+0x142>
 8008280:	230a      	movs	r3, #10
 8008282:	fb03 0202 	mla	r2, r3, r2, r0
 8008286:	3a10      	subs	r2, #16
 8008288:	e7d4      	b.n	8008234 <__gethex+0x100>
 800828a:	4631      	mov	r1, r6
 800828c:	e7df      	b.n	800824e <__gethex+0x11a>
 800828e:	1bf3      	subs	r3, r6, r7
 8008290:	3b01      	subs	r3, #1
 8008292:	4621      	mov	r1, r4
 8008294:	2b07      	cmp	r3, #7
 8008296:	dc0b      	bgt.n	80082b0 <__gethex+0x17c>
 8008298:	ee18 0a10 	vmov	r0, s16
 800829c:	f000 fa7e 	bl	800879c <_Balloc>
 80082a0:	4604      	mov	r4, r0
 80082a2:	b940      	cbnz	r0, 80082b6 <__gethex+0x182>
 80082a4:	4b5d      	ldr	r3, [pc, #372]	; (800841c <__gethex+0x2e8>)
 80082a6:	4602      	mov	r2, r0
 80082a8:	21de      	movs	r1, #222	; 0xde
 80082aa:	485d      	ldr	r0, [pc, #372]	; (8008420 <__gethex+0x2ec>)
 80082ac:	f001 f9c6 	bl	800963c <__assert_func>
 80082b0:	3101      	adds	r1, #1
 80082b2:	105b      	asrs	r3, r3, #1
 80082b4:	e7ee      	b.n	8008294 <__gethex+0x160>
 80082b6:	f100 0914 	add.w	r9, r0, #20
 80082ba:	f04f 0b00 	mov.w	fp, #0
 80082be:	f1ca 0301 	rsb	r3, sl, #1
 80082c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80082c6:	f8cd b000 	str.w	fp, [sp]
 80082ca:	9306      	str	r3, [sp, #24]
 80082cc:	42b7      	cmp	r7, r6
 80082ce:	d340      	bcc.n	8008352 <__gethex+0x21e>
 80082d0:	9802      	ldr	r0, [sp, #8]
 80082d2:	9b00      	ldr	r3, [sp, #0]
 80082d4:	f840 3b04 	str.w	r3, [r0], #4
 80082d8:	eba0 0009 	sub.w	r0, r0, r9
 80082dc:	1080      	asrs	r0, r0, #2
 80082de:	0146      	lsls	r6, r0, #5
 80082e0:	6120      	str	r0, [r4, #16]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fb4c 	bl	8008980 <__hi0bits>
 80082e8:	1a30      	subs	r0, r6, r0
 80082ea:	f8d8 6000 	ldr.w	r6, [r8]
 80082ee:	42b0      	cmp	r0, r6
 80082f0:	dd63      	ble.n	80083ba <__gethex+0x286>
 80082f2:	1b87      	subs	r7, r0, r6
 80082f4:	4639      	mov	r1, r7
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 fef0 	bl	80090dc <__any_on>
 80082fc:	4682      	mov	sl, r0
 80082fe:	b1a8      	cbz	r0, 800832c <__gethex+0x1f8>
 8008300:	1e7b      	subs	r3, r7, #1
 8008302:	1159      	asrs	r1, r3, #5
 8008304:	f003 021f 	and.w	r2, r3, #31
 8008308:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800830c:	f04f 0a01 	mov.w	sl, #1
 8008310:	fa0a f202 	lsl.w	r2, sl, r2
 8008314:	420a      	tst	r2, r1
 8008316:	d009      	beq.n	800832c <__gethex+0x1f8>
 8008318:	4553      	cmp	r3, sl
 800831a:	dd05      	ble.n	8008328 <__gethex+0x1f4>
 800831c:	1eb9      	subs	r1, r7, #2
 800831e:	4620      	mov	r0, r4
 8008320:	f000 fedc 	bl	80090dc <__any_on>
 8008324:	2800      	cmp	r0, #0
 8008326:	d145      	bne.n	80083b4 <__gethex+0x280>
 8008328:	f04f 0a02 	mov.w	sl, #2
 800832c:	4639      	mov	r1, r7
 800832e:	4620      	mov	r0, r4
 8008330:	f7ff fe98 	bl	8008064 <rshift>
 8008334:	443d      	add	r5, r7
 8008336:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800833a:	42ab      	cmp	r3, r5
 800833c:	da4c      	bge.n	80083d8 <__gethex+0x2a4>
 800833e:	ee18 0a10 	vmov	r0, s16
 8008342:	4621      	mov	r1, r4
 8008344:	f000 fa6a 	bl	800881c <_Bfree>
 8008348:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800834a:	2300      	movs	r3, #0
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	27a3      	movs	r7, #163	; 0xa3
 8008350:	e785      	b.n	800825e <__gethex+0x12a>
 8008352:	1e73      	subs	r3, r6, #1
 8008354:	9a05      	ldr	r2, [sp, #20]
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800835c:	4293      	cmp	r3, r2
 800835e:	d019      	beq.n	8008394 <__gethex+0x260>
 8008360:	f1bb 0f20 	cmp.w	fp, #32
 8008364:	d107      	bne.n	8008376 <__gethex+0x242>
 8008366:	9b02      	ldr	r3, [sp, #8]
 8008368:	9a00      	ldr	r2, [sp, #0]
 800836a:	f843 2b04 	str.w	r2, [r3], #4
 800836e:	9302      	str	r3, [sp, #8]
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	469b      	mov	fp, r3
 8008376:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800837a:	f7ff fec5 	bl	8008108 <__hexdig_fun>
 800837e:	9b00      	ldr	r3, [sp, #0]
 8008380:	f000 000f 	and.w	r0, r0, #15
 8008384:	fa00 f00b 	lsl.w	r0, r0, fp
 8008388:	4303      	orrs	r3, r0
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	f10b 0b04 	add.w	fp, fp, #4
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	e00d      	b.n	80083b0 <__gethex+0x27c>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	9a06      	ldr	r2, [sp, #24]
 8008398:	4413      	add	r3, r2
 800839a:	42bb      	cmp	r3, r7
 800839c:	d3e0      	bcc.n	8008360 <__gethex+0x22c>
 800839e:	4618      	mov	r0, r3
 80083a0:	9901      	ldr	r1, [sp, #4]
 80083a2:	9307      	str	r3, [sp, #28]
 80083a4:	4652      	mov	r2, sl
 80083a6:	f001 f927 	bl	80095f8 <strncmp>
 80083aa:	9b07      	ldr	r3, [sp, #28]
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d1d7      	bne.n	8008360 <__gethex+0x22c>
 80083b0:	461e      	mov	r6, r3
 80083b2:	e78b      	b.n	80082cc <__gethex+0x198>
 80083b4:	f04f 0a03 	mov.w	sl, #3
 80083b8:	e7b8      	b.n	800832c <__gethex+0x1f8>
 80083ba:	da0a      	bge.n	80083d2 <__gethex+0x29e>
 80083bc:	1a37      	subs	r7, r6, r0
 80083be:	4621      	mov	r1, r4
 80083c0:	ee18 0a10 	vmov	r0, s16
 80083c4:	463a      	mov	r2, r7
 80083c6:	f000 fc45 	bl	8008c54 <__lshift>
 80083ca:	1bed      	subs	r5, r5, r7
 80083cc:	4604      	mov	r4, r0
 80083ce:	f100 0914 	add.w	r9, r0, #20
 80083d2:	f04f 0a00 	mov.w	sl, #0
 80083d6:	e7ae      	b.n	8008336 <__gethex+0x202>
 80083d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80083dc:	42a8      	cmp	r0, r5
 80083de:	dd72      	ble.n	80084c6 <__gethex+0x392>
 80083e0:	1b45      	subs	r5, r0, r5
 80083e2:	42ae      	cmp	r6, r5
 80083e4:	dc36      	bgt.n	8008454 <__gethex+0x320>
 80083e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d02a      	beq.n	8008444 <__gethex+0x310>
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d02c      	beq.n	800844c <__gethex+0x318>
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d11c      	bne.n	8008430 <__gethex+0x2fc>
 80083f6:	42ae      	cmp	r6, r5
 80083f8:	d11a      	bne.n	8008430 <__gethex+0x2fc>
 80083fa:	2e01      	cmp	r6, #1
 80083fc:	d112      	bne.n	8008424 <__gethex+0x2f0>
 80083fe:	9a04      	ldr	r2, [sp, #16]
 8008400:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	2301      	movs	r3, #1
 8008408:	6123      	str	r3, [r4, #16]
 800840a:	f8c9 3000 	str.w	r3, [r9]
 800840e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008410:	2762      	movs	r7, #98	; 0x62
 8008412:	601c      	str	r4, [r3, #0]
 8008414:	e723      	b.n	800825e <__gethex+0x12a>
 8008416:	bf00      	nop
 8008418:	0800a378 	.word	0x0800a378
 800841c:	0800a2ff 	.word	0x0800a2ff
 8008420:	0800a310 	.word	0x0800a310
 8008424:	1e71      	subs	r1, r6, #1
 8008426:	4620      	mov	r0, r4
 8008428:	f000 fe58 	bl	80090dc <__any_on>
 800842c:	2800      	cmp	r0, #0
 800842e:	d1e6      	bne.n	80083fe <__gethex+0x2ca>
 8008430:	ee18 0a10 	vmov	r0, s16
 8008434:	4621      	mov	r1, r4
 8008436:	f000 f9f1 	bl	800881c <_Bfree>
 800843a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800843c:	2300      	movs	r3, #0
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	2750      	movs	r7, #80	; 0x50
 8008442:	e70c      	b.n	800825e <__gethex+0x12a>
 8008444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f2      	bne.n	8008430 <__gethex+0x2fc>
 800844a:	e7d8      	b.n	80083fe <__gethex+0x2ca>
 800844c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1d5      	bne.n	80083fe <__gethex+0x2ca>
 8008452:	e7ed      	b.n	8008430 <__gethex+0x2fc>
 8008454:	1e6f      	subs	r7, r5, #1
 8008456:	f1ba 0f00 	cmp.w	sl, #0
 800845a:	d131      	bne.n	80084c0 <__gethex+0x38c>
 800845c:	b127      	cbz	r7, 8008468 <__gethex+0x334>
 800845e:	4639      	mov	r1, r7
 8008460:	4620      	mov	r0, r4
 8008462:	f000 fe3b 	bl	80090dc <__any_on>
 8008466:	4682      	mov	sl, r0
 8008468:	117b      	asrs	r3, r7, #5
 800846a:	2101      	movs	r1, #1
 800846c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008470:	f007 071f 	and.w	r7, r7, #31
 8008474:	fa01 f707 	lsl.w	r7, r1, r7
 8008478:	421f      	tst	r7, r3
 800847a:	4629      	mov	r1, r5
 800847c:	4620      	mov	r0, r4
 800847e:	bf18      	it	ne
 8008480:	f04a 0a02 	orrne.w	sl, sl, #2
 8008484:	1b76      	subs	r6, r6, r5
 8008486:	f7ff fded 	bl	8008064 <rshift>
 800848a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800848e:	2702      	movs	r7, #2
 8008490:	f1ba 0f00 	cmp.w	sl, #0
 8008494:	d048      	beq.n	8008528 <__gethex+0x3f4>
 8008496:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d015      	beq.n	80084ca <__gethex+0x396>
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d017      	beq.n	80084d2 <__gethex+0x39e>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d109      	bne.n	80084ba <__gethex+0x386>
 80084a6:	f01a 0f02 	tst.w	sl, #2
 80084aa:	d006      	beq.n	80084ba <__gethex+0x386>
 80084ac:	f8d9 0000 	ldr.w	r0, [r9]
 80084b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80084b4:	f01a 0f01 	tst.w	sl, #1
 80084b8:	d10e      	bne.n	80084d8 <__gethex+0x3a4>
 80084ba:	f047 0710 	orr.w	r7, r7, #16
 80084be:	e033      	b.n	8008528 <__gethex+0x3f4>
 80084c0:	f04f 0a01 	mov.w	sl, #1
 80084c4:	e7d0      	b.n	8008468 <__gethex+0x334>
 80084c6:	2701      	movs	r7, #1
 80084c8:	e7e2      	b.n	8008490 <__gethex+0x35c>
 80084ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084cc:	f1c3 0301 	rsb	r3, r3, #1
 80084d0:	9315      	str	r3, [sp, #84]	; 0x54
 80084d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0f0      	beq.n	80084ba <__gethex+0x386>
 80084d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80084dc:	f104 0314 	add.w	r3, r4, #20
 80084e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80084e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80084e8:	f04f 0c00 	mov.w	ip, #0
 80084ec:	4618      	mov	r0, r3
 80084ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80084f6:	d01c      	beq.n	8008532 <__gethex+0x3fe>
 80084f8:	3201      	adds	r2, #1
 80084fa:	6002      	str	r2, [r0, #0]
 80084fc:	2f02      	cmp	r7, #2
 80084fe:	f104 0314 	add.w	r3, r4, #20
 8008502:	d13f      	bne.n	8008584 <__gethex+0x450>
 8008504:	f8d8 2000 	ldr.w	r2, [r8]
 8008508:	3a01      	subs	r2, #1
 800850a:	42b2      	cmp	r2, r6
 800850c:	d10a      	bne.n	8008524 <__gethex+0x3f0>
 800850e:	1171      	asrs	r1, r6, #5
 8008510:	2201      	movs	r2, #1
 8008512:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008516:	f006 061f 	and.w	r6, r6, #31
 800851a:	fa02 f606 	lsl.w	r6, r2, r6
 800851e:	421e      	tst	r6, r3
 8008520:	bf18      	it	ne
 8008522:	4617      	movne	r7, r2
 8008524:	f047 0720 	orr.w	r7, r7, #32
 8008528:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800852a:	601c      	str	r4, [r3, #0]
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	601d      	str	r5, [r3, #0]
 8008530:	e695      	b.n	800825e <__gethex+0x12a>
 8008532:	4299      	cmp	r1, r3
 8008534:	f843 cc04 	str.w	ip, [r3, #-4]
 8008538:	d8d8      	bhi.n	80084ec <__gethex+0x3b8>
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	459b      	cmp	fp, r3
 800853e:	db19      	blt.n	8008574 <__gethex+0x440>
 8008540:	6861      	ldr	r1, [r4, #4]
 8008542:	ee18 0a10 	vmov	r0, s16
 8008546:	3101      	adds	r1, #1
 8008548:	f000 f928 	bl	800879c <_Balloc>
 800854c:	4681      	mov	r9, r0
 800854e:	b918      	cbnz	r0, 8008558 <__gethex+0x424>
 8008550:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <__gethex+0x488>)
 8008552:	4602      	mov	r2, r0
 8008554:	2184      	movs	r1, #132	; 0x84
 8008556:	e6a8      	b.n	80082aa <__gethex+0x176>
 8008558:	6922      	ldr	r2, [r4, #16]
 800855a:	3202      	adds	r2, #2
 800855c:	f104 010c 	add.w	r1, r4, #12
 8008560:	0092      	lsls	r2, r2, #2
 8008562:	300c      	adds	r0, #12
 8008564:	f000 f90c 	bl	8008780 <memcpy>
 8008568:	4621      	mov	r1, r4
 800856a:	ee18 0a10 	vmov	r0, s16
 800856e:	f000 f955 	bl	800881c <_Bfree>
 8008572:	464c      	mov	r4, r9
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800857c:	6122      	str	r2, [r4, #16]
 800857e:	2201      	movs	r2, #1
 8008580:	615a      	str	r2, [r3, #20]
 8008582:	e7bb      	b.n	80084fc <__gethex+0x3c8>
 8008584:	6922      	ldr	r2, [r4, #16]
 8008586:	455a      	cmp	r2, fp
 8008588:	dd0b      	ble.n	80085a2 <__gethex+0x46e>
 800858a:	2101      	movs	r1, #1
 800858c:	4620      	mov	r0, r4
 800858e:	f7ff fd69 	bl	8008064 <rshift>
 8008592:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008596:	3501      	adds	r5, #1
 8008598:	42ab      	cmp	r3, r5
 800859a:	f6ff aed0 	blt.w	800833e <__gethex+0x20a>
 800859e:	2701      	movs	r7, #1
 80085a0:	e7c0      	b.n	8008524 <__gethex+0x3f0>
 80085a2:	f016 061f 	ands.w	r6, r6, #31
 80085a6:	d0fa      	beq.n	800859e <__gethex+0x46a>
 80085a8:	4453      	add	r3, sl
 80085aa:	f1c6 0620 	rsb	r6, r6, #32
 80085ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80085b2:	f000 f9e5 	bl	8008980 <__hi0bits>
 80085b6:	42b0      	cmp	r0, r6
 80085b8:	dbe7      	blt.n	800858a <__gethex+0x456>
 80085ba:	e7f0      	b.n	800859e <__gethex+0x46a>
 80085bc:	0800a2ff 	.word	0x0800a2ff

080085c0 <L_shift>:
 80085c0:	f1c2 0208 	rsb	r2, r2, #8
 80085c4:	0092      	lsls	r2, r2, #2
 80085c6:	b570      	push	{r4, r5, r6, lr}
 80085c8:	f1c2 0620 	rsb	r6, r2, #32
 80085cc:	6843      	ldr	r3, [r0, #4]
 80085ce:	6804      	ldr	r4, [r0, #0]
 80085d0:	fa03 f506 	lsl.w	r5, r3, r6
 80085d4:	432c      	orrs	r4, r5
 80085d6:	40d3      	lsrs	r3, r2
 80085d8:	6004      	str	r4, [r0, #0]
 80085da:	f840 3f04 	str.w	r3, [r0, #4]!
 80085de:	4288      	cmp	r0, r1
 80085e0:	d3f4      	bcc.n	80085cc <L_shift+0xc>
 80085e2:	bd70      	pop	{r4, r5, r6, pc}

080085e4 <__match>:
 80085e4:	b530      	push	{r4, r5, lr}
 80085e6:	6803      	ldr	r3, [r0, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ee:	b914      	cbnz	r4, 80085f6 <__match+0x12>
 80085f0:	6003      	str	r3, [r0, #0]
 80085f2:	2001      	movs	r0, #1
 80085f4:	bd30      	pop	{r4, r5, pc}
 80085f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80085fe:	2d19      	cmp	r5, #25
 8008600:	bf98      	it	ls
 8008602:	3220      	addls	r2, #32
 8008604:	42a2      	cmp	r2, r4
 8008606:	d0f0      	beq.n	80085ea <__match+0x6>
 8008608:	2000      	movs	r0, #0
 800860a:	e7f3      	b.n	80085f4 <__match+0x10>

0800860c <__hexnan>:
 800860c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008610:	680b      	ldr	r3, [r1, #0]
 8008612:	115e      	asrs	r6, r3, #5
 8008614:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008618:	f013 031f 	ands.w	r3, r3, #31
 800861c:	b087      	sub	sp, #28
 800861e:	bf18      	it	ne
 8008620:	3604      	addne	r6, #4
 8008622:	2500      	movs	r5, #0
 8008624:	1f37      	subs	r7, r6, #4
 8008626:	4690      	mov	r8, r2
 8008628:	6802      	ldr	r2, [r0, #0]
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	4682      	mov	sl, r0
 800862e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008632:	46b9      	mov	r9, r7
 8008634:	463c      	mov	r4, r7
 8008636:	9502      	str	r5, [sp, #8]
 8008638:	46ab      	mov	fp, r5
 800863a:	7851      	ldrb	r1, [r2, #1]
 800863c:	1c53      	adds	r3, r2, #1
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	b341      	cbz	r1, 8008694 <__hexnan+0x88>
 8008642:	4608      	mov	r0, r1
 8008644:	9205      	str	r2, [sp, #20]
 8008646:	9104      	str	r1, [sp, #16]
 8008648:	f7ff fd5e 	bl	8008108 <__hexdig_fun>
 800864c:	2800      	cmp	r0, #0
 800864e:	d14f      	bne.n	80086f0 <__hexnan+0xe4>
 8008650:	9904      	ldr	r1, [sp, #16]
 8008652:	9a05      	ldr	r2, [sp, #20]
 8008654:	2920      	cmp	r1, #32
 8008656:	d818      	bhi.n	800868a <__hexnan+0x7e>
 8008658:	9b02      	ldr	r3, [sp, #8]
 800865a:	459b      	cmp	fp, r3
 800865c:	dd13      	ble.n	8008686 <__hexnan+0x7a>
 800865e:	454c      	cmp	r4, r9
 8008660:	d206      	bcs.n	8008670 <__hexnan+0x64>
 8008662:	2d07      	cmp	r5, #7
 8008664:	dc04      	bgt.n	8008670 <__hexnan+0x64>
 8008666:	462a      	mov	r2, r5
 8008668:	4649      	mov	r1, r9
 800866a:	4620      	mov	r0, r4
 800866c:	f7ff ffa8 	bl	80085c0 <L_shift>
 8008670:	4544      	cmp	r4, r8
 8008672:	d950      	bls.n	8008716 <__hexnan+0x10a>
 8008674:	2300      	movs	r3, #0
 8008676:	f1a4 0904 	sub.w	r9, r4, #4
 800867a:	f844 3c04 	str.w	r3, [r4, #-4]
 800867e:	f8cd b008 	str.w	fp, [sp, #8]
 8008682:	464c      	mov	r4, r9
 8008684:	461d      	mov	r5, r3
 8008686:	9a03      	ldr	r2, [sp, #12]
 8008688:	e7d7      	b.n	800863a <__hexnan+0x2e>
 800868a:	2929      	cmp	r1, #41	; 0x29
 800868c:	d156      	bne.n	800873c <__hexnan+0x130>
 800868e:	3202      	adds	r2, #2
 8008690:	f8ca 2000 	str.w	r2, [sl]
 8008694:	f1bb 0f00 	cmp.w	fp, #0
 8008698:	d050      	beq.n	800873c <__hexnan+0x130>
 800869a:	454c      	cmp	r4, r9
 800869c:	d206      	bcs.n	80086ac <__hexnan+0xa0>
 800869e:	2d07      	cmp	r5, #7
 80086a0:	dc04      	bgt.n	80086ac <__hexnan+0xa0>
 80086a2:	462a      	mov	r2, r5
 80086a4:	4649      	mov	r1, r9
 80086a6:	4620      	mov	r0, r4
 80086a8:	f7ff ff8a 	bl	80085c0 <L_shift>
 80086ac:	4544      	cmp	r4, r8
 80086ae:	d934      	bls.n	800871a <__hexnan+0x10e>
 80086b0:	f1a8 0204 	sub.w	r2, r8, #4
 80086b4:	4623      	mov	r3, r4
 80086b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80086ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80086be:	429f      	cmp	r7, r3
 80086c0:	d2f9      	bcs.n	80086b6 <__hexnan+0xaa>
 80086c2:	1b3b      	subs	r3, r7, r4
 80086c4:	f023 0303 	bic.w	r3, r3, #3
 80086c8:	3304      	adds	r3, #4
 80086ca:	3401      	adds	r4, #1
 80086cc:	3e03      	subs	r6, #3
 80086ce:	42b4      	cmp	r4, r6
 80086d0:	bf88      	it	hi
 80086d2:	2304      	movhi	r3, #4
 80086d4:	4443      	add	r3, r8
 80086d6:	2200      	movs	r2, #0
 80086d8:	f843 2b04 	str.w	r2, [r3], #4
 80086dc:	429f      	cmp	r7, r3
 80086de:	d2fb      	bcs.n	80086d8 <__hexnan+0xcc>
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	b91b      	cbnz	r3, 80086ec <__hexnan+0xe0>
 80086e4:	4547      	cmp	r7, r8
 80086e6:	d127      	bne.n	8008738 <__hexnan+0x12c>
 80086e8:	2301      	movs	r3, #1
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	2005      	movs	r0, #5
 80086ee:	e026      	b.n	800873e <__hexnan+0x132>
 80086f0:	3501      	adds	r5, #1
 80086f2:	2d08      	cmp	r5, #8
 80086f4:	f10b 0b01 	add.w	fp, fp, #1
 80086f8:	dd06      	ble.n	8008708 <__hexnan+0xfc>
 80086fa:	4544      	cmp	r4, r8
 80086fc:	d9c3      	bls.n	8008686 <__hexnan+0x7a>
 80086fe:	2300      	movs	r3, #0
 8008700:	f844 3c04 	str.w	r3, [r4, #-4]
 8008704:	2501      	movs	r5, #1
 8008706:	3c04      	subs	r4, #4
 8008708:	6822      	ldr	r2, [r4, #0]
 800870a:	f000 000f 	and.w	r0, r0, #15
 800870e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	e7b7      	b.n	8008686 <__hexnan+0x7a>
 8008716:	2508      	movs	r5, #8
 8008718:	e7b5      	b.n	8008686 <__hexnan+0x7a>
 800871a:	9b01      	ldr	r3, [sp, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0df      	beq.n	80086e0 <__hexnan+0xd4>
 8008720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008724:	f1c3 0320 	rsb	r3, r3, #32
 8008728:	fa22 f303 	lsr.w	r3, r2, r3
 800872c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008730:	401a      	ands	r2, r3
 8008732:	f846 2c04 	str.w	r2, [r6, #-4]
 8008736:	e7d3      	b.n	80086e0 <__hexnan+0xd4>
 8008738:	3f04      	subs	r7, #4
 800873a:	e7d1      	b.n	80086e0 <__hexnan+0xd4>
 800873c:	2004      	movs	r0, #4
 800873e:	b007      	add	sp, #28
 8008740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008744 <_localeconv_r>:
 8008744:	4800      	ldr	r0, [pc, #0]	; (8008748 <_localeconv_r+0x4>)
 8008746:	4770      	bx	lr
 8008748:	20000168 	.word	0x20000168

0800874c <malloc>:
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <malloc+0xc>)
 800874e:	4601      	mov	r1, r0
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	f000 bd67 	b.w	8009224 <_malloc_r>
 8008756:	bf00      	nop
 8008758:	20000010 	.word	0x20000010

0800875c <__ascii_mbtowc>:
 800875c:	b082      	sub	sp, #8
 800875e:	b901      	cbnz	r1, 8008762 <__ascii_mbtowc+0x6>
 8008760:	a901      	add	r1, sp, #4
 8008762:	b142      	cbz	r2, 8008776 <__ascii_mbtowc+0x1a>
 8008764:	b14b      	cbz	r3, 800877a <__ascii_mbtowc+0x1e>
 8008766:	7813      	ldrb	r3, [r2, #0]
 8008768:	600b      	str	r3, [r1, #0]
 800876a:	7812      	ldrb	r2, [r2, #0]
 800876c:	1e10      	subs	r0, r2, #0
 800876e:	bf18      	it	ne
 8008770:	2001      	movne	r0, #1
 8008772:	b002      	add	sp, #8
 8008774:	4770      	bx	lr
 8008776:	4610      	mov	r0, r2
 8008778:	e7fb      	b.n	8008772 <__ascii_mbtowc+0x16>
 800877a:	f06f 0001 	mvn.w	r0, #1
 800877e:	e7f8      	b.n	8008772 <__ascii_mbtowc+0x16>

08008780 <memcpy>:
 8008780:	440a      	add	r2, r1
 8008782:	4291      	cmp	r1, r2
 8008784:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008788:	d100      	bne.n	800878c <memcpy+0xc>
 800878a:	4770      	bx	lr
 800878c:	b510      	push	{r4, lr}
 800878e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008796:	4291      	cmp	r1, r2
 8008798:	d1f9      	bne.n	800878e <memcpy+0xe>
 800879a:	bd10      	pop	{r4, pc}

0800879c <_Balloc>:
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087a0:	4604      	mov	r4, r0
 80087a2:	460d      	mov	r5, r1
 80087a4:	b976      	cbnz	r6, 80087c4 <_Balloc+0x28>
 80087a6:	2010      	movs	r0, #16
 80087a8:	f7ff ffd0 	bl	800874c <malloc>
 80087ac:	4602      	mov	r2, r0
 80087ae:	6260      	str	r0, [r4, #36]	; 0x24
 80087b0:	b920      	cbnz	r0, 80087bc <_Balloc+0x20>
 80087b2:	4b18      	ldr	r3, [pc, #96]	; (8008814 <_Balloc+0x78>)
 80087b4:	4818      	ldr	r0, [pc, #96]	; (8008818 <_Balloc+0x7c>)
 80087b6:	2166      	movs	r1, #102	; 0x66
 80087b8:	f000 ff40 	bl	800963c <__assert_func>
 80087bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087c0:	6006      	str	r6, [r0, #0]
 80087c2:	60c6      	str	r6, [r0, #12]
 80087c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087c6:	68f3      	ldr	r3, [r6, #12]
 80087c8:	b183      	cbz	r3, 80087ec <_Balloc+0x50>
 80087ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087d2:	b9b8      	cbnz	r0, 8008804 <_Balloc+0x68>
 80087d4:	2101      	movs	r1, #1
 80087d6:	fa01 f605 	lsl.w	r6, r1, r5
 80087da:	1d72      	adds	r2, r6, #5
 80087dc:	0092      	lsls	r2, r2, #2
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 fc9d 	bl	800911e <_calloc_r>
 80087e4:	b160      	cbz	r0, 8008800 <_Balloc+0x64>
 80087e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087ea:	e00e      	b.n	800880a <_Balloc+0x6e>
 80087ec:	2221      	movs	r2, #33	; 0x21
 80087ee:	2104      	movs	r1, #4
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 fc94 	bl	800911e <_calloc_r>
 80087f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087f8:	60f0      	str	r0, [r6, #12]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e4      	bne.n	80087ca <_Balloc+0x2e>
 8008800:	2000      	movs	r0, #0
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	6802      	ldr	r2, [r0, #0]
 8008806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800880a:	2300      	movs	r3, #0
 800880c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008810:	e7f7      	b.n	8008802 <_Balloc+0x66>
 8008812:	bf00      	nop
 8008814:	0800a28d 	.word	0x0800a28d
 8008818:	0800a38c 	.word	0x0800a38c

0800881c <_Bfree>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008820:	4605      	mov	r5, r0
 8008822:	460c      	mov	r4, r1
 8008824:	b976      	cbnz	r6, 8008844 <_Bfree+0x28>
 8008826:	2010      	movs	r0, #16
 8008828:	f7ff ff90 	bl	800874c <malloc>
 800882c:	4602      	mov	r2, r0
 800882e:	6268      	str	r0, [r5, #36]	; 0x24
 8008830:	b920      	cbnz	r0, 800883c <_Bfree+0x20>
 8008832:	4b09      	ldr	r3, [pc, #36]	; (8008858 <_Bfree+0x3c>)
 8008834:	4809      	ldr	r0, [pc, #36]	; (800885c <_Bfree+0x40>)
 8008836:	218a      	movs	r1, #138	; 0x8a
 8008838:	f000 ff00 	bl	800963c <__assert_func>
 800883c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008840:	6006      	str	r6, [r0, #0]
 8008842:	60c6      	str	r6, [r0, #12]
 8008844:	b13c      	cbz	r4, 8008856 <_Bfree+0x3a>
 8008846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008848:	6862      	ldr	r2, [r4, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008850:	6021      	str	r1, [r4, #0]
 8008852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	0800a28d 	.word	0x0800a28d
 800885c:	0800a38c 	.word	0x0800a38c

08008860 <__multadd>:
 8008860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008864:	690d      	ldr	r5, [r1, #16]
 8008866:	4607      	mov	r7, r0
 8008868:	460c      	mov	r4, r1
 800886a:	461e      	mov	r6, r3
 800886c:	f101 0c14 	add.w	ip, r1, #20
 8008870:	2000      	movs	r0, #0
 8008872:	f8dc 3000 	ldr.w	r3, [ip]
 8008876:	b299      	uxth	r1, r3
 8008878:	fb02 6101 	mla	r1, r2, r1, r6
 800887c:	0c1e      	lsrs	r6, r3, #16
 800887e:	0c0b      	lsrs	r3, r1, #16
 8008880:	fb02 3306 	mla	r3, r2, r6, r3
 8008884:	b289      	uxth	r1, r1
 8008886:	3001      	adds	r0, #1
 8008888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800888c:	4285      	cmp	r5, r0
 800888e:	f84c 1b04 	str.w	r1, [ip], #4
 8008892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008896:	dcec      	bgt.n	8008872 <__multadd+0x12>
 8008898:	b30e      	cbz	r6, 80088de <__multadd+0x7e>
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	42ab      	cmp	r3, r5
 800889e:	dc19      	bgt.n	80088d4 <__multadd+0x74>
 80088a0:	6861      	ldr	r1, [r4, #4]
 80088a2:	4638      	mov	r0, r7
 80088a4:	3101      	adds	r1, #1
 80088a6:	f7ff ff79 	bl	800879c <_Balloc>
 80088aa:	4680      	mov	r8, r0
 80088ac:	b928      	cbnz	r0, 80088ba <__multadd+0x5a>
 80088ae:	4602      	mov	r2, r0
 80088b0:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <__multadd+0x84>)
 80088b2:	480d      	ldr	r0, [pc, #52]	; (80088e8 <__multadd+0x88>)
 80088b4:	21b5      	movs	r1, #181	; 0xb5
 80088b6:	f000 fec1 	bl	800963c <__assert_func>
 80088ba:	6922      	ldr	r2, [r4, #16]
 80088bc:	3202      	adds	r2, #2
 80088be:	f104 010c 	add.w	r1, r4, #12
 80088c2:	0092      	lsls	r2, r2, #2
 80088c4:	300c      	adds	r0, #12
 80088c6:	f7ff ff5b 	bl	8008780 <memcpy>
 80088ca:	4621      	mov	r1, r4
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ffa5 	bl	800881c <_Bfree>
 80088d2:	4644      	mov	r4, r8
 80088d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088d8:	3501      	adds	r5, #1
 80088da:	615e      	str	r6, [r3, #20]
 80088dc:	6125      	str	r5, [r4, #16]
 80088de:	4620      	mov	r0, r4
 80088e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e4:	0800a2ff 	.word	0x0800a2ff
 80088e8:	0800a38c 	.word	0x0800a38c

080088ec <__s2b>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	460c      	mov	r4, r1
 80088f2:	4615      	mov	r5, r2
 80088f4:	461f      	mov	r7, r3
 80088f6:	2209      	movs	r2, #9
 80088f8:	3308      	adds	r3, #8
 80088fa:	4606      	mov	r6, r0
 80088fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008900:	2100      	movs	r1, #0
 8008902:	2201      	movs	r2, #1
 8008904:	429a      	cmp	r2, r3
 8008906:	db09      	blt.n	800891c <__s2b+0x30>
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff ff47 	bl	800879c <_Balloc>
 800890e:	b940      	cbnz	r0, 8008922 <__s2b+0x36>
 8008910:	4602      	mov	r2, r0
 8008912:	4b19      	ldr	r3, [pc, #100]	; (8008978 <__s2b+0x8c>)
 8008914:	4819      	ldr	r0, [pc, #100]	; (800897c <__s2b+0x90>)
 8008916:	21ce      	movs	r1, #206	; 0xce
 8008918:	f000 fe90 	bl	800963c <__assert_func>
 800891c:	0052      	lsls	r2, r2, #1
 800891e:	3101      	adds	r1, #1
 8008920:	e7f0      	b.n	8008904 <__s2b+0x18>
 8008922:	9b08      	ldr	r3, [sp, #32]
 8008924:	6143      	str	r3, [r0, #20]
 8008926:	2d09      	cmp	r5, #9
 8008928:	f04f 0301 	mov.w	r3, #1
 800892c:	6103      	str	r3, [r0, #16]
 800892e:	dd16      	ble.n	800895e <__s2b+0x72>
 8008930:	f104 0909 	add.w	r9, r4, #9
 8008934:	46c8      	mov	r8, r9
 8008936:	442c      	add	r4, r5
 8008938:	f818 3b01 	ldrb.w	r3, [r8], #1
 800893c:	4601      	mov	r1, r0
 800893e:	3b30      	subs	r3, #48	; 0x30
 8008940:	220a      	movs	r2, #10
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ff8c 	bl	8008860 <__multadd>
 8008948:	45a0      	cmp	r8, r4
 800894a:	d1f5      	bne.n	8008938 <__s2b+0x4c>
 800894c:	f1a5 0408 	sub.w	r4, r5, #8
 8008950:	444c      	add	r4, r9
 8008952:	1b2d      	subs	r5, r5, r4
 8008954:	1963      	adds	r3, r4, r5
 8008956:	42bb      	cmp	r3, r7
 8008958:	db04      	blt.n	8008964 <__s2b+0x78>
 800895a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895e:	340a      	adds	r4, #10
 8008960:	2509      	movs	r5, #9
 8008962:	e7f6      	b.n	8008952 <__s2b+0x66>
 8008964:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008968:	4601      	mov	r1, r0
 800896a:	3b30      	subs	r3, #48	; 0x30
 800896c:	220a      	movs	r2, #10
 800896e:	4630      	mov	r0, r6
 8008970:	f7ff ff76 	bl	8008860 <__multadd>
 8008974:	e7ee      	b.n	8008954 <__s2b+0x68>
 8008976:	bf00      	nop
 8008978:	0800a2ff 	.word	0x0800a2ff
 800897c:	0800a38c 	.word	0x0800a38c

08008980 <__hi0bits>:
 8008980:	0c03      	lsrs	r3, r0, #16
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	b9d3      	cbnz	r3, 80089bc <__hi0bits+0x3c>
 8008986:	0400      	lsls	r0, r0, #16
 8008988:	2310      	movs	r3, #16
 800898a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800898e:	bf04      	itt	eq
 8008990:	0200      	lsleq	r0, r0, #8
 8008992:	3308      	addeq	r3, #8
 8008994:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008998:	bf04      	itt	eq
 800899a:	0100      	lsleq	r0, r0, #4
 800899c:	3304      	addeq	r3, #4
 800899e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089a2:	bf04      	itt	eq
 80089a4:	0080      	lsleq	r0, r0, #2
 80089a6:	3302      	addeq	r3, #2
 80089a8:	2800      	cmp	r0, #0
 80089aa:	db05      	blt.n	80089b8 <__hi0bits+0x38>
 80089ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089b0:	f103 0301 	add.w	r3, r3, #1
 80089b4:	bf08      	it	eq
 80089b6:	2320      	moveq	r3, #32
 80089b8:	4618      	mov	r0, r3
 80089ba:	4770      	bx	lr
 80089bc:	2300      	movs	r3, #0
 80089be:	e7e4      	b.n	800898a <__hi0bits+0xa>

080089c0 <__lo0bits>:
 80089c0:	6803      	ldr	r3, [r0, #0]
 80089c2:	f013 0207 	ands.w	r2, r3, #7
 80089c6:	4601      	mov	r1, r0
 80089c8:	d00b      	beq.n	80089e2 <__lo0bits+0x22>
 80089ca:	07da      	lsls	r2, r3, #31
 80089cc:	d423      	bmi.n	8008a16 <__lo0bits+0x56>
 80089ce:	0798      	lsls	r0, r3, #30
 80089d0:	bf49      	itett	mi
 80089d2:	085b      	lsrmi	r3, r3, #1
 80089d4:	089b      	lsrpl	r3, r3, #2
 80089d6:	2001      	movmi	r0, #1
 80089d8:	600b      	strmi	r3, [r1, #0]
 80089da:	bf5c      	itt	pl
 80089dc:	600b      	strpl	r3, [r1, #0]
 80089de:	2002      	movpl	r0, #2
 80089e0:	4770      	bx	lr
 80089e2:	b298      	uxth	r0, r3
 80089e4:	b9a8      	cbnz	r0, 8008a12 <__lo0bits+0x52>
 80089e6:	0c1b      	lsrs	r3, r3, #16
 80089e8:	2010      	movs	r0, #16
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	b90a      	cbnz	r2, 80089f2 <__lo0bits+0x32>
 80089ee:	3008      	adds	r0, #8
 80089f0:	0a1b      	lsrs	r3, r3, #8
 80089f2:	071a      	lsls	r2, r3, #28
 80089f4:	bf04      	itt	eq
 80089f6:	091b      	lsreq	r3, r3, #4
 80089f8:	3004      	addeq	r0, #4
 80089fa:	079a      	lsls	r2, r3, #30
 80089fc:	bf04      	itt	eq
 80089fe:	089b      	lsreq	r3, r3, #2
 8008a00:	3002      	addeq	r0, #2
 8008a02:	07da      	lsls	r2, r3, #31
 8008a04:	d403      	bmi.n	8008a0e <__lo0bits+0x4e>
 8008a06:	085b      	lsrs	r3, r3, #1
 8008a08:	f100 0001 	add.w	r0, r0, #1
 8008a0c:	d005      	beq.n	8008a1a <__lo0bits+0x5a>
 8008a0e:	600b      	str	r3, [r1, #0]
 8008a10:	4770      	bx	lr
 8008a12:	4610      	mov	r0, r2
 8008a14:	e7e9      	b.n	80089ea <__lo0bits+0x2a>
 8008a16:	2000      	movs	r0, #0
 8008a18:	4770      	bx	lr
 8008a1a:	2020      	movs	r0, #32
 8008a1c:	4770      	bx	lr
	...

08008a20 <__i2b>:
 8008a20:	b510      	push	{r4, lr}
 8008a22:	460c      	mov	r4, r1
 8008a24:	2101      	movs	r1, #1
 8008a26:	f7ff feb9 	bl	800879c <_Balloc>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	b928      	cbnz	r0, 8008a3a <__i2b+0x1a>
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <__i2b+0x24>)
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <__i2b+0x28>)
 8008a32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a36:	f000 fe01 	bl	800963c <__assert_func>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	6144      	str	r4, [r0, #20]
 8008a3e:	6103      	str	r3, [r0, #16]
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	bf00      	nop
 8008a44:	0800a2ff 	.word	0x0800a2ff
 8008a48:	0800a38c 	.word	0x0800a38c

08008a4c <__multiply>:
 8008a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	4691      	mov	r9, r2
 8008a52:	690a      	ldr	r2, [r1, #16]
 8008a54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	bfb8      	it	lt
 8008a5c:	460b      	movlt	r3, r1
 8008a5e:	460c      	mov	r4, r1
 8008a60:	bfbc      	itt	lt
 8008a62:	464c      	movlt	r4, r9
 8008a64:	4699      	movlt	r9, r3
 8008a66:	6927      	ldr	r7, [r4, #16]
 8008a68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a6c:	68a3      	ldr	r3, [r4, #8]
 8008a6e:	6861      	ldr	r1, [r4, #4]
 8008a70:	eb07 060a 	add.w	r6, r7, sl
 8008a74:	42b3      	cmp	r3, r6
 8008a76:	b085      	sub	sp, #20
 8008a78:	bfb8      	it	lt
 8008a7a:	3101      	addlt	r1, #1
 8008a7c:	f7ff fe8e 	bl	800879c <_Balloc>
 8008a80:	b930      	cbnz	r0, 8008a90 <__multiply+0x44>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4b44      	ldr	r3, [pc, #272]	; (8008b98 <__multiply+0x14c>)
 8008a86:	4845      	ldr	r0, [pc, #276]	; (8008b9c <__multiply+0x150>)
 8008a88:	f240 115d 	movw	r1, #349	; 0x15d
 8008a8c:	f000 fdd6 	bl	800963c <__assert_func>
 8008a90:	f100 0514 	add.w	r5, r0, #20
 8008a94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a98:	462b      	mov	r3, r5
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4543      	cmp	r3, r8
 8008a9e:	d321      	bcc.n	8008ae4 <__multiply+0x98>
 8008aa0:	f104 0314 	add.w	r3, r4, #20
 8008aa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008aa8:	f109 0314 	add.w	r3, r9, #20
 8008aac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ab0:	9202      	str	r2, [sp, #8]
 8008ab2:	1b3a      	subs	r2, r7, r4
 8008ab4:	3a15      	subs	r2, #21
 8008ab6:	f022 0203 	bic.w	r2, r2, #3
 8008aba:	3204      	adds	r2, #4
 8008abc:	f104 0115 	add.w	r1, r4, #21
 8008ac0:	428f      	cmp	r7, r1
 8008ac2:	bf38      	it	cc
 8008ac4:	2204      	movcc	r2, #4
 8008ac6:	9201      	str	r2, [sp, #4]
 8008ac8:	9a02      	ldr	r2, [sp, #8]
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d80c      	bhi.n	8008aea <__multiply+0x9e>
 8008ad0:	2e00      	cmp	r6, #0
 8008ad2:	dd03      	ble.n	8008adc <__multiply+0x90>
 8008ad4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d05a      	beq.n	8008b92 <__multiply+0x146>
 8008adc:	6106      	str	r6, [r0, #16]
 8008ade:	b005      	add	sp, #20
 8008ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae4:	f843 2b04 	str.w	r2, [r3], #4
 8008ae8:	e7d8      	b.n	8008a9c <__multiply+0x50>
 8008aea:	f8b3 a000 	ldrh.w	sl, [r3]
 8008aee:	f1ba 0f00 	cmp.w	sl, #0
 8008af2:	d024      	beq.n	8008b3e <__multiply+0xf2>
 8008af4:	f104 0e14 	add.w	lr, r4, #20
 8008af8:	46a9      	mov	r9, r5
 8008afa:	f04f 0c00 	mov.w	ip, #0
 8008afe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b02:	f8d9 1000 	ldr.w	r1, [r9]
 8008b06:	fa1f fb82 	uxth.w	fp, r2
 8008b0a:	b289      	uxth	r1, r1
 8008b0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b14:	f8d9 2000 	ldr.w	r2, [r9]
 8008b18:	4461      	add	r1, ip
 8008b1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b26:	b289      	uxth	r1, r1
 8008b28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b2c:	4577      	cmp	r7, lr
 8008b2e:	f849 1b04 	str.w	r1, [r9], #4
 8008b32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b36:	d8e2      	bhi.n	8008afe <__multiply+0xb2>
 8008b38:	9a01      	ldr	r2, [sp, #4]
 8008b3a:	f845 c002 	str.w	ip, [r5, r2]
 8008b3e:	9a03      	ldr	r2, [sp, #12]
 8008b40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b44:	3304      	adds	r3, #4
 8008b46:	f1b9 0f00 	cmp.w	r9, #0
 8008b4a:	d020      	beq.n	8008b8e <__multiply+0x142>
 8008b4c:	6829      	ldr	r1, [r5, #0]
 8008b4e:	f104 0c14 	add.w	ip, r4, #20
 8008b52:	46ae      	mov	lr, r5
 8008b54:	f04f 0a00 	mov.w	sl, #0
 8008b58:	f8bc b000 	ldrh.w	fp, [ip]
 8008b5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b60:	fb09 220b 	mla	r2, r9, fp, r2
 8008b64:	4492      	add	sl, r2
 8008b66:	b289      	uxth	r1, r1
 8008b68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b6c:	f84e 1b04 	str.w	r1, [lr], #4
 8008b70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b74:	f8be 1000 	ldrh.w	r1, [lr]
 8008b78:	0c12      	lsrs	r2, r2, #16
 8008b7a:	fb09 1102 	mla	r1, r9, r2, r1
 8008b7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b82:	4567      	cmp	r7, ip
 8008b84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b88:	d8e6      	bhi.n	8008b58 <__multiply+0x10c>
 8008b8a:	9a01      	ldr	r2, [sp, #4]
 8008b8c:	50a9      	str	r1, [r5, r2]
 8008b8e:	3504      	adds	r5, #4
 8008b90:	e79a      	b.n	8008ac8 <__multiply+0x7c>
 8008b92:	3e01      	subs	r6, #1
 8008b94:	e79c      	b.n	8008ad0 <__multiply+0x84>
 8008b96:	bf00      	nop
 8008b98:	0800a2ff 	.word	0x0800a2ff
 8008b9c:	0800a38c 	.word	0x0800a38c

08008ba0 <__pow5mult>:
 8008ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	4615      	mov	r5, r2
 8008ba6:	f012 0203 	ands.w	r2, r2, #3
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	d007      	beq.n	8008bc0 <__pow5mult+0x20>
 8008bb0:	4c25      	ldr	r4, [pc, #148]	; (8008c48 <__pow5mult+0xa8>)
 8008bb2:	3a01      	subs	r2, #1
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bba:	f7ff fe51 	bl	8008860 <__multadd>
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	10ad      	asrs	r5, r5, #2
 8008bc2:	d03d      	beq.n	8008c40 <__pow5mult+0xa0>
 8008bc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bc6:	b97c      	cbnz	r4, 8008be8 <__pow5mult+0x48>
 8008bc8:	2010      	movs	r0, #16
 8008bca:	f7ff fdbf 	bl	800874c <malloc>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	6270      	str	r0, [r6, #36]	; 0x24
 8008bd2:	b928      	cbnz	r0, 8008be0 <__pow5mult+0x40>
 8008bd4:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <__pow5mult+0xac>)
 8008bd6:	481e      	ldr	r0, [pc, #120]	; (8008c50 <__pow5mult+0xb0>)
 8008bd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bdc:	f000 fd2e 	bl	800963c <__assert_func>
 8008be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008be4:	6004      	str	r4, [r0, #0]
 8008be6:	60c4      	str	r4, [r0, #12]
 8008be8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bf0:	b94c      	cbnz	r4, 8008c06 <__pow5mult+0x66>
 8008bf2:	f240 2171 	movw	r1, #625	; 0x271
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7ff ff12 	bl	8008a20 <__i2b>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c02:	4604      	mov	r4, r0
 8008c04:	6003      	str	r3, [r0, #0]
 8008c06:	f04f 0900 	mov.w	r9, #0
 8008c0a:	07eb      	lsls	r3, r5, #31
 8008c0c:	d50a      	bpl.n	8008c24 <__pow5mult+0x84>
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4622      	mov	r2, r4
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ff1a 	bl	8008a4c <__multiply>
 8008c18:	4639      	mov	r1, r7
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f7ff fdfd 	bl	800881c <_Bfree>
 8008c22:	4647      	mov	r7, r8
 8008c24:	106d      	asrs	r5, r5, #1
 8008c26:	d00b      	beq.n	8008c40 <__pow5mult+0xa0>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	b938      	cbnz	r0, 8008c3c <__pow5mult+0x9c>
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7ff ff0b 	bl	8008a4c <__multiply>
 8008c36:	6020      	str	r0, [r4, #0]
 8008c38:	f8c0 9000 	str.w	r9, [r0]
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	e7e4      	b.n	8008c0a <__pow5mult+0x6a>
 8008c40:	4638      	mov	r0, r7
 8008c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c46:	bf00      	nop
 8008c48:	0800a4d8 	.word	0x0800a4d8
 8008c4c:	0800a28d 	.word	0x0800a28d
 8008c50:	0800a38c 	.word	0x0800a38c

08008c54 <__lshift>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	460c      	mov	r4, r1
 8008c5a:	6849      	ldr	r1, [r1, #4]
 8008c5c:	6923      	ldr	r3, [r4, #16]
 8008c5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c62:	68a3      	ldr	r3, [r4, #8]
 8008c64:	4607      	mov	r7, r0
 8008c66:	4691      	mov	r9, r2
 8008c68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c6c:	f108 0601 	add.w	r6, r8, #1
 8008c70:	42b3      	cmp	r3, r6
 8008c72:	db0b      	blt.n	8008c8c <__lshift+0x38>
 8008c74:	4638      	mov	r0, r7
 8008c76:	f7ff fd91 	bl	800879c <_Balloc>
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	b948      	cbnz	r0, 8008c92 <__lshift+0x3e>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	4b2a      	ldr	r3, [pc, #168]	; (8008d2c <__lshift+0xd8>)
 8008c82:	482b      	ldr	r0, [pc, #172]	; (8008d30 <__lshift+0xdc>)
 8008c84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c88:	f000 fcd8 	bl	800963c <__assert_func>
 8008c8c:	3101      	adds	r1, #1
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	e7ee      	b.n	8008c70 <__lshift+0x1c>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f100 0114 	add.w	r1, r0, #20
 8008c98:	f100 0210 	add.w	r2, r0, #16
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	4553      	cmp	r3, sl
 8008ca0:	db37      	blt.n	8008d12 <__lshift+0xbe>
 8008ca2:	6920      	ldr	r0, [r4, #16]
 8008ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ca8:	f104 0314 	add.w	r3, r4, #20
 8008cac:	f019 091f 	ands.w	r9, r9, #31
 8008cb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008cb8:	d02f      	beq.n	8008d1a <__lshift+0xc6>
 8008cba:	f1c9 0e20 	rsb	lr, r9, #32
 8008cbe:	468a      	mov	sl, r1
 8008cc0:	f04f 0c00 	mov.w	ip, #0
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	fa02 f209 	lsl.w	r2, r2, r9
 8008cca:	ea42 020c 	orr.w	r2, r2, ip
 8008cce:	f84a 2b04 	str.w	r2, [sl], #4
 8008cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd6:	4298      	cmp	r0, r3
 8008cd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008cdc:	d8f2      	bhi.n	8008cc4 <__lshift+0x70>
 8008cde:	1b03      	subs	r3, r0, r4
 8008ce0:	3b15      	subs	r3, #21
 8008ce2:	f023 0303 	bic.w	r3, r3, #3
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	f104 0215 	add.w	r2, r4, #21
 8008cec:	4290      	cmp	r0, r2
 8008cee:	bf38      	it	cc
 8008cf0:	2304      	movcc	r3, #4
 8008cf2:	f841 c003 	str.w	ip, [r1, r3]
 8008cf6:	f1bc 0f00 	cmp.w	ip, #0
 8008cfa:	d001      	beq.n	8008d00 <__lshift+0xac>
 8008cfc:	f108 0602 	add.w	r6, r8, #2
 8008d00:	3e01      	subs	r6, #1
 8008d02:	4638      	mov	r0, r7
 8008d04:	612e      	str	r6, [r5, #16]
 8008d06:	4621      	mov	r1, r4
 8008d08:	f7ff fd88 	bl	800881c <_Bfree>
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d16:	3301      	adds	r3, #1
 8008d18:	e7c1      	b.n	8008c9e <__lshift+0x4a>
 8008d1a:	3904      	subs	r1, #4
 8008d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d20:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d24:	4298      	cmp	r0, r3
 8008d26:	d8f9      	bhi.n	8008d1c <__lshift+0xc8>
 8008d28:	e7ea      	b.n	8008d00 <__lshift+0xac>
 8008d2a:	bf00      	nop
 8008d2c:	0800a2ff 	.word	0x0800a2ff
 8008d30:	0800a38c 	.word	0x0800a38c

08008d34 <__mcmp>:
 8008d34:	b530      	push	{r4, r5, lr}
 8008d36:	6902      	ldr	r2, [r0, #16]
 8008d38:	690c      	ldr	r4, [r1, #16]
 8008d3a:	1b12      	subs	r2, r2, r4
 8008d3c:	d10e      	bne.n	8008d5c <__mcmp+0x28>
 8008d3e:	f100 0314 	add.w	r3, r0, #20
 8008d42:	3114      	adds	r1, #20
 8008d44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d54:	42a5      	cmp	r5, r4
 8008d56:	d003      	beq.n	8008d60 <__mcmp+0x2c>
 8008d58:	d305      	bcc.n	8008d66 <__mcmp+0x32>
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	bd30      	pop	{r4, r5, pc}
 8008d60:	4283      	cmp	r3, r0
 8008d62:	d3f3      	bcc.n	8008d4c <__mcmp+0x18>
 8008d64:	e7fa      	b.n	8008d5c <__mcmp+0x28>
 8008d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d6a:	e7f7      	b.n	8008d5c <__mcmp+0x28>

08008d6c <__mdiff>:
 8008d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d70:	460c      	mov	r4, r1
 8008d72:	4606      	mov	r6, r0
 8008d74:	4611      	mov	r1, r2
 8008d76:	4620      	mov	r0, r4
 8008d78:	4690      	mov	r8, r2
 8008d7a:	f7ff ffdb 	bl	8008d34 <__mcmp>
 8008d7e:	1e05      	subs	r5, r0, #0
 8008d80:	d110      	bne.n	8008da4 <__mdiff+0x38>
 8008d82:	4629      	mov	r1, r5
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7ff fd09 	bl	800879c <_Balloc>
 8008d8a:	b930      	cbnz	r0, 8008d9a <__mdiff+0x2e>
 8008d8c:	4b3a      	ldr	r3, [pc, #232]	; (8008e78 <__mdiff+0x10c>)
 8008d8e:	4602      	mov	r2, r0
 8008d90:	f240 2132 	movw	r1, #562	; 0x232
 8008d94:	4839      	ldr	r0, [pc, #228]	; (8008e7c <__mdiff+0x110>)
 8008d96:	f000 fc51 	bl	800963c <__assert_func>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da4:	bfa4      	itt	ge
 8008da6:	4643      	movge	r3, r8
 8008da8:	46a0      	movge	r8, r4
 8008daa:	4630      	mov	r0, r6
 8008dac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008db0:	bfa6      	itte	ge
 8008db2:	461c      	movge	r4, r3
 8008db4:	2500      	movge	r5, #0
 8008db6:	2501      	movlt	r5, #1
 8008db8:	f7ff fcf0 	bl	800879c <_Balloc>
 8008dbc:	b920      	cbnz	r0, 8008dc8 <__mdiff+0x5c>
 8008dbe:	4b2e      	ldr	r3, [pc, #184]	; (8008e78 <__mdiff+0x10c>)
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dc6:	e7e5      	b.n	8008d94 <__mdiff+0x28>
 8008dc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dcc:	6926      	ldr	r6, [r4, #16]
 8008dce:	60c5      	str	r5, [r0, #12]
 8008dd0:	f104 0914 	add.w	r9, r4, #20
 8008dd4:	f108 0514 	add.w	r5, r8, #20
 8008dd8:	f100 0e14 	add.w	lr, r0, #20
 8008ddc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008de0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008de4:	f108 0210 	add.w	r2, r8, #16
 8008de8:	46f2      	mov	sl, lr
 8008dea:	2100      	movs	r1, #0
 8008dec:	f859 3b04 	ldr.w	r3, [r9], #4
 8008df0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008df4:	fa1f f883 	uxth.w	r8, r3
 8008df8:	fa11 f18b 	uxtah	r1, r1, fp
 8008dfc:	0c1b      	lsrs	r3, r3, #16
 8008dfe:	eba1 0808 	sub.w	r8, r1, r8
 8008e02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e0a:	fa1f f888 	uxth.w	r8, r8
 8008e0e:	1419      	asrs	r1, r3, #16
 8008e10:	454e      	cmp	r6, r9
 8008e12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e16:	f84a 3b04 	str.w	r3, [sl], #4
 8008e1a:	d8e7      	bhi.n	8008dec <__mdiff+0x80>
 8008e1c:	1b33      	subs	r3, r6, r4
 8008e1e:	3b15      	subs	r3, #21
 8008e20:	f023 0303 	bic.w	r3, r3, #3
 8008e24:	3304      	adds	r3, #4
 8008e26:	3415      	adds	r4, #21
 8008e28:	42a6      	cmp	r6, r4
 8008e2a:	bf38      	it	cc
 8008e2c:	2304      	movcc	r3, #4
 8008e2e:	441d      	add	r5, r3
 8008e30:	4473      	add	r3, lr
 8008e32:	469e      	mov	lr, r3
 8008e34:	462e      	mov	r6, r5
 8008e36:	4566      	cmp	r6, ip
 8008e38:	d30e      	bcc.n	8008e58 <__mdiff+0xec>
 8008e3a:	f10c 0203 	add.w	r2, ip, #3
 8008e3e:	1b52      	subs	r2, r2, r5
 8008e40:	f022 0203 	bic.w	r2, r2, #3
 8008e44:	3d03      	subs	r5, #3
 8008e46:	45ac      	cmp	ip, r5
 8008e48:	bf38      	it	cc
 8008e4a:	2200      	movcc	r2, #0
 8008e4c:	441a      	add	r2, r3
 8008e4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e52:	b17b      	cbz	r3, 8008e74 <__mdiff+0x108>
 8008e54:	6107      	str	r7, [r0, #16]
 8008e56:	e7a3      	b.n	8008da0 <__mdiff+0x34>
 8008e58:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e5c:	fa11 f288 	uxtah	r2, r1, r8
 8008e60:	1414      	asrs	r4, r2, #16
 8008e62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e66:	b292      	uxth	r2, r2
 8008e68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e6c:	f84e 2b04 	str.w	r2, [lr], #4
 8008e70:	1421      	asrs	r1, r4, #16
 8008e72:	e7e0      	b.n	8008e36 <__mdiff+0xca>
 8008e74:	3f01      	subs	r7, #1
 8008e76:	e7ea      	b.n	8008e4e <__mdiff+0xe2>
 8008e78:	0800a2ff 	.word	0x0800a2ff
 8008e7c:	0800a38c 	.word	0x0800a38c

08008e80 <__ulp>:
 8008e80:	b082      	sub	sp, #8
 8008e82:	ed8d 0b00 	vstr	d0, [sp]
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	4912      	ldr	r1, [pc, #72]	; (8008ed4 <__ulp+0x54>)
 8008e8a:	4019      	ands	r1, r3
 8008e8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008e90:	2900      	cmp	r1, #0
 8008e92:	dd05      	ble.n	8008ea0 <__ulp+0x20>
 8008e94:	2200      	movs	r2, #0
 8008e96:	460b      	mov	r3, r1
 8008e98:	ec43 2b10 	vmov	d0, r2, r3
 8008e9c:	b002      	add	sp, #8
 8008e9e:	4770      	bx	lr
 8008ea0:	4249      	negs	r1, r1
 8008ea2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008ea6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	da04      	bge.n	8008ebe <__ulp+0x3e>
 8008eb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008eb8:	fa41 f300 	asr.w	r3, r1, r0
 8008ebc:	e7ec      	b.n	8008e98 <__ulp+0x18>
 8008ebe:	f1a0 0114 	sub.w	r1, r0, #20
 8008ec2:	291e      	cmp	r1, #30
 8008ec4:	bfda      	itte	le
 8008ec6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008eca:	fa20 f101 	lsrle.w	r1, r0, r1
 8008ece:	2101      	movgt	r1, #1
 8008ed0:	460a      	mov	r2, r1
 8008ed2:	e7e1      	b.n	8008e98 <__ulp+0x18>
 8008ed4:	7ff00000 	.word	0x7ff00000

08008ed8 <__b2d>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	6905      	ldr	r5, [r0, #16]
 8008edc:	f100 0714 	add.w	r7, r0, #20
 8008ee0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008ee4:	1f2e      	subs	r6, r5, #4
 8008ee6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008eea:	4620      	mov	r0, r4
 8008eec:	f7ff fd48 	bl	8008980 <__hi0bits>
 8008ef0:	f1c0 0320 	rsb	r3, r0, #32
 8008ef4:	280a      	cmp	r0, #10
 8008ef6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008f74 <__b2d+0x9c>
 8008efa:	600b      	str	r3, [r1, #0]
 8008efc:	dc14      	bgt.n	8008f28 <__b2d+0x50>
 8008efe:	f1c0 0e0b 	rsb	lr, r0, #11
 8008f02:	fa24 f10e 	lsr.w	r1, r4, lr
 8008f06:	42b7      	cmp	r7, r6
 8008f08:	ea41 030c 	orr.w	r3, r1, ip
 8008f0c:	bf34      	ite	cc
 8008f0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f12:	2100      	movcs	r1, #0
 8008f14:	3015      	adds	r0, #21
 8008f16:	fa04 f000 	lsl.w	r0, r4, r0
 8008f1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008f1e:	ea40 0201 	orr.w	r2, r0, r1
 8008f22:	ec43 2b10 	vmov	d0, r2, r3
 8008f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f28:	42b7      	cmp	r7, r6
 8008f2a:	bf3a      	itte	cc
 8008f2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f30:	f1a5 0608 	subcc.w	r6, r5, #8
 8008f34:	2100      	movcs	r1, #0
 8008f36:	380b      	subs	r0, #11
 8008f38:	d017      	beq.n	8008f6a <__b2d+0x92>
 8008f3a:	f1c0 0c20 	rsb	ip, r0, #32
 8008f3e:	fa04 f500 	lsl.w	r5, r4, r0
 8008f42:	42be      	cmp	r6, r7
 8008f44:	fa21 f40c 	lsr.w	r4, r1, ip
 8008f48:	ea45 0504 	orr.w	r5, r5, r4
 8008f4c:	bf8c      	ite	hi
 8008f4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008f52:	2400      	movls	r4, #0
 8008f54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008f58:	fa01 f000 	lsl.w	r0, r1, r0
 8008f5c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008f60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f64:	ea40 0204 	orr.w	r2, r0, r4
 8008f68:	e7db      	b.n	8008f22 <__b2d+0x4a>
 8008f6a:	ea44 030c 	orr.w	r3, r4, ip
 8008f6e:	460a      	mov	r2, r1
 8008f70:	e7d7      	b.n	8008f22 <__b2d+0x4a>
 8008f72:	bf00      	nop
 8008f74:	3ff00000 	.word	0x3ff00000

08008f78 <__d2b>:
 8008f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	2101      	movs	r1, #1
 8008f80:	ec57 6b10 	vmov	r6, r7, d0
 8008f84:	4690      	mov	r8, r2
 8008f86:	f7ff fc09 	bl	800879c <_Balloc>
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	b930      	cbnz	r0, 8008f9c <__d2b+0x24>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	4b25      	ldr	r3, [pc, #148]	; (8009028 <__d2b+0xb0>)
 8008f92:	4826      	ldr	r0, [pc, #152]	; (800902c <__d2b+0xb4>)
 8008f94:	f240 310a 	movw	r1, #778	; 0x30a
 8008f98:	f000 fb50 	bl	800963c <__assert_func>
 8008f9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fa4:	bb35      	cbnz	r5, 8008ff4 <__d2b+0x7c>
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	d028      	beq.n	8008ffe <__d2b+0x86>
 8008fac:	4668      	mov	r0, sp
 8008fae:	9600      	str	r6, [sp, #0]
 8008fb0:	f7ff fd06 	bl	80089c0 <__lo0bits>
 8008fb4:	9900      	ldr	r1, [sp, #0]
 8008fb6:	b300      	cbz	r0, 8008ffa <__d2b+0x82>
 8008fb8:	9a01      	ldr	r2, [sp, #4]
 8008fba:	f1c0 0320 	rsb	r3, r0, #32
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	40c2      	lsrs	r2, r0
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	9201      	str	r2, [sp, #4]
 8008fca:	9b01      	ldr	r3, [sp, #4]
 8008fcc:	61a3      	str	r3, [r4, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bf14      	ite	ne
 8008fd2:	2202      	movne	r2, #2
 8008fd4:	2201      	moveq	r2, #1
 8008fd6:	6122      	str	r2, [r4, #16]
 8008fd8:	b1d5      	cbz	r5, 8009010 <__d2b+0x98>
 8008fda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fde:	4405      	add	r5, r0
 8008fe0:	f8c9 5000 	str.w	r5, [r9]
 8008fe4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fe8:	f8c8 0000 	str.w	r0, [r8]
 8008fec:	4620      	mov	r0, r4
 8008fee:	b003      	add	sp, #12
 8008ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ff8:	e7d5      	b.n	8008fa6 <__d2b+0x2e>
 8008ffa:	6161      	str	r1, [r4, #20]
 8008ffc:	e7e5      	b.n	8008fca <__d2b+0x52>
 8008ffe:	a801      	add	r0, sp, #4
 8009000:	f7ff fcde 	bl	80089c0 <__lo0bits>
 8009004:	9b01      	ldr	r3, [sp, #4]
 8009006:	6163      	str	r3, [r4, #20]
 8009008:	2201      	movs	r2, #1
 800900a:	6122      	str	r2, [r4, #16]
 800900c:	3020      	adds	r0, #32
 800900e:	e7e3      	b.n	8008fd8 <__d2b+0x60>
 8009010:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009018:	f8c9 0000 	str.w	r0, [r9]
 800901c:	6918      	ldr	r0, [r3, #16]
 800901e:	f7ff fcaf 	bl	8008980 <__hi0bits>
 8009022:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009026:	e7df      	b.n	8008fe8 <__d2b+0x70>
 8009028:	0800a2ff 	.word	0x0800a2ff
 800902c:	0800a38c 	.word	0x0800a38c

08009030 <__ratio>:
 8009030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	4688      	mov	r8, r1
 8009036:	4669      	mov	r1, sp
 8009038:	4681      	mov	r9, r0
 800903a:	f7ff ff4d 	bl	8008ed8 <__b2d>
 800903e:	a901      	add	r1, sp, #4
 8009040:	4640      	mov	r0, r8
 8009042:	ec55 4b10 	vmov	r4, r5, d0
 8009046:	f7ff ff47 	bl	8008ed8 <__b2d>
 800904a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800904e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009052:	eba3 0c02 	sub.w	ip, r3, r2
 8009056:	e9dd 3200 	ldrd	r3, r2, [sp]
 800905a:	1a9b      	subs	r3, r3, r2
 800905c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009060:	ec51 0b10 	vmov	r0, r1, d0
 8009064:	2b00      	cmp	r3, #0
 8009066:	bfd6      	itet	le
 8009068:	460a      	movle	r2, r1
 800906a:	462a      	movgt	r2, r5
 800906c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009070:	468b      	mov	fp, r1
 8009072:	462f      	mov	r7, r5
 8009074:	bfd4      	ite	le
 8009076:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800907a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800907e:	4620      	mov	r0, r4
 8009080:	ee10 2a10 	vmov	r2, s0
 8009084:	465b      	mov	r3, fp
 8009086:	4639      	mov	r1, r7
 8009088:	f7f7 fbe8 	bl	800085c <__aeabi_ddiv>
 800908c:	ec41 0b10 	vmov	d0, r0, r1
 8009090:	b003      	add	sp, #12
 8009092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009096 <__copybits>:
 8009096:	3901      	subs	r1, #1
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	1149      	asrs	r1, r1, #5
 800909c:	6914      	ldr	r4, [r2, #16]
 800909e:	3101      	adds	r1, #1
 80090a0:	f102 0314 	add.w	r3, r2, #20
 80090a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090ac:	1f05      	subs	r5, r0, #4
 80090ae:	42a3      	cmp	r3, r4
 80090b0:	d30c      	bcc.n	80090cc <__copybits+0x36>
 80090b2:	1aa3      	subs	r3, r4, r2
 80090b4:	3b11      	subs	r3, #17
 80090b6:	f023 0303 	bic.w	r3, r3, #3
 80090ba:	3211      	adds	r2, #17
 80090bc:	42a2      	cmp	r2, r4
 80090be:	bf88      	it	hi
 80090c0:	2300      	movhi	r3, #0
 80090c2:	4418      	add	r0, r3
 80090c4:	2300      	movs	r3, #0
 80090c6:	4288      	cmp	r0, r1
 80090c8:	d305      	bcc.n	80090d6 <__copybits+0x40>
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80090d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80090d4:	e7eb      	b.n	80090ae <__copybits+0x18>
 80090d6:	f840 3b04 	str.w	r3, [r0], #4
 80090da:	e7f4      	b.n	80090c6 <__copybits+0x30>

080090dc <__any_on>:
 80090dc:	f100 0214 	add.w	r2, r0, #20
 80090e0:	6900      	ldr	r0, [r0, #16]
 80090e2:	114b      	asrs	r3, r1, #5
 80090e4:	4298      	cmp	r0, r3
 80090e6:	b510      	push	{r4, lr}
 80090e8:	db11      	blt.n	800910e <__any_on+0x32>
 80090ea:	dd0a      	ble.n	8009102 <__any_on+0x26>
 80090ec:	f011 011f 	ands.w	r1, r1, #31
 80090f0:	d007      	beq.n	8009102 <__any_on+0x26>
 80090f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090f6:	fa24 f001 	lsr.w	r0, r4, r1
 80090fa:	fa00 f101 	lsl.w	r1, r0, r1
 80090fe:	428c      	cmp	r4, r1
 8009100:	d10b      	bne.n	800911a <__any_on+0x3e>
 8009102:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009106:	4293      	cmp	r3, r2
 8009108:	d803      	bhi.n	8009112 <__any_on+0x36>
 800910a:	2000      	movs	r0, #0
 800910c:	bd10      	pop	{r4, pc}
 800910e:	4603      	mov	r3, r0
 8009110:	e7f7      	b.n	8009102 <__any_on+0x26>
 8009112:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009116:	2900      	cmp	r1, #0
 8009118:	d0f5      	beq.n	8009106 <__any_on+0x2a>
 800911a:	2001      	movs	r0, #1
 800911c:	e7f6      	b.n	800910c <__any_on+0x30>

0800911e <_calloc_r>:
 800911e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009120:	fba1 2402 	umull	r2, r4, r1, r2
 8009124:	b94c      	cbnz	r4, 800913a <_calloc_r+0x1c>
 8009126:	4611      	mov	r1, r2
 8009128:	9201      	str	r2, [sp, #4]
 800912a:	f000 f87b 	bl	8009224 <_malloc_r>
 800912e:	9a01      	ldr	r2, [sp, #4]
 8009130:	4605      	mov	r5, r0
 8009132:	b930      	cbnz	r0, 8009142 <_calloc_r+0x24>
 8009134:	4628      	mov	r0, r5
 8009136:	b003      	add	sp, #12
 8009138:	bd30      	pop	{r4, r5, pc}
 800913a:	220c      	movs	r2, #12
 800913c:	6002      	str	r2, [r0, #0]
 800913e:	2500      	movs	r5, #0
 8009140:	e7f8      	b.n	8009134 <_calloc_r+0x16>
 8009142:	4621      	mov	r1, r4
 8009144:	f7fc fe50 	bl	8005de8 <memset>
 8009148:	e7f4      	b.n	8009134 <_calloc_r+0x16>
	...

0800914c <_free_r>:
 800914c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800914e:	2900      	cmp	r1, #0
 8009150:	d044      	beq.n	80091dc <_free_r+0x90>
 8009152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009156:	9001      	str	r0, [sp, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	f1a1 0404 	sub.w	r4, r1, #4
 800915e:	bfb8      	it	lt
 8009160:	18e4      	addlt	r4, r4, r3
 8009162:	f000 fab5 	bl	80096d0 <__malloc_lock>
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <_free_r+0x94>)
 8009168:	9801      	ldr	r0, [sp, #4]
 800916a:	6813      	ldr	r3, [r2, #0]
 800916c:	b933      	cbnz	r3, 800917c <_free_r+0x30>
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	6014      	str	r4, [r2, #0]
 8009172:	b003      	add	sp, #12
 8009174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009178:	f000 bab0 	b.w	80096dc <__malloc_unlock>
 800917c:	42a3      	cmp	r3, r4
 800917e:	d908      	bls.n	8009192 <_free_r+0x46>
 8009180:	6825      	ldr	r5, [r4, #0]
 8009182:	1961      	adds	r1, r4, r5
 8009184:	428b      	cmp	r3, r1
 8009186:	bf01      	itttt	eq
 8009188:	6819      	ldreq	r1, [r3, #0]
 800918a:	685b      	ldreq	r3, [r3, #4]
 800918c:	1949      	addeq	r1, r1, r5
 800918e:	6021      	streq	r1, [r4, #0]
 8009190:	e7ed      	b.n	800916e <_free_r+0x22>
 8009192:	461a      	mov	r2, r3
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b10b      	cbz	r3, 800919c <_free_r+0x50>
 8009198:	42a3      	cmp	r3, r4
 800919a:	d9fa      	bls.n	8009192 <_free_r+0x46>
 800919c:	6811      	ldr	r1, [r2, #0]
 800919e:	1855      	adds	r5, r2, r1
 80091a0:	42a5      	cmp	r5, r4
 80091a2:	d10b      	bne.n	80091bc <_free_r+0x70>
 80091a4:	6824      	ldr	r4, [r4, #0]
 80091a6:	4421      	add	r1, r4
 80091a8:	1854      	adds	r4, r2, r1
 80091aa:	42a3      	cmp	r3, r4
 80091ac:	6011      	str	r1, [r2, #0]
 80091ae:	d1e0      	bne.n	8009172 <_free_r+0x26>
 80091b0:	681c      	ldr	r4, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	6053      	str	r3, [r2, #4]
 80091b6:	4421      	add	r1, r4
 80091b8:	6011      	str	r1, [r2, #0]
 80091ba:	e7da      	b.n	8009172 <_free_r+0x26>
 80091bc:	d902      	bls.n	80091c4 <_free_r+0x78>
 80091be:	230c      	movs	r3, #12
 80091c0:	6003      	str	r3, [r0, #0]
 80091c2:	e7d6      	b.n	8009172 <_free_r+0x26>
 80091c4:	6825      	ldr	r5, [r4, #0]
 80091c6:	1961      	adds	r1, r4, r5
 80091c8:	428b      	cmp	r3, r1
 80091ca:	bf04      	itt	eq
 80091cc:	6819      	ldreq	r1, [r3, #0]
 80091ce:	685b      	ldreq	r3, [r3, #4]
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	bf04      	itt	eq
 80091d4:	1949      	addeq	r1, r1, r5
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	6054      	str	r4, [r2, #4]
 80091da:	e7ca      	b.n	8009172 <_free_r+0x26>
 80091dc:	b003      	add	sp, #12
 80091de:	bd30      	pop	{r4, r5, pc}
 80091e0:	2000059c 	.word	0x2000059c

080091e4 <sbrk_aligned>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4e0e      	ldr	r6, [pc, #56]	; (8009220 <sbrk_aligned+0x3c>)
 80091e8:	460c      	mov	r4, r1
 80091ea:	6831      	ldr	r1, [r6, #0]
 80091ec:	4605      	mov	r5, r0
 80091ee:	b911      	cbnz	r1, 80091f6 <sbrk_aligned+0x12>
 80091f0:	f000 f9f2 	bl	80095d8 <_sbrk_r>
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f000 f9ed 	bl	80095d8 <_sbrk_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d00a      	beq.n	8009218 <sbrk_aligned+0x34>
 8009202:	1cc4      	adds	r4, r0, #3
 8009204:	f024 0403 	bic.w	r4, r4, #3
 8009208:	42a0      	cmp	r0, r4
 800920a:	d007      	beq.n	800921c <sbrk_aligned+0x38>
 800920c:	1a21      	subs	r1, r4, r0
 800920e:	4628      	mov	r0, r5
 8009210:	f000 f9e2 	bl	80095d8 <_sbrk_r>
 8009214:	3001      	adds	r0, #1
 8009216:	d101      	bne.n	800921c <sbrk_aligned+0x38>
 8009218:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800921c:	4620      	mov	r0, r4
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	200005a0 	.word	0x200005a0

08009224 <_malloc_r>:
 8009224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	1ccd      	adds	r5, r1, #3
 800922a:	f025 0503 	bic.w	r5, r5, #3
 800922e:	3508      	adds	r5, #8
 8009230:	2d0c      	cmp	r5, #12
 8009232:	bf38      	it	cc
 8009234:	250c      	movcc	r5, #12
 8009236:	2d00      	cmp	r5, #0
 8009238:	4607      	mov	r7, r0
 800923a:	db01      	blt.n	8009240 <_malloc_r+0x1c>
 800923c:	42a9      	cmp	r1, r5
 800923e:	d905      	bls.n	800924c <_malloc_r+0x28>
 8009240:	230c      	movs	r3, #12
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	2600      	movs	r6, #0
 8009246:	4630      	mov	r0, r6
 8009248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800924c:	4e2e      	ldr	r6, [pc, #184]	; (8009308 <_malloc_r+0xe4>)
 800924e:	f000 fa3f 	bl	80096d0 <__malloc_lock>
 8009252:	6833      	ldr	r3, [r6, #0]
 8009254:	461c      	mov	r4, r3
 8009256:	bb34      	cbnz	r4, 80092a6 <_malloc_r+0x82>
 8009258:	4629      	mov	r1, r5
 800925a:	4638      	mov	r0, r7
 800925c:	f7ff ffc2 	bl	80091e4 <sbrk_aligned>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	4604      	mov	r4, r0
 8009264:	d14d      	bne.n	8009302 <_malloc_r+0xde>
 8009266:	6834      	ldr	r4, [r6, #0]
 8009268:	4626      	mov	r6, r4
 800926a:	2e00      	cmp	r6, #0
 800926c:	d140      	bne.n	80092f0 <_malloc_r+0xcc>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	4631      	mov	r1, r6
 8009272:	4638      	mov	r0, r7
 8009274:	eb04 0803 	add.w	r8, r4, r3
 8009278:	f000 f9ae 	bl	80095d8 <_sbrk_r>
 800927c:	4580      	cmp	r8, r0
 800927e:	d13a      	bne.n	80092f6 <_malloc_r+0xd2>
 8009280:	6821      	ldr	r1, [r4, #0]
 8009282:	3503      	adds	r5, #3
 8009284:	1a6d      	subs	r5, r5, r1
 8009286:	f025 0503 	bic.w	r5, r5, #3
 800928a:	3508      	adds	r5, #8
 800928c:	2d0c      	cmp	r5, #12
 800928e:	bf38      	it	cc
 8009290:	250c      	movcc	r5, #12
 8009292:	4629      	mov	r1, r5
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff ffa5 	bl	80091e4 <sbrk_aligned>
 800929a:	3001      	adds	r0, #1
 800929c:	d02b      	beq.n	80092f6 <_malloc_r+0xd2>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	442b      	add	r3, r5
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	e00e      	b.n	80092c4 <_malloc_r+0xa0>
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	1b52      	subs	r2, r2, r5
 80092aa:	d41e      	bmi.n	80092ea <_malloc_r+0xc6>
 80092ac:	2a0b      	cmp	r2, #11
 80092ae:	d916      	bls.n	80092de <_malloc_r+0xba>
 80092b0:	1961      	adds	r1, r4, r5
 80092b2:	42a3      	cmp	r3, r4
 80092b4:	6025      	str	r5, [r4, #0]
 80092b6:	bf18      	it	ne
 80092b8:	6059      	strne	r1, [r3, #4]
 80092ba:	6863      	ldr	r3, [r4, #4]
 80092bc:	bf08      	it	eq
 80092be:	6031      	streq	r1, [r6, #0]
 80092c0:	5162      	str	r2, [r4, r5]
 80092c2:	604b      	str	r3, [r1, #4]
 80092c4:	4638      	mov	r0, r7
 80092c6:	f104 060b 	add.w	r6, r4, #11
 80092ca:	f000 fa07 	bl	80096dc <__malloc_unlock>
 80092ce:	f026 0607 	bic.w	r6, r6, #7
 80092d2:	1d23      	adds	r3, r4, #4
 80092d4:	1af2      	subs	r2, r6, r3
 80092d6:	d0b6      	beq.n	8009246 <_malloc_r+0x22>
 80092d8:	1b9b      	subs	r3, r3, r6
 80092da:	50a3      	str	r3, [r4, r2]
 80092dc:	e7b3      	b.n	8009246 <_malloc_r+0x22>
 80092de:	6862      	ldr	r2, [r4, #4]
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	bf0c      	ite	eq
 80092e4:	6032      	streq	r2, [r6, #0]
 80092e6:	605a      	strne	r2, [r3, #4]
 80092e8:	e7ec      	b.n	80092c4 <_malloc_r+0xa0>
 80092ea:	4623      	mov	r3, r4
 80092ec:	6864      	ldr	r4, [r4, #4]
 80092ee:	e7b2      	b.n	8009256 <_malloc_r+0x32>
 80092f0:	4634      	mov	r4, r6
 80092f2:	6876      	ldr	r6, [r6, #4]
 80092f4:	e7b9      	b.n	800926a <_malloc_r+0x46>
 80092f6:	230c      	movs	r3, #12
 80092f8:	603b      	str	r3, [r7, #0]
 80092fa:	4638      	mov	r0, r7
 80092fc:	f000 f9ee 	bl	80096dc <__malloc_unlock>
 8009300:	e7a1      	b.n	8009246 <_malloc_r+0x22>
 8009302:	6025      	str	r5, [r4, #0]
 8009304:	e7de      	b.n	80092c4 <_malloc_r+0xa0>
 8009306:	bf00      	nop
 8009308:	2000059c 	.word	0x2000059c

0800930c <__ssputs_r>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	688e      	ldr	r6, [r1, #8]
 8009312:	429e      	cmp	r6, r3
 8009314:	4682      	mov	sl, r0
 8009316:	460c      	mov	r4, r1
 8009318:	4690      	mov	r8, r2
 800931a:	461f      	mov	r7, r3
 800931c:	d838      	bhi.n	8009390 <__ssputs_r+0x84>
 800931e:	898a      	ldrh	r2, [r1, #12]
 8009320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009324:	d032      	beq.n	800938c <__ssputs_r+0x80>
 8009326:	6825      	ldr	r5, [r4, #0]
 8009328:	6909      	ldr	r1, [r1, #16]
 800932a:	eba5 0901 	sub.w	r9, r5, r1
 800932e:	6965      	ldr	r5, [r4, #20]
 8009330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009338:	3301      	adds	r3, #1
 800933a:	444b      	add	r3, r9
 800933c:	106d      	asrs	r5, r5, #1
 800933e:	429d      	cmp	r5, r3
 8009340:	bf38      	it	cc
 8009342:	461d      	movcc	r5, r3
 8009344:	0553      	lsls	r3, r2, #21
 8009346:	d531      	bpl.n	80093ac <__ssputs_r+0xa0>
 8009348:	4629      	mov	r1, r5
 800934a:	f7ff ff6b 	bl	8009224 <_malloc_r>
 800934e:	4606      	mov	r6, r0
 8009350:	b950      	cbnz	r0, 8009368 <__ssputs_r+0x5c>
 8009352:	230c      	movs	r3, #12
 8009354:	f8ca 3000 	str.w	r3, [sl]
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009368:	6921      	ldr	r1, [r4, #16]
 800936a:	464a      	mov	r2, r9
 800936c:	f7ff fa08 	bl	8008780 <memcpy>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937a:	81a3      	strh	r3, [r4, #12]
 800937c:	6126      	str	r6, [r4, #16]
 800937e:	6165      	str	r5, [r4, #20]
 8009380:	444e      	add	r6, r9
 8009382:	eba5 0509 	sub.w	r5, r5, r9
 8009386:	6026      	str	r6, [r4, #0]
 8009388:	60a5      	str	r5, [r4, #8]
 800938a:	463e      	mov	r6, r7
 800938c:	42be      	cmp	r6, r7
 800938e:	d900      	bls.n	8009392 <__ssputs_r+0x86>
 8009390:	463e      	mov	r6, r7
 8009392:	6820      	ldr	r0, [r4, #0]
 8009394:	4632      	mov	r2, r6
 8009396:	4641      	mov	r1, r8
 8009398:	f000 f980 	bl	800969c <memmove>
 800939c:	68a3      	ldr	r3, [r4, #8]
 800939e:	1b9b      	subs	r3, r3, r6
 80093a0:	60a3      	str	r3, [r4, #8]
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	4433      	add	r3, r6
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	2000      	movs	r0, #0
 80093aa:	e7db      	b.n	8009364 <__ssputs_r+0x58>
 80093ac:	462a      	mov	r2, r5
 80093ae:	f000 f99b 	bl	80096e8 <_realloc_r>
 80093b2:	4606      	mov	r6, r0
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d1e1      	bne.n	800937c <__ssputs_r+0x70>
 80093b8:	6921      	ldr	r1, [r4, #16]
 80093ba:	4650      	mov	r0, sl
 80093bc:	f7ff fec6 	bl	800914c <_free_r>
 80093c0:	e7c7      	b.n	8009352 <__ssputs_r+0x46>
	...

080093c4 <_svfiprintf_r>:
 80093c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c8:	4698      	mov	r8, r3
 80093ca:	898b      	ldrh	r3, [r1, #12]
 80093cc:	061b      	lsls	r3, r3, #24
 80093ce:	b09d      	sub	sp, #116	; 0x74
 80093d0:	4607      	mov	r7, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	4614      	mov	r4, r2
 80093d6:	d50e      	bpl.n	80093f6 <_svfiprintf_r+0x32>
 80093d8:	690b      	ldr	r3, [r1, #16]
 80093da:	b963      	cbnz	r3, 80093f6 <_svfiprintf_r+0x32>
 80093dc:	2140      	movs	r1, #64	; 0x40
 80093de:	f7ff ff21 	bl	8009224 <_malloc_r>
 80093e2:	6028      	str	r0, [r5, #0]
 80093e4:	6128      	str	r0, [r5, #16]
 80093e6:	b920      	cbnz	r0, 80093f2 <_svfiprintf_r+0x2e>
 80093e8:	230c      	movs	r3, #12
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093f0:	e0d1      	b.n	8009596 <_svfiprintf_r+0x1d2>
 80093f2:	2340      	movs	r3, #64	; 0x40
 80093f4:	616b      	str	r3, [r5, #20]
 80093f6:	2300      	movs	r3, #0
 80093f8:	9309      	str	r3, [sp, #36]	; 0x24
 80093fa:	2320      	movs	r3, #32
 80093fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009400:	f8cd 800c 	str.w	r8, [sp, #12]
 8009404:	2330      	movs	r3, #48	; 0x30
 8009406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095b0 <_svfiprintf_r+0x1ec>
 800940a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800940e:	f04f 0901 	mov.w	r9, #1
 8009412:	4623      	mov	r3, r4
 8009414:	469a      	mov	sl, r3
 8009416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800941a:	b10a      	cbz	r2, 8009420 <_svfiprintf_r+0x5c>
 800941c:	2a25      	cmp	r2, #37	; 0x25
 800941e:	d1f9      	bne.n	8009414 <_svfiprintf_r+0x50>
 8009420:	ebba 0b04 	subs.w	fp, sl, r4
 8009424:	d00b      	beq.n	800943e <_svfiprintf_r+0x7a>
 8009426:	465b      	mov	r3, fp
 8009428:	4622      	mov	r2, r4
 800942a:	4629      	mov	r1, r5
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff ff6d 	bl	800930c <__ssputs_r>
 8009432:	3001      	adds	r0, #1
 8009434:	f000 80aa 	beq.w	800958c <_svfiprintf_r+0x1c8>
 8009438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943a:	445a      	add	r2, fp
 800943c:	9209      	str	r2, [sp, #36]	; 0x24
 800943e:	f89a 3000 	ldrb.w	r3, [sl]
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 80a2 	beq.w	800958c <_svfiprintf_r+0x1c8>
 8009448:	2300      	movs	r3, #0
 800944a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800944e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009452:	f10a 0a01 	add.w	sl, sl, #1
 8009456:	9304      	str	r3, [sp, #16]
 8009458:	9307      	str	r3, [sp, #28]
 800945a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800945e:	931a      	str	r3, [sp, #104]	; 0x68
 8009460:	4654      	mov	r4, sl
 8009462:	2205      	movs	r2, #5
 8009464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009468:	4851      	ldr	r0, [pc, #324]	; (80095b0 <_svfiprintf_r+0x1ec>)
 800946a:	f7f6 fec1 	bl	80001f0 <memchr>
 800946e:	9a04      	ldr	r2, [sp, #16]
 8009470:	b9d8      	cbnz	r0, 80094aa <_svfiprintf_r+0xe6>
 8009472:	06d0      	lsls	r0, r2, #27
 8009474:	bf44      	itt	mi
 8009476:	2320      	movmi	r3, #32
 8009478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800947c:	0711      	lsls	r1, r2, #28
 800947e:	bf44      	itt	mi
 8009480:	232b      	movmi	r3, #43	; 0x2b
 8009482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009486:	f89a 3000 	ldrb.w	r3, [sl]
 800948a:	2b2a      	cmp	r3, #42	; 0x2a
 800948c:	d015      	beq.n	80094ba <_svfiprintf_r+0xf6>
 800948e:	9a07      	ldr	r2, [sp, #28]
 8009490:	4654      	mov	r4, sl
 8009492:	2000      	movs	r0, #0
 8009494:	f04f 0c0a 	mov.w	ip, #10
 8009498:	4621      	mov	r1, r4
 800949a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800949e:	3b30      	subs	r3, #48	; 0x30
 80094a0:	2b09      	cmp	r3, #9
 80094a2:	d94e      	bls.n	8009542 <_svfiprintf_r+0x17e>
 80094a4:	b1b0      	cbz	r0, 80094d4 <_svfiprintf_r+0x110>
 80094a6:	9207      	str	r2, [sp, #28]
 80094a8:	e014      	b.n	80094d4 <_svfiprintf_r+0x110>
 80094aa:	eba0 0308 	sub.w	r3, r0, r8
 80094ae:	fa09 f303 	lsl.w	r3, r9, r3
 80094b2:	4313      	orrs	r3, r2
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	46a2      	mov	sl, r4
 80094b8:	e7d2      	b.n	8009460 <_svfiprintf_r+0x9c>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	1d19      	adds	r1, r3, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	9103      	str	r1, [sp, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	bfbb      	ittet	lt
 80094c6:	425b      	neglt	r3, r3
 80094c8:	f042 0202 	orrlt.w	r2, r2, #2
 80094cc:	9307      	strge	r3, [sp, #28]
 80094ce:	9307      	strlt	r3, [sp, #28]
 80094d0:	bfb8      	it	lt
 80094d2:	9204      	strlt	r2, [sp, #16]
 80094d4:	7823      	ldrb	r3, [r4, #0]
 80094d6:	2b2e      	cmp	r3, #46	; 0x2e
 80094d8:	d10c      	bne.n	80094f4 <_svfiprintf_r+0x130>
 80094da:	7863      	ldrb	r3, [r4, #1]
 80094dc:	2b2a      	cmp	r3, #42	; 0x2a
 80094de:	d135      	bne.n	800954c <_svfiprintf_r+0x188>
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	1d1a      	adds	r2, r3, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	9203      	str	r2, [sp, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bfb8      	it	lt
 80094ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094f0:	3402      	adds	r4, #2
 80094f2:	9305      	str	r3, [sp, #20]
 80094f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095c0 <_svfiprintf_r+0x1fc>
 80094f8:	7821      	ldrb	r1, [r4, #0]
 80094fa:	2203      	movs	r2, #3
 80094fc:	4650      	mov	r0, sl
 80094fe:	f7f6 fe77 	bl	80001f0 <memchr>
 8009502:	b140      	cbz	r0, 8009516 <_svfiprintf_r+0x152>
 8009504:	2340      	movs	r3, #64	; 0x40
 8009506:	eba0 000a 	sub.w	r0, r0, sl
 800950a:	fa03 f000 	lsl.w	r0, r3, r0
 800950e:	9b04      	ldr	r3, [sp, #16]
 8009510:	4303      	orrs	r3, r0
 8009512:	3401      	adds	r4, #1
 8009514:	9304      	str	r3, [sp, #16]
 8009516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951a:	4826      	ldr	r0, [pc, #152]	; (80095b4 <_svfiprintf_r+0x1f0>)
 800951c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009520:	2206      	movs	r2, #6
 8009522:	f7f6 fe65 	bl	80001f0 <memchr>
 8009526:	2800      	cmp	r0, #0
 8009528:	d038      	beq.n	800959c <_svfiprintf_r+0x1d8>
 800952a:	4b23      	ldr	r3, [pc, #140]	; (80095b8 <_svfiprintf_r+0x1f4>)
 800952c:	bb1b      	cbnz	r3, 8009576 <_svfiprintf_r+0x1b2>
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	3307      	adds	r3, #7
 8009532:	f023 0307 	bic.w	r3, r3, #7
 8009536:	3308      	adds	r3, #8
 8009538:	9303      	str	r3, [sp, #12]
 800953a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953c:	4433      	add	r3, r6
 800953e:	9309      	str	r3, [sp, #36]	; 0x24
 8009540:	e767      	b.n	8009412 <_svfiprintf_r+0x4e>
 8009542:	fb0c 3202 	mla	r2, ip, r2, r3
 8009546:	460c      	mov	r4, r1
 8009548:	2001      	movs	r0, #1
 800954a:	e7a5      	b.n	8009498 <_svfiprintf_r+0xd4>
 800954c:	2300      	movs	r3, #0
 800954e:	3401      	adds	r4, #1
 8009550:	9305      	str	r3, [sp, #20]
 8009552:	4619      	mov	r1, r3
 8009554:	f04f 0c0a 	mov.w	ip, #10
 8009558:	4620      	mov	r0, r4
 800955a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800955e:	3a30      	subs	r2, #48	; 0x30
 8009560:	2a09      	cmp	r2, #9
 8009562:	d903      	bls.n	800956c <_svfiprintf_r+0x1a8>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0c5      	beq.n	80094f4 <_svfiprintf_r+0x130>
 8009568:	9105      	str	r1, [sp, #20]
 800956a:	e7c3      	b.n	80094f4 <_svfiprintf_r+0x130>
 800956c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009570:	4604      	mov	r4, r0
 8009572:	2301      	movs	r3, #1
 8009574:	e7f0      	b.n	8009558 <_svfiprintf_r+0x194>
 8009576:	ab03      	add	r3, sp, #12
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	462a      	mov	r2, r5
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <_svfiprintf_r+0x1f8>)
 800957e:	a904      	add	r1, sp, #16
 8009580:	4638      	mov	r0, r7
 8009582:	f7fc fcd9 	bl	8005f38 <_printf_float>
 8009586:	1c42      	adds	r2, r0, #1
 8009588:	4606      	mov	r6, r0
 800958a:	d1d6      	bne.n	800953a <_svfiprintf_r+0x176>
 800958c:	89ab      	ldrh	r3, [r5, #12]
 800958e:	065b      	lsls	r3, r3, #25
 8009590:	f53f af2c 	bmi.w	80093ec <_svfiprintf_r+0x28>
 8009594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009596:	b01d      	add	sp, #116	; 0x74
 8009598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959c:	ab03      	add	r3, sp, #12
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	462a      	mov	r2, r5
 80095a2:	4b06      	ldr	r3, [pc, #24]	; (80095bc <_svfiprintf_r+0x1f8>)
 80095a4:	a904      	add	r1, sp, #16
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7fc ff6a 	bl	8006480 <_printf_i>
 80095ac:	e7eb      	b.n	8009586 <_svfiprintf_r+0x1c2>
 80095ae:	bf00      	nop
 80095b0:	0800a4e4 	.word	0x0800a4e4
 80095b4:	0800a4ee 	.word	0x0800a4ee
 80095b8:	08005f39 	.word	0x08005f39
 80095bc:	0800930d 	.word	0x0800930d
 80095c0:	0800a4ea 	.word	0x0800a4ea
 80095c4:	00000000 	.word	0x00000000

080095c8 <nan>:
 80095c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80095d0 <nan+0x8>
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	00000000 	.word	0x00000000
 80095d4:	7ff80000 	.word	0x7ff80000

080095d8 <_sbrk_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d06      	ldr	r5, [pc, #24]	; (80095f4 <_sbrk_r+0x1c>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7f8 fb38 	bl	8001c58 <_sbrk>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_sbrk_r+0x1a>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_sbrk_r+0x1a>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	200005a4 	.word	0x200005a4

080095f8 <strncmp>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	b17a      	cbz	r2, 800961c <strncmp+0x24>
 80095fc:	4603      	mov	r3, r0
 80095fe:	3901      	subs	r1, #1
 8009600:	1884      	adds	r4, r0, r2
 8009602:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009606:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800960a:	4290      	cmp	r0, r2
 800960c:	d101      	bne.n	8009612 <strncmp+0x1a>
 800960e:	42a3      	cmp	r3, r4
 8009610:	d101      	bne.n	8009616 <strncmp+0x1e>
 8009612:	1a80      	subs	r0, r0, r2
 8009614:	bd10      	pop	{r4, pc}
 8009616:	2800      	cmp	r0, #0
 8009618:	d1f3      	bne.n	8009602 <strncmp+0xa>
 800961a:	e7fa      	b.n	8009612 <strncmp+0x1a>
 800961c:	4610      	mov	r0, r2
 800961e:	e7f9      	b.n	8009614 <strncmp+0x1c>

08009620 <__ascii_wctomb>:
 8009620:	b149      	cbz	r1, 8009636 <__ascii_wctomb+0x16>
 8009622:	2aff      	cmp	r2, #255	; 0xff
 8009624:	bf85      	ittet	hi
 8009626:	238a      	movhi	r3, #138	; 0x8a
 8009628:	6003      	strhi	r3, [r0, #0]
 800962a:	700a      	strbls	r2, [r1, #0]
 800962c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009630:	bf98      	it	ls
 8009632:	2001      	movls	r0, #1
 8009634:	4770      	bx	lr
 8009636:	4608      	mov	r0, r1
 8009638:	4770      	bx	lr
	...

0800963c <__assert_func>:
 800963c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800963e:	4614      	mov	r4, r2
 8009640:	461a      	mov	r2, r3
 8009642:	4b09      	ldr	r3, [pc, #36]	; (8009668 <__assert_func+0x2c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	68d8      	ldr	r0, [r3, #12]
 800964a:	b14c      	cbz	r4, 8009660 <__assert_func+0x24>
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <__assert_func+0x30>)
 800964e:	9100      	str	r1, [sp, #0]
 8009650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009654:	4906      	ldr	r1, [pc, #24]	; (8009670 <__assert_func+0x34>)
 8009656:	462b      	mov	r3, r5
 8009658:	f000 f80e 	bl	8009678 <fiprintf>
 800965c:	f000 fa8c 	bl	8009b78 <abort>
 8009660:	4b04      	ldr	r3, [pc, #16]	; (8009674 <__assert_func+0x38>)
 8009662:	461c      	mov	r4, r3
 8009664:	e7f3      	b.n	800964e <__assert_func+0x12>
 8009666:	bf00      	nop
 8009668:	20000010 	.word	0x20000010
 800966c:	0800a4f5 	.word	0x0800a4f5
 8009670:	0800a502 	.word	0x0800a502
 8009674:	0800a530 	.word	0x0800a530

08009678 <fiprintf>:
 8009678:	b40e      	push	{r1, r2, r3}
 800967a:	b503      	push	{r0, r1, lr}
 800967c:	4601      	mov	r1, r0
 800967e:	ab03      	add	r3, sp, #12
 8009680:	4805      	ldr	r0, [pc, #20]	; (8009698 <fiprintf+0x20>)
 8009682:	f853 2b04 	ldr.w	r2, [r3], #4
 8009686:	6800      	ldr	r0, [r0, #0]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	f000 f885 	bl	8009798 <_vfiprintf_r>
 800968e:	b002      	add	sp, #8
 8009690:	f85d eb04 	ldr.w	lr, [sp], #4
 8009694:	b003      	add	sp, #12
 8009696:	4770      	bx	lr
 8009698:	20000010 	.word	0x20000010

0800969c <memmove>:
 800969c:	4288      	cmp	r0, r1
 800969e:	b510      	push	{r4, lr}
 80096a0:	eb01 0402 	add.w	r4, r1, r2
 80096a4:	d902      	bls.n	80096ac <memmove+0x10>
 80096a6:	4284      	cmp	r4, r0
 80096a8:	4623      	mov	r3, r4
 80096aa:	d807      	bhi.n	80096bc <memmove+0x20>
 80096ac:	1e43      	subs	r3, r0, #1
 80096ae:	42a1      	cmp	r1, r4
 80096b0:	d008      	beq.n	80096c4 <memmove+0x28>
 80096b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096ba:	e7f8      	b.n	80096ae <memmove+0x12>
 80096bc:	4402      	add	r2, r0
 80096be:	4601      	mov	r1, r0
 80096c0:	428a      	cmp	r2, r1
 80096c2:	d100      	bne.n	80096c6 <memmove+0x2a>
 80096c4:	bd10      	pop	{r4, pc}
 80096c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ce:	e7f7      	b.n	80096c0 <memmove+0x24>

080096d0 <__malloc_lock>:
 80096d0:	4801      	ldr	r0, [pc, #4]	; (80096d8 <__malloc_lock+0x8>)
 80096d2:	f000 bc11 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 80096d6:	bf00      	nop
 80096d8:	200005a8 	.word	0x200005a8

080096dc <__malloc_unlock>:
 80096dc:	4801      	ldr	r0, [pc, #4]	; (80096e4 <__malloc_unlock+0x8>)
 80096de:	f000 bc0c 	b.w	8009efa <__retarget_lock_release_recursive>
 80096e2:	bf00      	nop
 80096e4:	200005a8 	.word	0x200005a8

080096e8 <_realloc_r>:
 80096e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ec:	4680      	mov	r8, r0
 80096ee:	4614      	mov	r4, r2
 80096f0:	460e      	mov	r6, r1
 80096f2:	b921      	cbnz	r1, 80096fe <_realloc_r+0x16>
 80096f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	4611      	mov	r1, r2
 80096fa:	f7ff bd93 	b.w	8009224 <_malloc_r>
 80096fe:	b92a      	cbnz	r2, 800970c <_realloc_r+0x24>
 8009700:	f7ff fd24 	bl	800914c <_free_r>
 8009704:	4625      	mov	r5, r4
 8009706:	4628      	mov	r0, r5
 8009708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800970c:	f000 fc5c 	bl	8009fc8 <_malloc_usable_size_r>
 8009710:	4284      	cmp	r4, r0
 8009712:	4607      	mov	r7, r0
 8009714:	d802      	bhi.n	800971c <_realloc_r+0x34>
 8009716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800971a:	d812      	bhi.n	8009742 <_realloc_r+0x5a>
 800971c:	4621      	mov	r1, r4
 800971e:	4640      	mov	r0, r8
 8009720:	f7ff fd80 	bl	8009224 <_malloc_r>
 8009724:	4605      	mov	r5, r0
 8009726:	2800      	cmp	r0, #0
 8009728:	d0ed      	beq.n	8009706 <_realloc_r+0x1e>
 800972a:	42bc      	cmp	r4, r7
 800972c:	4622      	mov	r2, r4
 800972e:	4631      	mov	r1, r6
 8009730:	bf28      	it	cs
 8009732:	463a      	movcs	r2, r7
 8009734:	f7ff f824 	bl	8008780 <memcpy>
 8009738:	4631      	mov	r1, r6
 800973a:	4640      	mov	r0, r8
 800973c:	f7ff fd06 	bl	800914c <_free_r>
 8009740:	e7e1      	b.n	8009706 <_realloc_r+0x1e>
 8009742:	4635      	mov	r5, r6
 8009744:	e7df      	b.n	8009706 <_realloc_r+0x1e>

08009746 <__sfputc_r>:
 8009746:	6893      	ldr	r3, [r2, #8]
 8009748:	3b01      	subs	r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	b410      	push	{r4}
 800974e:	6093      	str	r3, [r2, #8]
 8009750:	da08      	bge.n	8009764 <__sfputc_r+0x1e>
 8009752:	6994      	ldr	r4, [r2, #24]
 8009754:	42a3      	cmp	r3, r4
 8009756:	db01      	blt.n	800975c <__sfputc_r+0x16>
 8009758:	290a      	cmp	r1, #10
 800975a:	d103      	bne.n	8009764 <__sfputc_r+0x1e>
 800975c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009760:	f000 b94a 	b.w	80099f8 <__swbuf_r>
 8009764:	6813      	ldr	r3, [r2, #0]
 8009766:	1c58      	adds	r0, r3, #1
 8009768:	6010      	str	r0, [r2, #0]
 800976a:	7019      	strb	r1, [r3, #0]
 800976c:	4608      	mov	r0, r1
 800976e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009772:	4770      	bx	lr

08009774 <__sfputs_r>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	4614      	mov	r4, r2
 800977c:	18d5      	adds	r5, r2, r3
 800977e:	42ac      	cmp	r4, r5
 8009780:	d101      	bne.n	8009786 <__sfputs_r+0x12>
 8009782:	2000      	movs	r0, #0
 8009784:	e007      	b.n	8009796 <__sfputs_r+0x22>
 8009786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978a:	463a      	mov	r2, r7
 800978c:	4630      	mov	r0, r6
 800978e:	f7ff ffda 	bl	8009746 <__sfputc_r>
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	d1f3      	bne.n	800977e <__sfputs_r+0xa>
 8009796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009798 <_vfiprintf_r>:
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	460d      	mov	r5, r1
 800979e:	b09d      	sub	sp, #116	; 0x74
 80097a0:	4614      	mov	r4, r2
 80097a2:	4698      	mov	r8, r3
 80097a4:	4606      	mov	r6, r0
 80097a6:	b118      	cbz	r0, 80097b0 <_vfiprintf_r+0x18>
 80097a8:	6983      	ldr	r3, [r0, #24]
 80097aa:	b90b      	cbnz	r3, 80097b0 <_vfiprintf_r+0x18>
 80097ac:	f000 fb06 	bl	8009dbc <__sinit>
 80097b0:	4b89      	ldr	r3, [pc, #548]	; (80099d8 <_vfiprintf_r+0x240>)
 80097b2:	429d      	cmp	r5, r3
 80097b4:	d11b      	bne.n	80097ee <_vfiprintf_r+0x56>
 80097b6:	6875      	ldr	r5, [r6, #4]
 80097b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ba:	07d9      	lsls	r1, r3, #31
 80097bc:	d405      	bmi.n	80097ca <_vfiprintf_r+0x32>
 80097be:	89ab      	ldrh	r3, [r5, #12]
 80097c0:	059a      	lsls	r2, r3, #22
 80097c2:	d402      	bmi.n	80097ca <_vfiprintf_r+0x32>
 80097c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097c6:	f000 fb97 	bl	8009ef8 <__retarget_lock_acquire_recursive>
 80097ca:	89ab      	ldrh	r3, [r5, #12]
 80097cc:	071b      	lsls	r3, r3, #28
 80097ce:	d501      	bpl.n	80097d4 <_vfiprintf_r+0x3c>
 80097d0:	692b      	ldr	r3, [r5, #16]
 80097d2:	b9eb      	cbnz	r3, 8009810 <_vfiprintf_r+0x78>
 80097d4:	4629      	mov	r1, r5
 80097d6:	4630      	mov	r0, r6
 80097d8:	f000 f960 	bl	8009a9c <__swsetup_r>
 80097dc:	b1c0      	cbz	r0, 8009810 <_vfiprintf_r+0x78>
 80097de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097e0:	07dc      	lsls	r4, r3, #31
 80097e2:	d50e      	bpl.n	8009802 <_vfiprintf_r+0x6a>
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097e8:	b01d      	add	sp, #116	; 0x74
 80097ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ee:	4b7b      	ldr	r3, [pc, #492]	; (80099dc <_vfiprintf_r+0x244>)
 80097f0:	429d      	cmp	r5, r3
 80097f2:	d101      	bne.n	80097f8 <_vfiprintf_r+0x60>
 80097f4:	68b5      	ldr	r5, [r6, #8]
 80097f6:	e7df      	b.n	80097b8 <_vfiprintf_r+0x20>
 80097f8:	4b79      	ldr	r3, [pc, #484]	; (80099e0 <_vfiprintf_r+0x248>)
 80097fa:	429d      	cmp	r5, r3
 80097fc:	bf08      	it	eq
 80097fe:	68f5      	ldreq	r5, [r6, #12]
 8009800:	e7da      	b.n	80097b8 <_vfiprintf_r+0x20>
 8009802:	89ab      	ldrh	r3, [r5, #12]
 8009804:	0598      	lsls	r0, r3, #22
 8009806:	d4ed      	bmi.n	80097e4 <_vfiprintf_r+0x4c>
 8009808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800980a:	f000 fb76 	bl	8009efa <__retarget_lock_release_recursive>
 800980e:	e7e9      	b.n	80097e4 <_vfiprintf_r+0x4c>
 8009810:	2300      	movs	r3, #0
 8009812:	9309      	str	r3, [sp, #36]	; 0x24
 8009814:	2320      	movs	r3, #32
 8009816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800981a:	f8cd 800c 	str.w	r8, [sp, #12]
 800981e:	2330      	movs	r3, #48	; 0x30
 8009820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099e4 <_vfiprintf_r+0x24c>
 8009824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009828:	f04f 0901 	mov.w	r9, #1
 800982c:	4623      	mov	r3, r4
 800982e:	469a      	mov	sl, r3
 8009830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009834:	b10a      	cbz	r2, 800983a <_vfiprintf_r+0xa2>
 8009836:	2a25      	cmp	r2, #37	; 0x25
 8009838:	d1f9      	bne.n	800982e <_vfiprintf_r+0x96>
 800983a:	ebba 0b04 	subs.w	fp, sl, r4
 800983e:	d00b      	beq.n	8009858 <_vfiprintf_r+0xc0>
 8009840:	465b      	mov	r3, fp
 8009842:	4622      	mov	r2, r4
 8009844:	4629      	mov	r1, r5
 8009846:	4630      	mov	r0, r6
 8009848:	f7ff ff94 	bl	8009774 <__sfputs_r>
 800984c:	3001      	adds	r0, #1
 800984e:	f000 80aa 	beq.w	80099a6 <_vfiprintf_r+0x20e>
 8009852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009854:	445a      	add	r2, fp
 8009856:	9209      	str	r2, [sp, #36]	; 0x24
 8009858:	f89a 3000 	ldrb.w	r3, [sl]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 80a2 	beq.w	80099a6 <_vfiprintf_r+0x20e>
 8009862:	2300      	movs	r3, #0
 8009864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800986c:	f10a 0a01 	add.w	sl, sl, #1
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	9307      	str	r3, [sp, #28]
 8009874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009878:	931a      	str	r3, [sp, #104]	; 0x68
 800987a:	4654      	mov	r4, sl
 800987c:	2205      	movs	r2, #5
 800987e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009882:	4858      	ldr	r0, [pc, #352]	; (80099e4 <_vfiprintf_r+0x24c>)
 8009884:	f7f6 fcb4 	bl	80001f0 <memchr>
 8009888:	9a04      	ldr	r2, [sp, #16]
 800988a:	b9d8      	cbnz	r0, 80098c4 <_vfiprintf_r+0x12c>
 800988c:	06d1      	lsls	r1, r2, #27
 800988e:	bf44      	itt	mi
 8009890:	2320      	movmi	r3, #32
 8009892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009896:	0713      	lsls	r3, r2, #28
 8009898:	bf44      	itt	mi
 800989a:	232b      	movmi	r3, #43	; 0x2b
 800989c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a0:	f89a 3000 	ldrb.w	r3, [sl]
 80098a4:	2b2a      	cmp	r3, #42	; 0x2a
 80098a6:	d015      	beq.n	80098d4 <_vfiprintf_r+0x13c>
 80098a8:	9a07      	ldr	r2, [sp, #28]
 80098aa:	4654      	mov	r4, sl
 80098ac:	2000      	movs	r0, #0
 80098ae:	f04f 0c0a 	mov.w	ip, #10
 80098b2:	4621      	mov	r1, r4
 80098b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b8:	3b30      	subs	r3, #48	; 0x30
 80098ba:	2b09      	cmp	r3, #9
 80098bc:	d94e      	bls.n	800995c <_vfiprintf_r+0x1c4>
 80098be:	b1b0      	cbz	r0, 80098ee <_vfiprintf_r+0x156>
 80098c0:	9207      	str	r2, [sp, #28]
 80098c2:	e014      	b.n	80098ee <_vfiprintf_r+0x156>
 80098c4:	eba0 0308 	sub.w	r3, r0, r8
 80098c8:	fa09 f303 	lsl.w	r3, r9, r3
 80098cc:	4313      	orrs	r3, r2
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	46a2      	mov	sl, r4
 80098d2:	e7d2      	b.n	800987a <_vfiprintf_r+0xe2>
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	1d19      	adds	r1, r3, #4
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	9103      	str	r1, [sp, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	bfbb      	ittet	lt
 80098e0:	425b      	neglt	r3, r3
 80098e2:	f042 0202 	orrlt.w	r2, r2, #2
 80098e6:	9307      	strge	r3, [sp, #28]
 80098e8:	9307      	strlt	r3, [sp, #28]
 80098ea:	bfb8      	it	lt
 80098ec:	9204      	strlt	r2, [sp, #16]
 80098ee:	7823      	ldrb	r3, [r4, #0]
 80098f0:	2b2e      	cmp	r3, #46	; 0x2e
 80098f2:	d10c      	bne.n	800990e <_vfiprintf_r+0x176>
 80098f4:	7863      	ldrb	r3, [r4, #1]
 80098f6:	2b2a      	cmp	r3, #42	; 0x2a
 80098f8:	d135      	bne.n	8009966 <_vfiprintf_r+0x1ce>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	1d1a      	adds	r2, r3, #4
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	9203      	str	r2, [sp, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	bfb8      	it	lt
 8009906:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800990a:	3402      	adds	r4, #2
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099f4 <_vfiprintf_r+0x25c>
 8009912:	7821      	ldrb	r1, [r4, #0]
 8009914:	2203      	movs	r2, #3
 8009916:	4650      	mov	r0, sl
 8009918:	f7f6 fc6a 	bl	80001f0 <memchr>
 800991c:	b140      	cbz	r0, 8009930 <_vfiprintf_r+0x198>
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	eba0 000a 	sub.w	r0, r0, sl
 8009924:	fa03 f000 	lsl.w	r0, r3, r0
 8009928:	9b04      	ldr	r3, [sp, #16]
 800992a:	4303      	orrs	r3, r0
 800992c:	3401      	adds	r4, #1
 800992e:	9304      	str	r3, [sp, #16]
 8009930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009934:	482c      	ldr	r0, [pc, #176]	; (80099e8 <_vfiprintf_r+0x250>)
 8009936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800993a:	2206      	movs	r2, #6
 800993c:	f7f6 fc58 	bl	80001f0 <memchr>
 8009940:	2800      	cmp	r0, #0
 8009942:	d03f      	beq.n	80099c4 <_vfiprintf_r+0x22c>
 8009944:	4b29      	ldr	r3, [pc, #164]	; (80099ec <_vfiprintf_r+0x254>)
 8009946:	bb1b      	cbnz	r3, 8009990 <_vfiprintf_r+0x1f8>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	3307      	adds	r3, #7
 800994c:	f023 0307 	bic.w	r3, r3, #7
 8009950:	3308      	adds	r3, #8
 8009952:	9303      	str	r3, [sp, #12]
 8009954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009956:	443b      	add	r3, r7
 8009958:	9309      	str	r3, [sp, #36]	; 0x24
 800995a:	e767      	b.n	800982c <_vfiprintf_r+0x94>
 800995c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009960:	460c      	mov	r4, r1
 8009962:	2001      	movs	r0, #1
 8009964:	e7a5      	b.n	80098b2 <_vfiprintf_r+0x11a>
 8009966:	2300      	movs	r3, #0
 8009968:	3401      	adds	r4, #1
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	4619      	mov	r1, r3
 800996e:	f04f 0c0a 	mov.w	ip, #10
 8009972:	4620      	mov	r0, r4
 8009974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009978:	3a30      	subs	r2, #48	; 0x30
 800997a:	2a09      	cmp	r2, #9
 800997c:	d903      	bls.n	8009986 <_vfiprintf_r+0x1ee>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0c5      	beq.n	800990e <_vfiprintf_r+0x176>
 8009982:	9105      	str	r1, [sp, #20]
 8009984:	e7c3      	b.n	800990e <_vfiprintf_r+0x176>
 8009986:	fb0c 2101 	mla	r1, ip, r1, r2
 800998a:	4604      	mov	r4, r0
 800998c:	2301      	movs	r3, #1
 800998e:	e7f0      	b.n	8009972 <_vfiprintf_r+0x1da>
 8009990:	ab03      	add	r3, sp, #12
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	462a      	mov	r2, r5
 8009996:	4b16      	ldr	r3, [pc, #88]	; (80099f0 <_vfiprintf_r+0x258>)
 8009998:	a904      	add	r1, sp, #16
 800999a:	4630      	mov	r0, r6
 800999c:	f7fc facc 	bl	8005f38 <_printf_float>
 80099a0:	4607      	mov	r7, r0
 80099a2:	1c78      	adds	r0, r7, #1
 80099a4:	d1d6      	bne.n	8009954 <_vfiprintf_r+0x1bc>
 80099a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099a8:	07d9      	lsls	r1, r3, #31
 80099aa:	d405      	bmi.n	80099b8 <_vfiprintf_r+0x220>
 80099ac:	89ab      	ldrh	r3, [r5, #12]
 80099ae:	059a      	lsls	r2, r3, #22
 80099b0:	d402      	bmi.n	80099b8 <_vfiprintf_r+0x220>
 80099b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099b4:	f000 faa1 	bl	8009efa <__retarget_lock_release_recursive>
 80099b8:	89ab      	ldrh	r3, [r5, #12]
 80099ba:	065b      	lsls	r3, r3, #25
 80099bc:	f53f af12 	bmi.w	80097e4 <_vfiprintf_r+0x4c>
 80099c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099c2:	e711      	b.n	80097e8 <_vfiprintf_r+0x50>
 80099c4:	ab03      	add	r3, sp, #12
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	462a      	mov	r2, r5
 80099ca:	4b09      	ldr	r3, [pc, #36]	; (80099f0 <_vfiprintf_r+0x258>)
 80099cc:	a904      	add	r1, sp, #16
 80099ce:	4630      	mov	r0, r6
 80099d0:	f7fc fd56 	bl	8006480 <_printf_i>
 80099d4:	e7e4      	b.n	80099a0 <_vfiprintf_r+0x208>
 80099d6:	bf00      	nop
 80099d8:	0800a654 	.word	0x0800a654
 80099dc:	0800a674 	.word	0x0800a674
 80099e0:	0800a634 	.word	0x0800a634
 80099e4:	0800a4e4 	.word	0x0800a4e4
 80099e8:	0800a4ee 	.word	0x0800a4ee
 80099ec:	08005f39 	.word	0x08005f39
 80099f0:	08009775 	.word	0x08009775
 80099f4:	0800a4ea 	.word	0x0800a4ea

080099f8 <__swbuf_r>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	460e      	mov	r6, r1
 80099fc:	4614      	mov	r4, r2
 80099fe:	4605      	mov	r5, r0
 8009a00:	b118      	cbz	r0, 8009a0a <__swbuf_r+0x12>
 8009a02:	6983      	ldr	r3, [r0, #24]
 8009a04:	b90b      	cbnz	r3, 8009a0a <__swbuf_r+0x12>
 8009a06:	f000 f9d9 	bl	8009dbc <__sinit>
 8009a0a:	4b21      	ldr	r3, [pc, #132]	; (8009a90 <__swbuf_r+0x98>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	d12b      	bne.n	8009a68 <__swbuf_r+0x70>
 8009a10:	686c      	ldr	r4, [r5, #4]
 8009a12:	69a3      	ldr	r3, [r4, #24]
 8009a14:	60a3      	str	r3, [r4, #8]
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	071a      	lsls	r2, r3, #28
 8009a1a:	d52f      	bpl.n	8009a7c <__swbuf_r+0x84>
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	b36b      	cbz	r3, 8009a7c <__swbuf_r+0x84>
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	6820      	ldr	r0, [r4, #0]
 8009a24:	1ac0      	subs	r0, r0, r3
 8009a26:	6963      	ldr	r3, [r4, #20]
 8009a28:	b2f6      	uxtb	r6, r6
 8009a2a:	4283      	cmp	r3, r0
 8009a2c:	4637      	mov	r7, r6
 8009a2e:	dc04      	bgt.n	8009a3a <__swbuf_r+0x42>
 8009a30:	4621      	mov	r1, r4
 8009a32:	4628      	mov	r0, r5
 8009a34:	f000 f92e 	bl	8009c94 <_fflush_r>
 8009a38:	bb30      	cbnz	r0, 8009a88 <__swbuf_r+0x90>
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	6022      	str	r2, [r4, #0]
 8009a46:	701e      	strb	r6, [r3, #0]
 8009a48:	6963      	ldr	r3, [r4, #20]
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	4283      	cmp	r3, r0
 8009a4e:	d004      	beq.n	8009a5a <__swbuf_r+0x62>
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	07db      	lsls	r3, r3, #31
 8009a54:	d506      	bpl.n	8009a64 <__swbuf_r+0x6c>
 8009a56:	2e0a      	cmp	r6, #10
 8009a58:	d104      	bne.n	8009a64 <__swbuf_r+0x6c>
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f000 f919 	bl	8009c94 <_fflush_r>
 8009a62:	b988      	cbnz	r0, 8009a88 <__swbuf_r+0x90>
 8009a64:	4638      	mov	r0, r7
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <__swbuf_r+0x9c>)
 8009a6a:	429c      	cmp	r4, r3
 8009a6c:	d101      	bne.n	8009a72 <__swbuf_r+0x7a>
 8009a6e:	68ac      	ldr	r4, [r5, #8]
 8009a70:	e7cf      	b.n	8009a12 <__swbuf_r+0x1a>
 8009a72:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <__swbuf_r+0xa0>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	bf08      	it	eq
 8009a78:	68ec      	ldreq	r4, [r5, #12]
 8009a7a:	e7ca      	b.n	8009a12 <__swbuf_r+0x1a>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 f80c 	bl	8009a9c <__swsetup_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d0cb      	beq.n	8009a20 <__swbuf_r+0x28>
 8009a88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009a8c:	e7ea      	b.n	8009a64 <__swbuf_r+0x6c>
 8009a8e:	bf00      	nop
 8009a90:	0800a654 	.word	0x0800a654
 8009a94:	0800a674 	.word	0x0800a674
 8009a98:	0800a634 	.word	0x0800a634

08009a9c <__swsetup_r>:
 8009a9c:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <__swsetup_r+0xcc>)
 8009a9e:	b570      	push	{r4, r5, r6, lr}
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	b125      	cbz	r5, 8009ab2 <__swsetup_r+0x16>
 8009aa8:	69ab      	ldr	r3, [r5, #24]
 8009aaa:	b913      	cbnz	r3, 8009ab2 <__swsetup_r+0x16>
 8009aac:	4628      	mov	r0, r5
 8009aae:	f000 f985 	bl	8009dbc <__sinit>
 8009ab2:	4b2e      	ldr	r3, [pc, #184]	; (8009b6c <__swsetup_r+0xd0>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	d10f      	bne.n	8009ad8 <__swsetup_r+0x3c>
 8009ab8:	686c      	ldr	r4, [r5, #4]
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ac0:	0719      	lsls	r1, r3, #28
 8009ac2:	d42c      	bmi.n	8009b1e <__swsetup_r+0x82>
 8009ac4:	06dd      	lsls	r5, r3, #27
 8009ac6:	d411      	bmi.n	8009aec <__swsetup_r+0x50>
 8009ac8:	2309      	movs	r3, #9
 8009aca:	6033      	str	r3, [r6, #0]
 8009acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ad6:	e03e      	b.n	8009b56 <__swsetup_r+0xba>
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <__swsetup_r+0xd4>)
 8009ada:	429c      	cmp	r4, r3
 8009adc:	d101      	bne.n	8009ae2 <__swsetup_r+0x46>
 8009ade:	68ac      	ldr	r4, [r5, #8]
 8009ae0:	e7eb      	b.n	8009aba <__swsetup_r+0x1e>
 8009ae2:	4b24      	ldr	r3, [pc, #144]	; (8009b74 <__swsetup_r+0xd8>)
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	bf08      	it	eq
 8009ae8:	68ec      	ldreq	r4, [r5, #12]
 8009aea:	e7e6      	b.n	8009aba <__swsetup_r+0x1e>
 8009aec:	0758      	lsls	r0, r3, #29
 8009aee:	d512      	bpl.n	8009b16 <__swsetup_r+0x7a>
 8009af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009af2:	b141      	cbz	r1, 8009b06 <__swsetup_r+0x6a>
 8009af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009af8:	4299      	cmp	r1, r3
 8009afa:	d002      	beq.n	8009b02 <__swsetup_r+0x66>
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff fb25 	bl	800914c <_free_r>
 8009b02:	2300      	movs	r3, #0
 8009b04:	6363      	str	r3, [r4, #52]	; 0x34
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b0c:	81a3      	strh	r3, [r4, #12]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6063      	str	r3, [r4, #4]
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	f043 0308 	orr.w	r3, r3, #8
 8009b1c:	81a3      	strh	r3, [r4, #12]
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	b94b      	cbnz	r3, 8009b36 <__swsetup_r+0x9a>
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b2c:	d003      	beq.n	8009b36 <__swsetup_r+0x9a>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4630      	mov	r0, r6
 8009b32:	f000 fa09 	bl	8009f48 <__smakebuf_r>
 8009b36:	89a0      	ldrh	r0, [r4, #12]
 8009b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b3c:	f010 0301 	ands.w	r3, r0, #1
 8009b40:	d00a      	beq.n	8009b58 <__swsetup_r+0xbc>
 8009b42:	2300      	movs	r3, #0
 8009b44:	60a3      	str	r3, [r4, #8]
 8009b46:	6963      	ldr	r3, [r4, #20]
 8009b48:	425b      	negs	r3, r3
 8009b4a:	61a3      	str	r3, [r4, #24]
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	b943      	cbnz	r3, 8009b62 <__swsetup_r+0xc6>
 8009b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b54:	d1ba      	bne.n	8009acc <__swsetup_r+0x30>
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	0781      	lsls	r1, r0, #30
 8009b5a:	bf58      	it	pl
 8009b5c:	6963      	ldrpl	r3, [r4, #20]
 8009b5e:	60a3      	str	r3, [r4, #8]
 8009b60:	e7f4      	b.n	8009b4c <__swsetup_r+0xb0>
 8009b62:	2000      	movs	r0, #0
 8009b64:	e7f7      	b.n	8009b56 <__swsetup_r+0xba>
 8009b66:	bf00      	nop
 8009b68:	20000010 	.word	0x20000010
 8009b6c:	0800a654 	.word	0x0800a654
 8009b70:	0800a674 	.word	0x0800a674
 8009b74:	0800a634 	.word	0x0800a634

08009b78 <abort>:
 8009b78:	b508      	push	{r3, lr}
 8009b7a:	2006      	movs	r0, #6
 8009b7c:	f000 fa54 	bl	800a028 <raise>
 8009b80:	2001      	movs	r0, #1
 8009b82:	f7f7 fff1 	bl	8001b68 <_exit>
	...

08009b88 <__sflush_r>:
 8009b88:	898a      	ldrh	r2, [r1, #12]
 8009b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8e:	4605      	mov	r5, r0
 8009b90:	0710      	lsls	r0, r2, #28
 8009b92:	460c      	mov	r4, r1
 8009b94:	d458      	bmi.n	8009c48 <__sflush_r+0xc0>
 8009b96:	684b      	ldr	r3, [r1, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dc05      	bgt.n	8009ba8 <__sflush_r+0x20>
 8009b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	dc02      	bgt.n	8009ba8 <__sflush_r+0x20>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009baa:	2e00      	cmp	r6, #0
 8009bac:	d0f9      	beq.n	8009ba2 <__sflush_r+0x1a>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bb4:	682f      	ldr	r7, [r5, #0]
 8009bb6:	602b      	str	r3, [r5, #0]
 8009bb8:	d032      	beq.n	8009c20 <__sflush_r+0x98>
 8009bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	075a      	lsls	r2, r3, #29
 8009bc0:	d505      	bpl.n	8009bce <__sflush_r+0x46>
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	1ac0      	subs	r0, r0, r3
 8009bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bc8:	b10b      	cbz	r3, 8009bce <__sflush_r+0x46>
 8009bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bcc:	1ac0      	subs	r0, r0, r3
 8009bce:	2300      	movs	r3, #0
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bd4:	6a21      	ldr	r1, [r4, #32]
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b0      	blx	r6
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	d106      	bne.n	8009bee <__sflush_r+0x66>
 8009be0:	6829      	ldr	r1, [r5, #0]
 8009be2:	291d      	cmp	r1, #29
 8009be4:	d82c      	bhi.n	8009c40 <__sflush_r+0xb8>
 8009be6:	4a2a      	ldr	r2, [pc, #168]	; (8009c90 <__sflush_r+0x108>)
 8009be8:	40ca      	lsrs	r2, r1
 8009bea:	07d6      	lsls	r6, r2, #31
 8009bec:	d528      	bpl.n	8009c40 <__sflush_r+0xb8>
 8009bee:	2200      	movs	r2, #0
 8009bf0:	6062      	str	r2, [r4, #4]
 8009bf2:	04d9      	lsls	r1, r3, #19
 8009bf4:	6922      	ldr	r2, [r4, #16]
 8009bf6:	6022      	str	r2, [r4, #0]
 8009bf8:	d504      	bpl.n	8009c04 <__sflush_r+0x7c>
 8009bfa:	1c42      	adds	r2, r0, #1
 8009bfc:	d101      	bne.n	8009c02 <__sflush_r+0x7a>
 8009bfe:	682b      	ldr	r3, [r5, #0]
 8009c00:	b903      	cbnz	r3, 8009c04 <__sflush_r+0x7c>
 8009c02:	6560      	str	r0, [r4, #84]	; 0x54
 8009c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c06:	602f      	str	r7, [r5, #0]
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	d0ca      	beq.n	8009ba2 <__sflush_r+0x1a>
 8009c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d002      	beq.n	8009c1a <__sflush_r+0x92>
 8009c14:	4628      	mov	r0, r5
 8009c16:	f7ff fa99 	bl	800914c <_free_r>
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8009c1e:	e7c1      	b.n	8009ba4 <__sflush_r+0x1c>
 8009c20:	6a21      	ldr	r1, [r4, #32]
 8009c22:	2301      	movs	r3, #1
 8009c24:	4628      	mov	r0, r5
 8009c26:	47b0      	blx	r6
 8009c28:	1c41      	adds	r1, r0, #1
 8009c2a:	d1c7      	bne.n	8009bbc <__sflush_r+0x34>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0c4      	beq.n	8009bbc <__sflush_r+0x34>
 8009c32:	2b1d      	cmp	r3, #29
 8009c34:	d001      	beq.n	8009c3a <__sflush_r+0xb2>
 8009c36:	2b16      	cmp	r3, #22
 8009c38:	d101      	bne.n	8009c3e <__sflush_r+0xb6>
 8009c3a:	602f      	str	r7, [r5, #0]
 8009c3c:	e7b1      	b.n	8009ba2 <__sflush_r+0x1a>
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	e7ad      	b.n	8009ba4 <__sflush_r+0x1c>
 8009c48:	690f      	ldr	r7, [r1, #16]
 8009c4a:	2f00      	cmp	r7, #0
 8009c4c:	d0a9      	beq.n	8009ba2 <__sflush_r+0x1a>
 8009c4e:	0793      	lsls	r3, r2, #30
 8009c50:	680e      	ldr	r6, [r1, #0]
 8009c52:	bf08      	it	eq
 8009c54:	694b      	ldreq	r3, [r1, #20]
 8009c56:	600f      	str	r7, [r1, #0]
 8009c58:	bf18      	it	ne
 8009c5a:	2300      	movne	r3, #0
 8009c5c:	eba6 0807 	sub.w	r8, r6, r7
 8009c60:	608b      	str	r3, [r1, #8]
 8009c62:	f1b8 0f00 	cmp.w	r8, #0
 8009c66:	dd9c      	ble.n	8009ba2 <__sflush_r+0x1a>
 8009c68:	6a21      	ldr	r1, [r4, #32]
 8009c6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c6c:	4643      	mov	r3, r8
 8009c6e:	463a      	mov	r2, r7
 8009c70:	4628      	mov	r0, r5
 8009c72:	47b0      	blx	r6
 8009c74:	2800      	cmp	r0, #0
 8009c76:	dc06      	bgt.n	8009c86 <__sflush_r+0xfe>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c84:	e78e      	b.n	8009ba4 <__sflush_r+0x1c>
 8009c86:	4407      	add	r7, r0
 8009c88:	eba8 0800 	sub.w	r8, r8, r0
 8009c8c:	e7e9      	b.n	8009c62 <__sflush_r+0xda>
 8009c8e:	bf00      	nop
 8009c90:	20400001 	.word	0x20400001

08009c94 <_fflush_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	690b      	ldr	r3, [r1, #16]
 8009c98:	4605      	mov	r5, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	b913      	cbnz	r3, 8009ca4 <_fflush_r+0x10>
 8009c9e:	2500      	movs	r5, #0
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	b118      	cbz	r0, 8009cae <_fflush_r+0x1a>
 8009ca6:	6983      	ldr	r3, [r0, #24]
 8009ca8:	b90b      	cbnz	r3, 8009cae <_fflush_r+0x1a>
 8009caa:	f000 f887 	bl	8009dbc <__sinit>
 8009cae:	4b14      	ldr	r3, [pc, #80]	; (8009d00 <_fflush_r+0x6c>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d11b      	bne.n	8009cec <_fflush_r+0x58>
 8009cb4:	686c      	ldr	r4, [r5, #4]
 8009cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0ef      	beq.n	8009c9e <_fflush_r+0xa>
 8009cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cc0:	07d0      	lsls	r0, r2, #31
 8009cc2:	d404      	bmi.n	8009cce <_fflush_r+0x3a>
 8009cc4:	0599      	lsls	r1, r3, #22
 8009cc6:	d402      	bmi.n	8009cce <_fflush_r+0x3a>
 8009cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cca:	f000 f915 	bl	8009ef8 <__retarget_lock_acquire_recursive>
 8009cce:	4628      	mov	r0, r5
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	f7ff ff59 	bl	8009b88 <__sflush_r>
 8009cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cd8:	07da      	lsls	r2, r3, #31
 8009cda:	4605      	mov	r5, r0
 8009cdc:	d4e0      	bmi.n	8009ca0 <_fflush_r+0xc>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	059b      	lsls	r3, r3, #22
 8009ce2:	d4dd      	bmi.n	8009ca0 <_fflush_r+0xc>
 8009ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ce6:	f000 f908 	bl	8009efa <__retarget_lock_release_recursive>
 8009cea:	e7d9      	b.n	8009ca0 <_fflush_r+0xc>
 8009cec:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <_fflush_r+0x70>)
 8009cee:	429c      	cmp	r4, r3
 8009cf0:	d101      	bne.n	8009cf6 <_fflush_r+0x62>
 8009cf2:	68ac      	ldr	r4, [r5, #8]
 8009cf4:	e7df      	b.n	8009cb6 <_fflush_r+0x22>
 8009cf6:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <_fflush_r+0x74>)
 8009cf8:	429c      	cmp	r4, r3
 8009cfa:	bf08      	it	eq
 8009cfc:	68ec      	ldreq	r4, [r5, #12]
 8009cfe:	e7da      	b.n	8009cb6 <_fflush_r+0x22>
 8009d00:	0800a654 	.word	0x0800a654
 8009d04:	0800a674 	.word	0x0800a674
 8009d08:	0800a634 	.word	0x0800a634

08009d0c <std>:
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	e9c0 3300 	strd	r3, r3, [r0]
 8009d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d1a:	6083      	str	r3, [r0, #8]
 8009d1c:	8181      	strh	r1, [r0, #12]
 8009d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8009d20:	81c2      	strh	r2, [r0, #14]
 8009d22:	6183      	str	r3, [r0, #24]
 8009d24:	4619      	mov	r1, r3
 8009d26:	2208      	movs	r2, #8
 8009d28:	305c      	adds	r0, #92	; 0x5c
 8009d2a:	f7fc f85d 	bl	8005de8 <memset>
 8009d2e:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <std+0x38>)
 8009d30:	6263      	str	r3, [r4, #36]	; 0x24
 8009d32:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <std+0x3c>)
 8009d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d36:	4b05      	ldr	r3, [pc, #20]	; (8009d4c <std+0x40>)
 8009d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d3a:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <std+0x44>)
 8009d3c:	6224      	str	r4, [r4, #32]
 8009d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d40:	bd10      	pop	{r4, pc}
 8009d42:	bf00      	nop
 8009d44:	0800a061 	.word	0x0800a061
 8009d48:	0800a083 	.word	0x0800a083
 8009d4c:	0800a0bb 	.word	0x0800a0bb
 8009d50:	0800a0df 	.word	0x0800a0df

08009d54 <_cleanup_r>:
 8009d54:	4901      	ldr	r1, [pc, #4]	; (8009d5c <_cleanup_r+0x8>)
 8009d56:	f000 b8af 	b.w	8009eb8 <_fwalk_reent>
 8009d5a:	bf00      	nop
 8009d5c:	08009c95 	.word	0x08009c95

08009d60 <__sfmoreglue>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	2268      	movs	r2, #104	; 0x68
 8009d64:	1e4d      	subs	r5, r1, #1
 8009d66:	4355      	muls	r5, r2
 8009d68:	460e      	mov	r6, r1
 8009d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d6e:	f7ff fa59 	bl	8009224 <_malloc_r>
 8009d72:	4604      	mov	r4, r0
 8009d74:	b140      	cbz	r0, 8009d88 <__sfmoreglue+0x28>
 8009d76:	2100      	movs	r1, #0
 8009d78:	e9c0 1600 	strd	r1, r6, [r0]
 8009d7c:	300c      	adds	r0, #12
 8009d7e:	60a0      	str	r0, [r4, #8]
 8009d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d84:	f7fc f830 	bl	8005de8 <memset>
 8009d88:	4620      	mov	r0, r4
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}

08009d8c <__sfp_lock_acquire>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__sfp_lock_acquire+0x8>)
 8009d8e:	f000 b8b3 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 8009d92:	bf00      	nop
 8009d94:	200005a9 	.word	0x200005a9

08009d98 <__sfp_lock_release>:
 8009d98:	4801      	ldr	r0, [pc, #4]	; (8009da0 <__sfp_lock_release+0x8>)
 8009d9a:	f000 b8ae 	b.w	8009efa <__retarget_lock_release_recursive>
 8009d9e:	bf00      	nop
 8009da0:	200005a9 	.word	0x200005a9

08009da4 <__sinit_lock_acquire>:
 8009da4:	4801      	ldr	r0, [pc, #4]	; (8009dac <__sinit_lock_acquire+0x8>)
 8009da6:	f000 b8a7 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 8009daa:	bf00      	nop
 8009dac:	200005aa 	.word	0x200005aa

08009db0 <__sinit_lock_release>:
 8009db0:	4801      	ldr	r0, [pc, #4]	; (8009db8 <__sinit_lock_release+0x8>)
 8009db2:	f000 b8a2 	b.w	8009efa <__retarget_lock_release_recursive>
 8009db6:	bf00      	nop
 8009db8:	200005aa 	.word	0x200005aa

08009dbc <__sinit>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	f7ff fff0 	bl	8009da4 <__sinit_lock_acquire>
 8009dc4:	69a3      	ldr	r3, [r4, #24]
 8009dc6:	b11b      	cbz	r3, 8009dd0 <__sinit+0x14>
 8009dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dcc:	f7ff bff0 	b.w	8009db0 <__sinit_lock_release>
 8009dd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009dd4:	6523      	str	r3, [r4, #80]	; 0x50
 8009dd6:	4b13      	ldr	r3, [pc, #76]	; (8009e24 <__sinit+0x68>)
 8009dd8:	4a13      	ldr	r2, [pc, #76]	; (8009e28 <__sinit+0x6c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	bf04      	itt	eq
 8009de2:	2301      	moveq	r3, #1
 8009de4:	61a3      	streq	r3, [r4, #24]
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 f820 	bl	8009e2c <__sfp>
 8009dec:	6060      	str	r0, [r4, #4]
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 f81c 	bl	8009e2c <__sfp>
 8009df4:	60a0      	str	r0, [r4, #8]
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 f818 	bl	8009e2c <__sfp>
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	60e0      	str	r0, [r4, #12]
 8009e00:	2104      	movs	r1, #4
 8009e02:	6860      	ldr	r0, [r4, #4]
 8009e04:	f7ff ff82 	bl	8009d0c <std>
 8009e08:	68a0      	ldr	r0, [r4, #8]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	2109      	movs	r1, #9
 8009e0e:	f7ff ff7d 	bl	8009d0c <std>
 8009e12:	68e0      	ldr	r0, [r4, #12]
 8009e14:	2202      	movs	r2, #2
 8009e16:	2112      	movs	r1, #18
 8009e18:	f7ff ff78 	bl	8009d0c <std>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	61a3      	str	r3, [r4, #24]
 8009e20:	e7d2      	b.n	8009dc8 <__sinit+0xc>
 8009e22:	bf00      	nop
 8009e24:	0800a1f8 	.word	0x0800a1f8
 8009e28:	08009d55 	.word	0x08009d55

08009e2c <__sfp>:
 8009e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2e:	4607      	mov	r7, r0
 8009e30:	f7ff ffac 	bl	8009d8c <__sfp_lock_acquire>
 8009e34:	4b1e      	ldr	r3, [pc, #120]	; (8009eb0 <__sfp+0x84>)
 8009e36:	681e      	ldr	r6, [r3, #0]
 8009e38:	69b3      	ldr	r3, [r6, #24]
 8009e3a:	b913      	cbnz	r3, 8009e42 <__sfp+0x16>
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7ff ffbd 	bl	8009dbc <__sinit>
 8009e42:	3648      	adds	r6, #72	; 0x48
 8009e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	d503      	bpl.n	8009e54 <__sfp+0x28>
 8009e4c:	6833      	ldr	r3, [r6, #0]
 8009e4e:	b30b      	cbz	r3, 8009e94 <__sfp+0x68>
 8009e50:	6836      	ldr	r6, [r6, #0]
 8009e52:	e7f7      	b.n	8009e44 <__sfp+0x18>
 8009e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e58:	b9d5      	cbnz	r5, 8009e90 <__sfp+0x64>
 8009e5a:	4b16      	ldr	r3, [pc, #88]	; (8009eb4 <__sfp+0x88>)
 8009e5c:	60e3      	str	r3, [r4, #12]
 8009e5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e62:	6665      	str	r5, [r4, #100]	; 0x64
 8009e64:	f000 f847 	bl	8009ef6 <__retarget_lock_init_recursive>
 8009e68:	f7ff ff96 	bl	8009d98 <__sfp_lock_release>
 8009e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e74:	6025      	str	r5, [r4, #0]
 8009e76:	61a5      	str	r5, [r4, #24]
 8009e78:	2208      	movs	r2, #8
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e80:	f7fb ffb2 	bl	8005de8 <memset>
 8009e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e90:	3468      	adds	r4, #104	; 0x68
 8009e92:	e7d9      	b.n	8009e48 <__sfp+0x1c>
 8009e94:	2104      	movs	r1, #4
 8009e96:	4638      	mov	r0, r7
 8009e98:	f7ff ff62 	bl	8009d60 <__sfmoreglue>
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	6030      	str	r0, [r6, #0]
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d1d5      	bne.n	8009e50 <__sfp+0x24>
 8009ea4:	f7ff ff78 	bl	8009d98 <__sfp_lock_release>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	e7ee      	b.n	8009e8c <__sfp+0x60>
 8009eae:	bf00      	nop
 8009eb0:	0800a1f8 	.word	0x0800a1f8
 8009eb4:	ffff0001 	.word	0xffff0001

08009eb8 <_fwalk_reent>:
 8009eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	4688      	mov	r8, r1
 8009ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ec4:	2700      	movs	r7, #0
 8009ec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eca:	f1b9 0901 	subs.w	r9, r9, #1
 8009ece:	d505      	bpl.n	8009edc <_fwalk_reent+0x24>
 8009ed0:	6824      	ldr	r4, [r4, #0]
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	d1f7      	bne.n	8009ec6 <_fwalk_reent+0xe>
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009edc:	89ab      	ldrh	r3, [r5, #12]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d907      	bls.n	8009ef2 <_fwalk_reent+0x3a>
 8009ee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	d003      	beq.n	8009ef2 <_fwalk_reent+0x3a>
 8009eea:	4629      	mov	r1, r5
 8009eec:	4630      	mov	r0, r6
 8009eee:	47c0      	blx	r8
 8009ef0:	4307      	orrs	r7, r0
 8009ef2:	3568      	adds	r5, #104	; 0x68
 8009ef4:	e7e9      	b.n	8009eca <_fwalk_reent+0x12>

08009ef6 <__retarget_lock_init_recursive>:
 8009ef6:	4770      	bx	lr

08009ef8 <__retarget_lock_acquire_recursive>:
 8009ef8:	4770      	bx	lr

08009efa <__retarget_lock_release_recursive>:
 8009efa:	4770      	bx	lr

08009efc <__swhatbuf_r>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	460e      	mov	r6, r1
 8009f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f04:	2900      	cmp	r1, #0
 8009f06:	b096      	sub	sp, #88	; 0x58
 8009f08:	4614      	mov	r4, r2
 8009f0a:	461d      	mov	r5, r3
 8009f0c:	da08      	bge.n	8009f20 <__swhatbuf_r+0x24>
 8009f0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	602a      	str	r2, [r5, #0]
 8009f16:	061a      	lsls	r2, r3, #24
 8009f18:	d410      	bmi.n	8009f3c <__swhatbuf_r+0x40>
 8009f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f1e:	e00e      	b.n	8009f3e <__swhatbuf_r+0x42>
 8009f20:	466a      	mov	r2, sp
 8009f22:	f000 f903 	bl	800a12c <_fstat_r>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	dbf1      	blt.n	8009f0e <__swhatbuf_r+0x12>
 8009f2a:	9a01      	ldr	r2, [sp, #4]
 8009f2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f34:	425a      	negs	r2, r3
 8009f36:	415a      	adcs	r2, r3
 8009f38:	602a      	str	r2, [r5, #0]
 8009f3a:	e7ee      	b.n	8009f1a <__swhatbuf_r+0x1e>
 8009f3c:	2340      	movs	r3, #64	; 0x40
 8009f3e:	2000      	movs	r0, #0
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	b016      	add	sp, #88	; 0x58
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f48 <__smakebuf_r>:
 8009f48:	898b      	ldrh	r3, [r1, #12]
 8009f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f4c:	079d      	lsls	r5, r3, #30
 8009f4e:	4606      	mov	r6, r0
 8009f50:	460c      	mov	r4, r1
 8009f52:	d507      	bpl.n	8009f64 <__smakebuf_r+0x1c>
 8009f54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	6123      	str	r3, [r4, #16]
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	6163      	str	r3, [r4, #20]
 8009f60:	b002      	add	sp, #8
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	ab01      	add	r3, sp, #4
 8009f66:	466a      	mov	r2, sp
 8009f68:	f7ff ffc8 	bl	8009efc <__swhatbuf_r>
 8009f6c:	9900      	ldr	r1, [sp, #0]
 8009f6e:	4605      	mov	r5, r0
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7ff f957 	bl	8009224 <_malloc_r>
 8009f76:	b948      	cbnz	r0, 8009f8c <__smakebuf_r+0x44>
 8009f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7c:	059a      	lsls	r2, r3, #22
 8009f7e:	d4ef      	bmi.n	8009f60 <__smakebuf_r+0x18>
 8009f80:	f023 0303 	bic.w	r3, r3, #3
 8009f84:	f043 0302 	orr.w	r3, r3, #2
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	e7e3      	b.n	8009f54 <__smakebuf_r+0xc>
 8009f8c:	4b0d      	ldr	r3, [pc, #52]	; (8009fc4 <__smakebuf_r+0x7c>)
 8009f8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	6020      	str	r0, [r4, #0]
 8009f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f98:	81a3      	strh	r3, [r4, #12]
 8009f9a:	9b00      	ldr	r3, [sp, #0]
 8009f9c:	6163      	str	r3, [r4, #20]
 8009f9e:	9b01      	ldr	r3, [sp, #4]
 8009fa0:	6120      	str	r0, [r4, #16]
 8009fa2:	b15b      	cbz	r3, 8009fbc <__smakebuf_r+0x74>
 8009fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f000 f8d1 	bl	800a150 <_isatty_r>
 8009fae:	b128      	cbz	r0, 8009fbc <__smakebuf_r+0x74>
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	f023 0303 	bic.w	r3, r3, #3
 8009fb6:	f043 0301 	orr.w	r3, r3, #1
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	89a0      	ldrh	r0, [r4, #12]
 8009fbe:	4305      	orrs	r5, r0
 8009fc0:	81a5      	strh	r5, [r4, #12]
 8009fc2:	e7cd      	b.n	8009f60 <__smakebuf_r+0x18>
 8009fc4:	08009d55 	.word	0x08009d55

08009fc8 <_malloc_usable_size_r>:
 8009fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fcc:	1f18      	subs	r0, r3, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bfbc      	itt	lt
 8009fd2:	580b      	ldrlt	r3, [r1, r0]
 8009fd4:	18c0      	addlt	r0, r0, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_raise_r>:
 8009fd8:	291f      	cmp	r1, #31
 8009fda:	b538      	push	{r3, r4, r5, lr}
 8009fdc:	4604      	mov	r4, r0
 8009fde:	460d      	mov	r5, r1
 8009fe0:	d904      	bls.n	8009fec <_raise_r+0x14>
 8009fe2:	2316      	movs	r3, #22
 8009fe4:	6003      	str	r3, [r0, #0]
 8009fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fee:	b112      	cbz	r2, 8009ff6 <_raise_r+0x1e>
 8009ff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ff4:	b94b      	cbnz	r3, 800a00a <_raise_r+0x32>
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 f830 	bl	800a05c <_getpid_r>
 8009ffc:	462a      	mov	r2, r5
 8009ffe:	4601      	mov	r1, r0
 800a000:	4620      	mov	r0, r4
 800a002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a006:	f000 b817 	b.w	800a038 <_kill_r>
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d00a      	beq.n	800a024 <_raise_r+0x4c>
 800a00e:	1c59      	adds	r1, r3, #1
 800a010:	d103      	bne.n	800a01a <_raise_r+0x42>
 800a012:	2316      	movs	r3, #22
 800a014:	6003      	str	r3, [r0, #0]
 800a016:	2001      	movs	r0, #1
 800a018:	e7e7      	b.n	8009fea <_raise_r+0x12>
 800a01a:	2400      	movs	r4, #0
 800a01c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a020:	4628      	mov	r0, r5
 800a022:	4798      	blx	r3
 800a024:	2000      	movs	r0, #0
 800a026:	e7e0      	b.n	8009fea <_raise_r+0x12>

0800a028 <raise>:
 800a028:	4b02      	ldr	r3, [pc, #8]	; (800a034 <raise+0xc>)
 800a02a:	4601      	mov	r1, r0
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	f7ff bfd3 	b.w	8009fd8 <_raise_r>
 800a032:	bf00      	nop
 800a034:	20000010 	.word	0x20000010

0800a038 <_kill_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	; (800a058 <_kill_r+0x20>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	4611      	mov	r1, r2
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	f7f7 fd7f 	bl	8001b48 <_kill>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d102      	bne.n	800a054 <_kill_r+0x1c>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	b103      	cbz	r3, 800a054 <_kill_r+0x1c>
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	bf00      	nop
 800a058:	200005a4 	.word	0x200005a4

0800a05c <_getpid_r>:
 800a05c:	f7f7 bd6c 	b.w	8001b38 <_getpid>

0800a060 <__sread>:
 800a060:	b510      	push	{r4, lr}
 800a062:	460c      	mov	r4, r1
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	f000 f894 	bl	800a194 <_read_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	bfab      	itete	ge
 800a070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a072:	89a3      	ldrhlt	r3, [r4, #12]
 800a074:	181b      	addge	r3, r3, r0
 800a076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a07a:	bfac      	ite	ge
 800a07c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a07e:	81a3      	strhlt	r3, [r4, #12]
 800a080:	bd10      	pop	{r4, pc}

0800a082 <__swrite>:
 800a082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a086:	461f      	mov	r7, r3
 800a088:	898b      	ldrh	r3, [r1, #12]
 800a08a:	05db      	lsls	r3, r3, #23
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	4616      	mov	r6, r2
 800a092:	d505      	bpl.n	800a0a0 <__swrite+0x1e>
 800a094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a098:	2302      	movs	r3, #2
 800a09a:	2200      	movs	r2, #0
 800a09c:	f000 f868 	bl	800a170 <_lseek_r>
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b6:	f000 b817 	b.w	800a0e8 <_write_r>

0800a0ba <__sseek>:
 800a0ba:	b510      	push	{r4, lr}
 800a0bc:	460c      	mov	r4, r1
 800a0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c2:	f000 f855 	bl	800a170 <_lseek_r>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	bf15      	itete	ne
 800a0cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0d6:	81a3      	strheq	r3, [r4, #12]
 800a0d8:	bf18      	it	ne
 800a0da:	81a3      	strhne	r3, [r4, #12]
 800a0dc:	bd10      	pop	{r4, pc}

0800a0de <__sclose>:
 800a0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e2:	f000 b813 	b.w	800a10c <_close_r>
	...

0800a0e8 <_write_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d07      	ldr	r5, [pc, #28]	; (800a108 <_write_r+0x20>)
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	4608      	mov	r0, r1
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	602a      	str	r2, [r5, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f7f7 fd5d 	bl	8001bb6 <_write>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d102      	bne.n	800a106 <_write_r+0x1e>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	b103      	cbz	r3, 800a106 <_write_r+0x1e>
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	bd38      	pop	{r3, r4, r5, pc}
 800a108:	200005a4 	.word	0x200005a4

0800a10c <_close_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4d06      	ldr	r5, [pc, #24]	; (800a128 <_close_r+0x1c>)
 800a110:	2300      	movs	r3, #0
 800a112:	4604      	mov	r4, r0
 800a114:	4608      	mov	r0, r1
 800a116:	602b      	str	r3, [r5, #0]
 800a118:	f7f7 fd69 	bl	8001bee <_close>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d102      	bne.n	800a126 <_close_r+0x1a>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	b103      	cbz	r3, 800a126 <_close_r+0x1a>
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	200005a4 	.word	0x200005a4

0800a12c <_fstat_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4d07      	ldr	r5, [pc, #28]	; (800a14c <_fstat_r+0x20>)
 800a130:	2300      	movs	r3, #0
 800a132:	4604      	mov	r4, r0
 800a134:	4608      	mov	r0, r1
 800a136:	4611      	mov	r1, r2
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	f7f7 fd64 	bl	8001c06 <_fstat>
 800a13e:	1c43      	adds	r3, r0, #1
 800a140:	d102      	bne.n	800a148 <_fstat_r+0x1c>
 800a142:	682b      	ldr	r3, [r5, #0]
 800a144:	b103      	cbz	r3, 800a148 <_fstat_r+0x1c>
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	bd38      	pop	{r3, r4, r5, pc}
 800a14a:	bf00      	nop
 800a14c:	200005a4 	.word	0x200005a4

0800a150 <_isatty_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4d06      	ldr	r5, [pc, #24]	; (800a16c <_isatty_r+0x1c>)
 800a154:	2300      	movs	r3, #0
 800a156:	4604      	mov	r4, r0
 800a158:	4608      	mov	r0, r1
 800a15a:	602b      	str	r3, [r5, #0]
 800a15c:	f7f7 fd63 	bl	8001c26 <_isatty>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_isatty_r+0x1a>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	b103      	cbz	r3, 800a16a <_isatty_r+0x1a>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	200005a4 	.word	0x200005a4

0800a170 <_lseek_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d07      	ldr	r5, [pc, #28]	; (800a190 <_lseek_r+0x20>)
 800a174:	4604      	mov	r4, r0
 800a176:	4608      	mov	r0, r1
 800a178:	4611      	mov	r1, r2
 800a17a:	2200      	movs	r2, #0
 800a17c:	602a      	str	r2, [r5, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	f7f7 fd5c 	bl	8001c3c <_lseek>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d102      	bne.n	800a18e <_lseek_r+0x1e>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	b103      	cbz	r3, 800a18e <_lseek_r+0x1e>
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	200005a4 	.word	0x200005a4

0800a194 <_read_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4d07      	ldr	r5, [pc, #28]	; (800a1b4 <_read_r+0x20>)
 800a198:	4604      	mov	r4, r0
 800a19a:	4608      	mov	r0, r1
 800a19c:	4611      	mov	r1, r2
 800a19e:	2200      	movs	r2, #0
 800a1a0:	602a      	str	r2, [r5, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f7f7 fcea 	bl	8001b7c <_read>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d102      	bne.n	800a1b2 <_read_r+0x1e>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	b103      	cbz	r3, 800a1b2 <_read_r+0x1e>
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	200005a4 	.word	0x200005a4

0800a1b8 <_init>:
 800a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ba:	bf00      	nop
 800a1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1be:	bc08      	pop	{r3}
 800a1c0:	469e      	mov	lr, r3
 800a1c2:	4770      	bx	lr

0800a1c4 <_fini>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr
